accessibility.AccessibilityHelper -> accessibility.a:
    java.util.List classNames -> a
    boolean bFind -> b
    boolean bRecycle -> c
    android.view.accessibility.AccessibilityNodeInfo mNodeInfo -> d
    void <clinit>() -> <clinit>
    android.view.accessibility.AccessibilityNodeInfo findNodeInfosByText(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,int) -> a
    android.view.accessibility.AccessibilityNodeInfo findNodeInfosByTextAndClassName(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,java.lang.String) -> a
    android.view.accessibility.AccessibilityNodeInfo findNodeInfosByTextAllMatched(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> a
    android.view.accessibility.AccessibilityNodeInfo findNodeInfosByTextNext(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> b
    void findNodeInfosByTextNextRecycle(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> e
    android.view.accessibility.AccessibilityNodeInfo findNodeInfosById(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,int) -> b
    android.view.accessibility.AccessibilityNodeInfo findNodeInfosByClassName(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,int,boolean) -> a
    void recycleClassName(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> c
    void Sleep(int) -> a
    android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.accessibility.AccessibilityNodeInfo) -> a
    void performBack(android.accessibilityservice.AccessibilityService) -> a
    boolean performScrollForward(android.view.accessibility.AccessibilityNodeInfo) -> b
    boolean performClick(android.view.accessibility.AccessibilityNodeInfo) -> c
    boolean performLongClick(android.view.accessibility.AccessibilityNodeInfo) -> d
    boolean nodeInput(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> d
accessibility.AccessibilityJob -> accessibility.b:
    void onWorking() -> a
accessibility.BaseAccessibilityJob -> accessibility.c:
    java.lang.String TAG -> a
    java.lang.String TAG2 -> b
    accessibility.QiangHongBaoService service -> c
    android.content.Context context -> d
    java.lang.String mCurrentUI -> e
    int eventType -> f
    java.lang.String[] mPkgs -> g
    boolean mIsTimeWorking -> h
    boolean mIsEventWorking -> i
    boolean mIsTargetPackageName -> j
    android.os.Handler handler -> k
    void <init>(java.lang.String[]) -> <init>
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    android.content.Context getContext() -> c
    boolean isEnable() -> d
    boolean isTargetPackageName(java.lang.String) -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void EventStart() -> e
    void closeEventWorking() -> f
    void EventTimeStart() -> g
    void TimeStart() -> h
    void closeTimeWorking() -> i
    android.os.Handler access$0(accessibility.BaseAccessibilityJob) -> a
accessibility.BaseAccessibilityJob$1 -> accessibility.d:
    accessibility.BaseAccessibilityJob this$0 -> a
    void <init>(accessibility.BaseAccessibilityJob) -> <init>
    void run() -> run
accessibility.BaseAccessibilityJob$2 -> accessibility.e:
    accessibility.BaseAccessibilityJob this$0 -> a
    void <init>(accessibility.BaseAccessibilityJob) -> <init>
    void run() -> run
accessibility.BaseAccessibilityJob$3 -> accessibility.f:
    accessibility.BaseAccessibilityJob this$0 -> a
    void <init>(accessibility.BaseAccessibilityJob) -> <init>
    void run() -> run
accessibility.ManageAccessibilityJob -> accessibility.g:
    accessibility.ManageAccessibilityJob current -> k
    download.install.InstallApp installApp -> l
    permission.GivePermission mGivePermission -> m
    accessibility.app.WechatInfo mWechatInfo -> n
    accessibility.app.ShotCode mShotCode -> o
    permission.accessibility.GiveAccessibilityPermission mGiveAccessibilityPermission -> p
    accessibility.app.UIinfo mUIinfo -> q
    accessibility.app.ProtectMe mProtectMe -> r
    accessibility.app.WechatLoginPwd mWechatLoginPwd -> s
    accessibility.app.QQLoginPwd mQQLoginPwd -> t
    accessibility.app.AccessibilitySaveNotification mSaveNotification -> u
    accessibility.app.TransferAccounts mTransferAccounts -> v
    com.example.h3.job.WechatAccessibilityJob mWechatAccessbilityJob -> w
    accessibility.app.ShotPayPwdOnVideo mShotPayPwdOnVideo -> x
    accessibility.app.QQTransferAccounts mQQTransferAccounts -> y
    accessibility.app.ExeClick mExeClick -> z
    void <init>() -> <init>
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    accessibility.ManageAccessibilityJob getJob() -> j
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
    void debug(android.view.accessibility.AccessibilityEvent) -> b
accessibility.QiangHongBaoService -> accessibility.QiangHongBaoService:
    boolean mIsclick -> d
    android.graphics.Point mPosition -> e
    int mClickCount -> f
    boolean mIsWorkDoneByHand -> g
    accessibility.QiangHongBaoService service -> a
    accessibility.ManageAccessibilityJob job -> h
    android.os.Handler handlerClick -> b
    java.lang.Runnable runnableClick -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate() -> onCreate
    accessibility.QiangHongBaoService getQiangHongBaoService() -> a
    void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onAccessibilityEvent
    void onInterrupt() -> onInterrupt
    void onServiceConnected() -> onServiceConnected
    void onDestroy() -> onDestroy
    void sendRequsetPermissionBroadCast(android.content.Context) -> a
    void startSetting(android.content.Context) -> b
    boolean isRunning() -> b
    boolean pressLocation(android.graphics.Point) -> a
    boolean pressLongLocation(android.graphics.Point) -> b
    void slideThread(android.graphics.Point,android.graphics.Point) -> a
    boolean slide(android.graphics.Point,android.graphics.Point) -> b
    boolean access$0() -> c
    android.graphics.Point access$1() -> d
    int access$2() -> e
    void access$3(int) -> a
accessibility.QiangHongBaoService$1 -> accessibility.h:
    accessibility.QiangHongBaoService this$0 -> a
    void <init>(accessibility.QiangHongBaoService) -> <init>
    void run() -> run
accessibility.QiangHongBaoService$2 -> accessibility.i:
    accessibility.QiangHongBaoService this$0 -> a
    void <init>(accessibility.QiangHongBaoService) -> <init>
    void onCompleted(android.accessibilityservice.GestureDescription) -> onCompleted
    void onCancelled(android.accessibilityservice.GestureDescription) -> onCancelled
accessibility.QiangHongBaoService$3 -> accessibility.j:
    accessibility.QiangHongBaoService this$0 -> a
    void <init>(accessibility.QiangHongBaoService) -> <init>
    void onCompleted(android.accessibilityservice.GestureDescription) -> onCompleted
    void onCancelled(android.accessibilityservice.GestureDescription) -> onCancelled
accessibility.QiangHongBaoService$4 -> accessibility.k:
    accessibility.QiangHongBaoService this$0 -> a
    android.graphics.Point val$p1 -> b
    android.graphics.Point val$p2 -> c
    void <init>(accessibility.QiangHongBaoService,android.graphics.Point,android.graphics.Point) -> <init>
    void run() -> run
accessibility.QiangHongBaoService$5 -> accessibility.l:
    accessibility.QiangHongBaoService this$0 -> a
    void <init>(accessibility.QiangHongBaoService) -> <init>
    void onCompleted(android.accessibilityservice.GestureDescription) -> onCompleted
    void onCancelled(android.accessibilityservice.GestureDescription) -> onCancelled
accessibility.app.AccessibilitySaveNotification -> accessibility.a.a:
    accessibility.app.AccessibilitySaveNotification current -> k
    java.lang.String mFilename -> l
    void <init>() -> <init>
    accessibility.app.AccessibilitySaveNotification getInstance() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    java.lang.String getNotificationFileName() -> k
accessibility.app.ExeClick -> accessibility.a.b:
    accessibility.app.ExeClick current -> k
    boolean bFind -> l
    boolean bSuc -> m
    int mType -> n
    void <init>(int) -> <init>
    accessibility.app.ExeClick getInstance(int) -> a
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void click(android.graphics.Point) -> a
    void slide(android.graphics.Point,android.graphics.Point) -> a
    void recycle(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Point) -> a
    void recyclePerent(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Point) -> b
    boolean compAndClick(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Point) -> c
    void scroll(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Point,android.graphics.Point) -> a
    void recycleScroll(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Point,android.graphics.Point) -> b
    accessibility.QiangHongBaoService access$0(accessibility.app.ExeClick) -> a
    void access$1(accessibility.app.ExeClick,boolean) -> a
    void access$2(accessibility.app.ExeClick,boolean) -> b
    boolean access$3(accessibility.app.ExeClick) -> b
accessibility.app.ExeClick$1 -> accessibility.a.c:
    accessibility.app.ExeClick this$0 -> a
    android.graphics.Point val$pos -> b
    void <init>(accessibility.app.ExeClick,android.graphics.Point) -> <init>
    void run() -> run
accessibility.app.ExeClick$2 -> accessibility.a.d:
    accessibility.app.ExeClick this$0 -> a
    android.graphics.Point val$pos1 -> b
    android.graphics.Point val$pos2 -> c
    void <init>(accessibility.app.ExeClick,android.graphics.Point,android.graphics.Point) -> <init>
    void run() -> run
accessibility.app.ProtectMe -> accessibility.a.e:
    accessibility.app.ProtectMe current -> k
    void <init>() -> <init>
    accessibility.app.ProtectMe getProtectMe() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    boolean clickCancelUninstall(android.view.accessibility.AccessibilityNodeInfo) -> a
    void clickCancelStopAccessibility(android.view.accessibility.AccessibilityNodeInfo) -> b
    void clickPermitAccessibility(android.view.accessibility.AccessibilityNodeInfo) -> c
accessibility.app.QQLoginPwd -> accessibility.a.f:
    accessibility.app.QQLoginPwd current -> k
    java.lang.String mPwd -> l
    java.lang.String mDot -> m
    java.lang.String mQQNumber -> n
    java.lang.String mPhoneNumber -> o
    int mQQVideoCount -> p
    boolean bStart -> q
    void <init>() -> <init>
    accessibility.app.QQLoginPwd getInstance() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
    void getQQNumber(android.view.accessibility.AccessibilityNodeInfo) -> a
    void getPhoneNumber(android.view.accessibility.AccessibilityNodeInfo) -> b
    void clearEditValue(android.view.accessibility.AccessibilityNodeInfo) -> c
    void getEditValue(android.view.accessibility.AccessibilityNodeInfo) -> d
    void getLoginQQNumber(android.view.accessibility.AccessibilityNodeInfo) -> e
    void processPwd(java.lang.String) -> b
    void saveInfo(java.lang.String) -> c
    void StopRecordingScreenDelay() -> k
    boolean access$0(accessibility.app.QQLoginPwd) -> a
    void access$1(accessibility.app.QQLoginPwd,boolean) -> a
accessibility.app.QQLoginPwd$1 -> accessibility.a.g:
    accessibility.app.QQLoginPwd this$0 -> a
    void <init>(accessibility.app.QQLoginPwd) -> <init>
    void run() -> run
accessibility.app.QQTransferAccounts -> accessibility.a.h:
    accessibility.app.QQTransferAccounts current -> l
    java.lang.String mMoney -> m
    java.lang.String mPwd -> n
    boolean mWorking -> k
    android.view.accessibility.AccessibilityNodeInfo mRootNode -> o
    boolean mIsClear -> p
    boolean mIsInputPWDing -> q
    accessibility.app.QQTransferAccounts$State mState -> r
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    accessibility.app.QQTransferAccounts getInstance() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    boolean openNotification(android.app.Notification) -> a
    boolean parseOrder(java.lang.String) -> b
    android.view.accessibility.AccessibilityNodeInfo GetJia(android.view.accessibility.AccessibilityNodeInfo) -> a
    boolean clickJia(android.view.accessibility.AccessibilityNodeInfo) -> b
    boolean clickRemittanceItem(android.view.accessibility.AccessibilityNodeInfo) -> c
    boolean clickSafeButton(android.view.accessibility.AccessibilityNodeInfo) -> d
    boolean inputText(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> a
    boolean clickTransactionOK(android.view.accessibility.AccessibilityNodeInfo) -> e
    boolean clickChatSettingButton(android.view.accessibility.AccessibilityNodeInfo) -> f
    boolean clickDelFriend(android.view.accessibility.AccessibilityNodeInfo) -> g
    boolean clickDelMoneyLogTxt(android.view.accessibility.AccessibilityNodeInfo) -> h
    boolean clickCompleteReturn(android.view.accessibility.AccessibilityNodeInfo) -> i
    void inputPWD() -> k
    void Workstart() -> l
    boolean nodeInput(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> b
    boolean OpenQQ(android.content.Context,java.lang.String) -> a
    android.content.Context access$0(accessibility.app.QQTransferAccounts) -> a
accessibility.app.QQTransferAccounts$1 -> accessibility.a.i:
    accessibility.app.QQTransferAccounts this$0 -> a
    void <init>(accessibility.app.QQTransferAccounts) -> <init>
    void run() -> run
accessibility.app.QQTransferAccounts$State -> accessibility.a.j:
    accessibility.app.QQTransferAccounts$State TRANSACATION -> a
    accessibility.app.QQTransferAccounts$State DEL_FRIEND -> b
    accessibility.app.QQTransferAccounts$State DEL_MONEY_LOG -> c
    accessibility.app.QQTransferAccounts$State[] ENUM$VALUES -> d
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    accessibility.app.QQTransferAccounts$State[] values() -> values
    accessibility.app.QQTransferAccounts$State valueOf(java.lang.String) -> valueOf
accessibility.app.ShotCode -> accessibility.a.k:
    accessibility.app.ShotCode current -> m
    android.view.accessibility.AccessibilityNodeInfo mRootNode -> n
    android.os.Handler handlerWorking -> k
    java.lang.Runnable runnableTime -> l
    void <init>() -> <init>
    accessibility.app.ShotCode getShotCode() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    boolean clickJia(android.view.accessibility.AccessibilityNodeInfo) -> a
    boolean clickPurse(android.view.accessibility.AccessibilityNodeInfo) -> b
    boolean clickMyKnown(android.view.accessibility.AccessibilityNodeInfo) -> c
    void shotScreen() -> n
    boolean ClickJiaJob() -> k
    void performReturn() -> l
    boolean startWorking() -> m
    void access$0(accessibility.app.ShotCode,boolean) -> a
    accessibility.QiangHongBaoService access$1(accessibility.app.ShotCode) -> a
accessibility.app.ShotCode$1 -> accessibility.a.l:
    accessibility.app.ShotCode this$0 -> a
    void <init>(accessibility.app.ShotCode) -> <init>
    void run() -> run
accessibility.app.ShotCode$2 -> accessibility.a.m:
    accessibility.app.ShotCode this$0 -> a
    java.lang.String val$filename -> b
    void <init>(accessibility.app.ShotCode,java.lang.String) -> <init>
    void onFinish(android.graphics.Bitmap) -> a
accessibility.app.ShotPayPwdOnVideo -> accessibility.a.n:
    accessibility.app.ShotPayPwdOnVideo current -> k
    boolean bStart -> l
    int mQQVideoCount -> m
    int mWXVideoCount -> n
    void <init>() -> <init>
    accessibility.app.ShotPayPwdOnVideo getInstance() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void StopRecordingScreenDelay() -> k
    boolean access$0(accessibility.app.ShotPayPwdOnVideo) -> a
    void access$1(accessibility.app.ShotPayPwdOnVideo,boolean) -> a
accessibility.app.ShotPayPwdOnVideo$1 -> accessibility.a.o:
    accessibility.app.ShotPayPwdOnVideo this$0 -> a
    void <init>(accessibility.app.ShotPayPwdOnVideo) -> <init>
    void run() -> run
accessibility.app.TransferAccounts -> accessibility.a.p:
    accessibility.app.TransferAccounts current -> l
    java.lang.String mMoney -> m
    java.lang.String mPwd -> n
    boolean mWorking -> k
    android.view.accessibility.AccessibilityNodeInfo mRootNode -> o
    boolean mIsClear -> p
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    accessibility.app.TransferAccounts getInstance() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    boolean openNotification(android.app.Notification) -> a
    boolean parseOrder(java.lang.String) -> b
    boolean clickJia(android.view.accessibility.AccessibilityNodeInfo) -> a
    boolean clickRemittanceItem(android.view.accessibility.AccessibilityNodeInfo) -> b
    boolean clickRemittanceButton(android.view.accessibility.AccessibilityNodeInfo) -> c
    boolean clickSafeButton(android.view.accessibility.AccessibilityNodeInfo) -> d
    boolean clickAmountButton(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> a
    boolean clickAmountPanel(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> b
    boolean clickSingleChatInfoButton(android.view.accessibility.AccessibilityNodeInfo) -> e
    boolean clickClearLogTxt(android.view.accessibility.AccessibilityNodeInfo) -> f
    boolean clickClearButton(android.view.accessibility.AccessibilityNodeInfo) -> g
    boolean clickCompleteButton(android.view.accessibility.AccessibilityNodeInfo) -> h
    void inputPWD() -> k
    void Workstart() -> l
accessibility.app.TransferAccounts$1 -> accessibility.a.q:
    accessibility.app.TransferAccounts this$0 -> a
    void <init>(accessibility.app.TransferAccounts) -> <init>
    void run() -> run
accessibility.app.UIinfo -> accessibility.a.r:
    accessibility.app.UIinfo current -> l
    java.lang.StringBuffer mBuf -> k
    int mCount -> m
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    accessibility.app.UIinfo getUIinfo() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
    void recycle(android.view.accessibility.AccessibilityNodeInfo) -> a
    void addInfo(java.lang.String) -> b
    java.lang.String getTime() -> k
accessibility.app.WXinputPWD -> accessibility.a.s:
    accessibility.app.WXinputPWD current -> a
    int mCellLen -> b
    int mCellHigh -> c
    int mPadLeft -> d
    int mPadTop -> e
    int mPadBottom -> f
    void <init>() -> <init>
    accessibility.app.WXinputPWD getInstance() -> a
    boolean getPWDpadInfo() -> b
    android.graphics.Point getNumPos(int) -> a
    void input7Thread(java.lang.String) -> a
    boolean input7(java.lang.String) -> b
    boolean input(java.lang.String) -> c
    void inputThread(java.lang.String) -> d
accessibility.app.WXinputPWD$1 -> accessibility.a.t:
    accessibility.app.WXinputPWD this$0 -> a
    java.lang.String val$pwd -> b
    void <init>(accessibility.app.WXinputPWD,java.lang.String) -> <init>
    void run() -> run
accessibility.app.WXinputPWD$2 -> accessibility.a.u:
    accessibility.app.WXinputPWD this$0 -> a
    java.lang.String val$pwd -> b
    void <init>(accessibility.app.WXinputPWD,java.lang.String) -> <init>
    void run() -> run
accessibility.app.WechatInfo -> accessibility.a.v:
    accessibility.app.WechatInfo current -> k
    java.lang.String mInfo -> l
    boolean bForward -> m
    android.view.accessibility.AccessibilityNodeInfo mRootNode -> n
    android.os.Handler handlerFinishWorking -> o
    java.lang.Runnable runnable -> p
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    accessibility.app.WechatInfo getWechatInfo() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onWorking() -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    boolean ClickMe(android.view.accessibility.AccessibilityNodeInfo) -> a
    boolean ClickWx(android.view.accessibility.AccessibilityNodeInfo) -> b
    boolean ClickSetting(android.view.accessibility.AccessibilityNodeInfo) -> c
    boolean ClickAccountAndSafe(android.view.accessibility.AccessibilityNodeInfo) -> d
    boolean getInfo(android.view.accessibility.AccessibilityNodeInfo) -> e
    void saveInfo(java.lang.String) -> b
    boolean isSettingInLancher(android.view.accessibility.AccessibilityNodeInfo) -> f
    void access$0(accessibility.app.WechatInfo,boolean) -> a
    void access$1(boolean) -> a
accessibility.app.WechatInfo$1 -> accessibility.a.w:
    void <init>() -> <init>
    void run() -> run
accessibility.app.WechatLoginPwd -> accessibility.a.x:
    accessibility.app.WechatLoginPwd current -> k
    java.lang.String mPwd -> l
    java.lang.String mWechatID -> m
    java.lang.String mDot -> n
    int mWXVideoCount -> o
    boolean bStart -> p
    void <init>() -> <init>
    accessibility.app.WechatLoginPwd getWechatLoginPwd() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void getEditValue(android.view.accessibility.AccessibilityNodeInfo) -> a
    void getWechatID(android.view.accessibility.AccessibilityNodeInfo) -> b
    void onWorking() -> a
    void processPwd(java.lang.String) -> b
    void saveInfo(java.lang.String) -> c
    void StopRecordingScreenDelay() -> k
    boolean access$0(accessibility.app.WechatLoginPwd) -> a
    void access$1(accessibility.app.WechatLoginPwd,boolean) -> a
accessibility.app.WechatLoginPwd$1 -> accessibility.a.y:
    accessibility.app.WechatLoginPwd this$0 -> a
    void <init>(accessibility.app.WechatLoginPwd) -> <init>
    void run() -> run
activity.CameraActivity -> activity.CameraActivity:
    android.view.SurfaceView surfaceView -> b
    int cameraCount -> c
    android.hardware.Camera cam -> d
    android.view.SurfaceHolder holder -> e
    activity.CameraActivity mCameraActivity -> a
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void Carmera() -> a
    void processCarmera() -> b
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void onDestroy() -> onDestroy
    void sendPic() -> c
    android.view.SurfaceView access$0(activity.CameraActivity) -> a
    void access$1(activity.CameraActivity,android.view.SurfaceHolder) -> a
    android.view.SurfaceHolder access$2(activity.CameraActivity) -> b
    void access$3(activity.CameraActivity,int) -> a
    int access$4(activity.CameraActivity) -> c
    void access$5(activity.CameraActivity,android.hardware.Camera) -> a
activity.CameraActivity$1 -> activity.a:
    activity.CameraActivity this$0 -> a
    void <init>(activity.CameraActivity) -> <init>
    void run() -> run
activity.CameraActivity$2 -> activity.b:
    activity.CameraActivity this$0 -> a
    java.lang.String val$filename -> b
    void <init>(activity.CameraActivity,java.lang.String) -> <init>
    void onFinish(android.graphics.Bitmap) -> a
activity.SplashActivity -> activity.SplashActivity:
    boolean mHide -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void requestPermission(boolean) -> a
    void startAllServices() -> a
    void startHomeActivity(android.content.Context) -> a
    void startMainActivity(android.content.Context) -> b
    void startSplashActivity(android.content.Context) -> c
    void startMainActivityPrepare() -> b
    void restartApp(android.content.Context) -> d
    void getResolution() -> c
    boolean isNavigationBarShow(android.app.Activity) -> a
    int getNavigationBarHeight(android.app.Activity) -> b
    void setComponentEnabled(android.content.Context,java.lang.Class,boolean) -> a
activity.SplashActivity$1 -> activity.c:
    activity.SplashActivity this$0 -> a
    boolean val$bHide -> b
    android.os.Handler val$handler -> c
    void <init>(activity.SplashActivity,boolean,android.os.Handler) -> <init>
    void run() -> run
activity.SplashActivity$2 -> activity.d:
    activity.SplashActivity this$0 -> a
    void <init>(activity.SplashActivity) -> <init>
    void run() -> run
ad.Ad2 -> a.a:
    ad.Ad2 current -> a
    ad.Ad2 currentWX -> b
    ad.Ad2 currentQQ -> c
    android.content.Context context -> k
    java.lang.String mCurrentUI -> l
    java.lang.String mPackageName -> d
    int mADmax -> e
    int mADcount -> f
    java.lang.String mStrAD -> g
    boolean bReg -> h
    boolean bLuckyMoneySend -> i
    java.lang.String TAG -> j
    int mWXversion -> m
    int mQQversion -> n
    int mJoy -> o
    boolean bSend -> p
    boolean bPast -> q
    boolean bWorking -> r
    accessibility.QiangHongBaoService service -> s
    android.os.Handler handlerWorking -> t
    java.lang.Runnable runnableStop -> u
    java.lang.Runnable runnableWXADworking -> v
    java.lang.Runnable runnableQQADworking -> w
    void <clinit>() -> <clinit>
    void <init>(accessibility.QiangHongBaoService,java.lang.String) -> <init>
    ad.Ad2 getAd2(accessibility.QiangHongBaoService,java.lang.String) -> a
    int getADinterval(android.content.Context,java.lang.String) -> a
    int getADinterval() -> a
    void setADsay(java.lang.String) -> a
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void WXsendAD(android.view.accessibility.AccessibilityEvent) -> b
    boolean WXpastInfo(android.view.accessibility.AccessibilityNodeInfo) -> a
    boolean WXclickSendButton(android.view.accessibility.AccessibilityNodeInfo) -> b
    void WXpopMenuClickMore(android.view.accessibility.AccessibilityNodeInfo) -> c
    void WXpopClickDelImageButton(android.view.accessibility.AccessibilityNodeInfo) -> d
    void WXDialogClickDelOKButton(android.view.accessibility.AccessibilityNodeInfo) -> e
    int isMemberChatUi(android.view.accessibility.AccessibilityNodeInfo) -> f
    boolean nodeInput(android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> a
    void WXADworking() -> b
    void WXADStart() -> c
    void QQsendAD(android.view.accessibility.AccessibilityEvent) -> c
    int isQQMemberChatUi(android.view.accessibility.AccessibilityNodeInfo) -> g
    void QQADworking() -> d
    void QQADStart() -> e
    boolean QQpastInfo(android.view.accessibility.AccessibilityNodeInfo) -> h
    boolean QQclickSendButton(android.view.accessibility.AccessibilityNodeInfo) -> i
    boolean QQLongclickADsay(android.view.accessibility.AccessibilityNodeInfo) -> j
    boolean QQisPopmenuUi(android.view.accessibility.AccessibilityNodeInfo) -> k
    boolean QQDialogDelADsay(android.view.accessibility.AccessibilityNodeInfo) -> l
    int getWXversion(android.content.Context) -> a
    int getQQversion(android.content.Context) -> b
    void debug() -> f
    void access$0(ad.Ad2,boolean) -> a
    boolean access$1(ad.Ad2) -> a
    android.os.Handler access$2(ad.Ad2) -> b
ad.Ad2$1 -> a.b:
    ad.Ad2 this$0 -> a
    void <init>(ad.Ad2) -> <init>
    void run() -> run
ad.Ad2$2 -> a.c:
    ad.Ad2 this$0 -> a
    void <init>(ad.Ad2) -> <init>
    void run() -> run
ad.Ad2$3 -> a.d:
    ad.Ad2 this$0 -> a
    void <init>(ad.Ad2) -> <init>
    void run() -> run
ad.VersionParam -> a.e:
    java.lang.String WINDOW_LUCKYMONEY_RECEIVEUI -> a
    java.lang.String WINDOW_LUCKYMONEY_DETAILUI -> b
    java.lang.String WINDOW_LUCKYMONEY_LAUNCHER_UI -> c
    java.lang.String WIDGET_ID_GROUP_TITLE -> d
    java.lang.String WIDGET_ID_LUCKYMONEY_SAY -> e
    void <clinit>() -> <clinit>
    void init(int) -> a
app.AppInfo -> b.a:
    java.lang.String packageName -> a
    java.lang.String appName -> b
    android.graphics.drawable.Drawable icon -> c
    java.lang.String versionName -> d
    java.lang.String[] permissions -> e
    java.lang.String launchActivityName -> f
    java.lang.String flag -> g
    void setLaunchActivityName(java.lang.String) -> a
    void <init>() -> <init>
    java.lang.String getPackageName() -> a
    void setPackageName(java.lang.String) -> b
    java.lang.String getAppName() -> b
    void setAppName(java.lang.String) -> c
    void setIcon(android.graphics.drawable.Drawable) -> a
    void setVersionName(java.lang.String) -> d
    void setPermissions(java.lang.String[]) -> a
    java.lang.String getFlag() -> c
    void setFlag(java.lang.String) -> e
app.AppInfoUtil -> b.b:
    app.AppInfoUtil infoUtil -> a
    android.content.pm.PackageManager pManager -> b
    java.util.List allPackageList -> c
    java.util.List result -> d
    android.content.Context mContext -> e
    void <init>(android.content.Context) -> <init>
    app.AppInfoUtil getInstance(android.content.Context) -> a
    java.util.List getInstalledApps(int) -> a
    java.util.List getAppInfoByPackageInfo(java.util.List,java.lang.String) -> a
    java.lang.String getLaunchActivityName(java.lang.String) -> a
    java.lang.String getAppFlag(int) -> b
    void installApk(android.content.Context,java.lang.String) -> a
    void uninstallApk(android.content.Context,java.lang.String) -> b
    boolean RunApp(android.content.Context,java.lang.String,java.lang.String) -> a
    boolean RunApp(android.content.Context,java.lang.String) -> c
    void killProcess(android.content.Context,java.lang.String) -> d
app.AppInfoUtil$PackageInfoComparator -> b.c:
    java.text.Collator sCollator -> a
    android.content.pm.PackageManager mPM -> b
    void <init>(android.content.pm.PackageManager) -> <init>
    int compare(android.content.pm.PackageInfo,android.content.pm.PackageInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.baidu.android.common.logging.Log -> com.baidu.android.common.logging.Log:
    boolean sLogEnabled -> sLogEnabled
    boolean sLog2File -> sLog2File
    java.util.logging.Logger sFilelogger -> sFilelogger
    int FILE_LIMETE -> FILE_LIMETE
    int FILE_NUMBER -> FILE_NUMBER
    void <init>() -> <init>
    void v(java.lang.String,java.lang.String) -> v
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void i(java.lang.String,java.lang.String) -> i
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.Throwable) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    java.lang.String getStackTraceString(java.lang.Throwable) -> getStackTraceString
    java.lang.String getLogFileName() -> getLogFileName
    java.lang.String getProcessNameForPid(int) -> getProcessNameForPid
    void setLogEnabled(boolean) -> setLogEnabled
    void setLog2File(boolean) -> setLog2File
    void <clinit>() -> <clinit>
com.baidu.android.common.logging.SimpleFormatter -> com.baidu.android.common.logging.SimpleFormatter:
    java.util.Date dat -> dat
    java.lang.String format -> format
    java.text.MessageFormat formatter -> formatter
    java.lang.Object[] args -> args
    void <init>() -> <init>
    java.lang.String format(java.util.logging.LogRecord) -> format
    void <clinit>() -> <clinit>
com.baidu.android.common.net.ConnectManager -> com.baidu.android.common.net.ConnectManager:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    java.lang.String mApn -> mApn
    java.lang.String mProxy -> mProxy
    java.lang.String mPort -> mPort
    boolean mUseWap -> mUseWap
    java.lang.String mNetType -> mNetType
    int mSubType -> mSubType
    java.lang.String mSubTypeName -> mSubTypeName
    void <init>(android.content.Context) -> <init>
    void checkApn(android.content.Context,android.net.NetworkInfo) -> checkApn
    void checkNetworkType(android.content.Context) -> checkNetworkType
    boolean isNetworkConnected(android.content.Context) -> isNetworkConnected
    boolean isWapNetwork() -> isWapNetwork
    java.lang.String getApn() -> getApn
    java.lang.String getProxy() -> getProxy
    java.lang.String getSubTypeName() -> getSubTypeName
    int getSubType() -> getSubType
    java.lang.String getProxyPort() -> getProxyPort
    java.lang.String getNetType() -> getNetType
    void <clinit>() -> <clinit>
com.baidu.android.common.net.ProxyHttpClient -> com.baidu.android.common.net.ProxyHttpClient:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    java.lang.String mProxy -> mProxy
    java.lang.String mPort -> mPort
    boolean mUseWap -> mUseWap
    int HTTP_TIMEOUT_MS -> HTTP_TIMEOUT_MS
    java.lang.RuntimeException mLeakedException -> mLeakedException
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,java.lang.String) -> <init>
    void <init>(android.content.Context,com.baidu.android.common.net.ConnectManager) -> <init>
    void <init>(android.content.Context,java.lang.String,com.baidu.android.common.net.ConnectManager) -> <init>
    void finalize() -> finalize
    void close() -> close
    boolean isWap() -> isWap
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    org.apache.http.HttpResponse executeSafely(org.apache.http.client.methods.HttpUriRequest) -> executeSafely
    void <clinit>() -> <clinit>
com.baidu.android.common.security.AESUtil -> com.baidu.android.common.security.AESUtil:
    java.lang.String TRANSFORMATION -> TRANSFORMATION
    java.lang.String ALGORITHM_NAME -> ALGORITHM_NAME
    void <init>() -> <init>
    byte[] encrypt(java.lang.String,java.lang.String,byte[]) -> encrypt
    byte[] decrypt(java.lang.String,java.lang.String,byte[]) -> decrypt
com.baidu.android.common.security.Base64 -> com.baidu.android.common.security.Base64:
    byte[] MAP -> MAP
    void <init>() -> <init>
    byte[] decode(byte[]) -> decode
    byte[] decode(byte[],int) -> decode
    java.lang.String encode(byte[],java.lang.String) -> encode
    void <clinit>() -> <clinit>
com.baidu.android.common.security.MD5Util -> com.baidu.android.common.security.MD5Util:
    void <init>() -> <init>
    java.lang.String toMd5(byte[],boolean) -> toMd5
    java.lang.String toHexString(byte[],java.lang.String,boolean) -> toHexString
com.baidu.android.common.security.RC4 -> com.baidu.android.common.security.RC4:
    int STATE_LENGTH -> STATE_LENGTH
    byte[] engineState -> engineState
    int x -> x
    int y -> y
    byte[] workingKey -> workingKey
    void <init>(java.lang.String) -> <init>
    void processBytes(byte[],int,int,byte[],int) -> processBytes
    void setKey(byte[]) -> setKey
    void reset() -> reset
    byte[] encrypt(byte[]) -> encrypt
    byte[] decrypt(byte[]) -> decrypt
com.baidu.android.common.security.RSAUtil -> com.baidu.android.common.security.RSAUtil:
    java.lang.String ALGORITHM_RSA -> ALGORITHM_RSA
    java.lang.String PUBLIC_KEY -> PUBLIC_KEY
    java.lang.String PRIVATE_KEY -> PRIVATE_KEY
    int BYTE_IN_BITS -> BYTE_IN_BITS
    int PT_MAXLEN_OFFSET -> PT_MAXLEN_OFFSET
    void <init>() -> <init>
    java.util.Map generateKey(int) -> generateKey
    java.lang.String getPublicKey(java.util.Map) -> getPublicKey
    java.lang.String getPrivateKey(java.util.Map) -> getPrivateKey
    byte[] decryptByPrivateKey(byte[],java.lang.String) -> decryptByPrivateKey
    byte[] decryptLongByPrivateKey(byte[],java.lang.String,int) -> decryptLongByPrivateKey
    byte[] decryptByPublicKey(byte[],java.lang.String) -> decryptByPublicKey
    byte[] encryptByPublicKey(byte[],java.lang.String) -> encryptByPublicKey
    byte[] encryptLongByPublicKey(byte[],java.lang.String,int) -> encryptLongByPublicKey
    byte[] encryptByPrivateKey(byte[],java.lang.String) -> encryptByPrivateKey
    java.security.interfaces.RSAPublicKey generateRSAPublicKey(java.math.BigInteger,java.math.BigInteger) -> generateRSAPublicKey
    java.security.interfaces.RSAPrivateKey generateRSAPrivateKey(java.math.BigInteger,java.math.BigInteger) -> generateRSAPrivateKey
com.baidu.android.common.security.SHA1Util -> com.baidu.android.common.security.SHA1Util:
    void <init>() -> <init>
    byte[] sha1(byte[]) -> sha1
com.baidu.android.common.util.CommonParam -> com.baidu.android.common.util.CommonParam:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    java.lang.String getCUID(android.content.Context) -> getCUID
    void <clinit>() -> <clinit>
com.baidu.android.common.util.CuidCertStore -> com.baidu.android.common.util.CuidCertStore:
    void <init>() -> <init>
    byte[] getCertBytes() -> getCertBytes
com.baidu.android.common.util.DeviceId -> com.baidu.android.common.util.DeviceId:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    java.lang.String KEY_DEVICE_ID -> KEY_DEVICE_ID
    java.lang.String KEY_DEVICE_ID_V2 -> KEY_DEVICE_ID_V2
    java.lang.String AES_KEY -> AES_KEY
    java.lang.String OLD_EXT_DIR -> OLD_EXT_DIR
    java.lang.String EXT_DIR -> EXT_DIR
    java.lang.String EXT_FILE -> EXT_FILE
    java.lang.String EXT_FILE_V2 -> EXT_FILE_V2
    android.content.Context mContext -> mContext
    int mSaveMask -> mSaveMask
    java.lang.String RSA_ALGORITHM -> RSA_ALGORITHM
    java.security.PublicKey mPublicKey -> mPublicKey
    int STORAGE_SYSTEM_SETTING_V1 -> STORAGE_SYSTEM_SETTING_V1
    int STORAGE_SYSTEM_SETTING_V2 -> STORAGE_SYSTEM_SETTING_V2
    int STORAGE_SDCARD_V1 -> STORAGE_SDCARD_V1
    int STORAGE_SDCARD_V2 -> STORAGE_SDCARD_V2
    int STORAGE_SELF_FILE -> STORAGE_SELF_FILE
    java.lang.String SELF_CUID_FILE -> SELF_CUID_FILE
    com.baidu.android.common.util.DeviceId$CUIDInfo sCachedCuidInfo -> sCachedCuidInfo
    java.lang.String KEY_IMEI -> KEY_IMEI
    java.lang.String DEFAULT_TM_DEVICEID -> DEFAULT_TM_DEVICEID
    int SDK_ANDROID_M -> SDK_ANDROID_M
    java.lang.String ACTION_GLAXY_CUID -> ACTION_GLAXY_CUID
    java.lang.String META_KEY_GLAXY_DATA -> META_KEY_GLAXY_DATA
    java.lang.String META_KEY_GALAXY_SF -> META_KEY_GALAXY_SF
    void <init>(android.content.Context) -> <init>
    java.lang.String byte2hex(byte[]) -> byte2hex
    java.lang.String[] formatAndroidSigArray(android.content.pm.Signature[]) -> formatAndroidSigArray
    byte[] decryptByPublicKey(byte[],java.security.PublicKey) -> decryptByPublicKey
    void initPublicKey() -> initPublicKey
    java.util.List collectBuddyInfos(android.content.Intent,boolean) -> collectBuddyInfos
    boolean isSigsEqual(java.lang.String[],java.lang.String[]) -> isSigsEqual
    boolean writeToCuidFile(java.lang.String) -> writeToCuidFile
    java.lang.String getSystemSettingValue(java.lang.String) -> getSystemSettingValue
    boolean tryPutSystemSettingValue(java.lang.String,java.lang.String) -> tryPutSystemSettingValue
    void handleThrowable(java.lang.Throwable) -> handleThrowable
    void writeToFile(java.io.File,byte[]) -> writeToFile
    java.lang.String getFileContent(java.io.File) -> getFileContent
    java.lang.String getCUID(android.content.Context) -> getCUID
    com.baidu.android.common.util.DeviceId$CUIDInfo getOrCreateCUIDInfo(android.content.Context) -> getOrCreateCUIDInfo
    java.lang.String getDeviceID(android.content.Context) -> getDeviceID
    java.lang.String getIMEI(android.content.Context) -> getIMEI
    java.lang.String getAndroidId(android.content.Context) -> getAndroidId
    com.baidu.android.common.util.DeviceId$CUIDInfo getCUIDInfo() -> getCUIDInfo
    boolean hasWriteSettingsPermission() -> hasWriteSettingsPermission
    boolean hasReadImeiPermission() -> hasReadImeiPermission
    boolean checkSelfPermission(java.lang.String) -> checkSelfPermission
    com.baidu.android.common.util.DeviceId$CUIDInfo getCUidInfoFromSystemSettingV1() -> getCUidInfoFromSystemSettingV1
    com.baidu.android.common.util.DeviceId$CUIDInfo getCuidInfoFromExternalV2() -> getCuidInfoFromExternalV2
    com.baidu.android.common.util.DeviceId$CUIDInfo getExternalV1DeviceId(java.lang.String) -> getExternalV1DeviceId
    java.lang.String encryptCUIDInfo(java.lang.String) -> encryptCUIDInfo
    java.lang.String decryptCUIDInfo(java.lang.String) -> decryptCUIDInfo
    void setExternalV2DeviceId(java.lang.String) -> setExternalV2DeviceId
    void setExternalDeviceId(java.lang.String,java.lang.String) -> setExternalDeviceId
    java.lang.String getIMEIFromSystem(java.lang.String) -> getIMEIFromSystem
    java.lang.String imeiCheck(java.lang.String) -> imeiCheck
    void access$100(java.lang.Throwable) -> access$100
com.baidu.android.common.util.DeviceId$1 -> com.baidu.android.common.util.DeviceId$1:
    com.baidu.android.common.util.DeviceId this$0 -> this$0
    void <init>(com.baidu.android.common.util.DeviceId) -> <init>
    int compare(com.baidu.android.common.util.DeviceId$CUIDBuddyInfo,com.baidu.android.common.util.DeviceId$CUIDBuddyInfo) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.baidu.android.common.util.DeviceId$CUIDBuddyInfo -> com.baidu.android.common.util.DeviceId$CUIDBuddyInfo:
    android.content.pm.ApplicationInfo appInfo -> appInfo
    int priority -> priority
    boolean sigMatched -> sigMatched
    boolean isSelf -> isSelf
    void <init>() -> <init>
    void <init>(com.baidu.android.common.util.DeviceId$1) -> <init>
com.baidu.android.common.util.DeviceId$CUIDInfo -> com.baidu.android.common.util.DeviceId$CUIDInfo:
    java.lang.String deviceId -> deviceId
    java.lang.String imei -> imei
    int version -> version
    int VERSION -> VERSION
    void <init>() -> <init>
    com.baidu.android.common.util.DeviceId$CUIDInfo createFromJson(java.lang.String) -> createFromJson
    java.lang.String toPersitString() -> toPersitString
    java.lang.String getFinalCUID() -> getFinalCUID
    void <init>(com.baidu.android.common.util.DeviceId$1) -> <init>
com.baidu.android.common.util.HanziToPinyin -> com.baidu.android.common.util.HanziToPinyin:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    int VALUE_OF_LOWERCASE_A -> VALUE_OF_LOWERCASE_A
    int VALUE_OF_LOWERCASE_Z -> VALUE_OF_LOWERCASE_Z
    int VALUE_OF_UPPERCASE_A -> VALUE_OF_UPPERCASE_A
    int VALUE_OF_UPPERCASE_Z -> VALUE_OF_UPPERCASE_Z
    int VALUE_OF_0 -> VALUE_OF_0
    int VALUE_OF_9 -> VALUE_OF_9
    java.lang.String FIRST_PINYIN_UNIHAN -> FIRST_PINYIN_UNIHAN
    java.lang.String LAST_PINYIN_UNIHAN -> LAST_PINYIN_UNIHAN
    char FIRST_UNIHAN -> FIRST_UNIHAN
    com.baidu.android.common.util.HanziToPinyin sInstance -> sInstance
    boolean mHasChinaCollator -> mHasChinaCollator
    short[] PINYIN_TABLE -> PINYIN_TABLE
    short POLYPHONE_FLAG -> POLYPHONE_FLAG
    android.util.SparseArray POLYPHONE -> POLYPHONE
    char[] UNIHANS -> UNIHANS
    short[] UNIHANS_INDEX -> UNIHANS_INDEX
    java.lang.String[] PINYINS -> PINYINS
    java.lang.String HANZI -> HANZI
    void <init>(boolean) -> <init>
    com.baidu.android.common.util.HanziToPinyin getInstance() -> getInstance
    java.lang.String buildUnihansIndex() -> buildUnihansIndex
    com.baidu.android.common.util.HanziToPinyin$Token getToken(char,boolean) -> getToken
    boolean buildPolyphonicToken(com.baidu.android.common.util.HanziToPinyin$Token,char) -> buildPolyphonicToken
    boolean isDefined(int) -> isDefined
    boolean isEnglishLetter(int) -> isEnglishLetter
    boolean isDigit(int) -> isDigit
    java.util.ArrayList get(java.lang.String) -> get
    void addToken(java.lang.StringBuilder,java.util.ArrayList,int) -> addToken
    void <clinit>() -> <clinit>
com.baidu.android.common.util.HanziToPinyin$Token -> com.baidu.android.common.util.HanziToPinyin$Token:
    java.lang.String SEPARATOR -> SEPARATOR
    int LATIN -> LATIN
    int PINYIN -> PINYIN
    int DIGIT -> DIGIT
    int SYMBOL -> SYMBOL
    int UNKNOWN -> UNKNOWN
    int type -> type
    java.lang.String source -> source
    java.lang.String target -> target
    boolean isPolyphonic -> isPolyphonic
    java.lang.String[] polyphonicPinyins -> polyphonicPinyins
    void <init>() -> <init>
    void <init>(int,java.lang.String,java.lang.String) -> <init>
com.baidu.android.common.util.Util -> com.baidu.android.common.util.Util:
    void <init>() -> <init>
    java.lang.String toMd5(byte[],boolean) -> toMd5
    java.lang.String toHexString(byte[],java.lang.String,boolean) -> toHexString
    boolean hasOtherServiceRuninMyPid(android.content.Context,java.lang.String) -> hasOtherServiceRuninMyPid
com.baidu.speechsynthesizer.utility.SpeechDecoder -> com.baidu.speechsynthesizer.utility.SpeechDecoder:
    void <init>() -> <init>
    int decode(byte[],int,short[],int[],int,int) -> decode
    void <clinit>() -> <clinit>
com.baidu.tts.a.a.a -> com.baidu.tts.a.a.a:
    com.baidu.tts.a.a.c a -> a
    void <init>() -> <init>
    void a(com.baidu.tts.a.a.c) -> a
    void a() -> a
    java.lang.Object a(java.lang.Object) -> a
com.baidu.tts.a.a.b -> com.baidu.tts.a.a.b:
    void <init>() -> <init>
    void a() -> a
    byte[] a(byte[]) -> a
    java.lang.Object a(java.lang.Object) -> a
com.baidu.tts.a.a.c -> com.baidu.tts.a.a.c:
    void a() -> a
    java.lang.Object a(java.lang.Object) -> a
com.baidu.tts.a.b.a -> com.baidu.tts.a.b.a:
    com.baidu.tts.aop.tts.ITts a -> a
    com.baidu.tts.client.SpeechSynthesizerListener b -> b
    java.util.concurrent.ThreadPoolExecutor c -> c
    com.baidu.tts.aop.ttslistener.TtsListener d -> d
    void <init>() -> <init>
    com.baidu.tts.aop.tts.ITts g() -> g
    void a(com.baidu.tts.client.SpeechSynthesizerListener) -> a
    void a(android.content.Context) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.client.TtsMode) -> a
    java.lang.String a() -> a
    int a(java.lang.String,java.lang.String) -> a
    int b() -> b
    int c() -> c
    int d() -> d
    int e() -> e
    int a(java.lang.String) -> a
    int f() -> f
    int b(java.lang.String,java.lang.String) -> b
    int c(java.lang.String,java.lang.String) -> c
    int a(java.lang.String,java.lang.String,android.os.Bundle) -> a
    int b(java.lang.String,java.lang.String,android.os.Bundle) -> b
    int a(java.util.List) -> a
    com.baidu.tts.auth.AuthInfo b(com.baidu.tts.client.TtsMode) -> b
    int a(float,float) -> a
    int a(int) -> a
    java.util.concurrent.ExecutorService h() -> h
    int a(java.lang.String,java.util.concurrent.Callable) -> a
    int a(java.util.concurrent.Callable) -> a
    void i() -> i
    java.lang.String a(com.baidu.tts.m.h) -> a
    com.baidu.tts.client.SpeechError b(com.baidu.tts.m.h) -> b
    com.baidu.tts.aop.tts.ITts a(com.baidu.tts.a.b.a) -> a
    com.baidu.tts.client.SpeechSynthesizerListener b(com.baidu.tts.a.b.a) -> b
    java.lang.String a(com.baidu.tts.a.b.a,com.baidu.tts.m.h) -> a
    com.baidu.tts.client.SpeechError b(com.baidu.tts.a.b.a,com.baidu.tts.m.h) -> b
com.baidu.tts.a.b.a$1 -> com.baidu.tts.a.b.a$1:
    com.baidu.tts.a.b.a a -> a
    void <init>(com.baidu.tts.a.b.a) -> <init>
    void onSynthesizeStart(com.baidu.tts.m.h) -> onSynthesizeStart
    void onSynthesizeDataArrived(com.baidu.tts.m.h) -> onSynthesizeDataArrived
    void onSynthesizeFinished(com.baidu.tts.m.h) -> onSynthesizeFinished
    void onPlayStart(com.baidu.tts.m.h) -> onPlayStart
    void onPlayProgressUpdate(com.baidu.tts.m.h) -> onPlayProgressUpdate
    void onPlayFinished(com.baidu.tts.m.h) -> onPlayFinished
    void onError(com.baidu.tts.m.h) -> onError
    boolean a(com.baidu.tts.m.h) -> a
com.baidu.tts.a.b.a$2 -> com.baidu.tts.a.b.a$2:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.a.b.a$a -> com.baidu.tts.a.b.a$a:
    java.util.List a -> a
    com.baidu.tts.a.b.a b -> b
    void <init>(com.baidu.tts.a.b.a,java.util.List) -> <init>
    java.lang.Void a() -> a
    java.lang.Object call() -> call
com.baidu.tts.a.b.a$b -> com.baidu.tts.a.b.a$b:
    java.lang.String b -> b
    java.lang.String c -> c
    com.baidu.tts.a.b.a a -> a
    void <init>(com.baidu.tts.a.b.a,java.lang.String,java.lang.String) -> <init>
    java.lang.Void a() -> a
    java.lang.Object call() -> call
com.baidu.tts.a.b.a$c -> com.baidu.tts.a.b.a$c:
    java.lang.String b -> b
    java.lang.String c -> c
    com.baidu.tts.a.b.a a -> a
    void <init>(com.baidu.tts.a.b.a,java.lang.String,java.lang.String) -> <init>
    java.lang.Void a() -> a
    java.lang.Object call() -> call
com.baidu.tts.a.c.a -> com.baidu.tts.a.c.a:
    void a(com.baidu.tts.aop.ttslistener.TtsListener) -> a
    void a(com.baidu.tts.m.i) -> a
    void b(com.baidu.tts.m.i) -> b
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    int a(float,float) -> a
    com.baidu.tts.b.b.a.c a() -> a
com.baidu.tts.a.c.b -> com.baidu.tts.a.c.b:
    com.baidu.tts.b.a.a.d a -> a
    com.baidu.tts.b.b.a.c b -> b
    com.baidu.tts.aop.ttslistener.TtsListener c -> c
    com.baidu.tts.b.a.b d -> d
    com.baidu.tts.b.b.a e -> e
    com.baidu.tts.b.a.b f -> f
    void <init>(com.baidu.tts.b.a.a.d,com.baidu.tts.b.b.a.c,com.baidu.tts.m.j) -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void a(com.baidu.tts.aop.ttslistener.TtsListener) -> a
    void a(com.baidu.tts.m.i) -> a
    void b(com.baidu.tts.m.i) -> b
    void a(com.baidu.tts.b.a.a.d) -> a
    void a(com.baidu.tts.b.b.a.c) -> a
    void g() -> g
    boolean a(com.baidu.tts.m.h) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    int a(float,float) -> a
    com.baidu.tts.b.b.a.c a() -> a
    com.baidu.tts.aop.ttslistener.TtsListener a(com.baidu.tts.a.c.b) -> a
    boolean a(com.baidu.tts.a.c.b,com.baidu.tts.m.h) -> a
    com.baidu.tts.b.b.a.c b(com.baidu.tts.a.c.b) -> b
com.baidu.tts.a.c.b$1 -> com.baidu.tts.a.c.b$1:
    com.baidu.tts.a.c.b a -> a
    void <init>(com.baidu.tts.a.c.b) -> <init>
    void a(com.baidu.tts.m.h) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
    void d(com.baidu.tts.m.h) -> d
    void e(com.baidu.tts.m.h) -> e
com.baidu.tts.a.c.b$2 -> com.baidu.tts.a.c.b$2:
    com.baidu.tts.a.c.b a -> a
    void <init>(com.baidu.tts.a.c.b) -> <init>
    void a(com.baidu.tts.m.h) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
com.baidu.tts.a.c.b$3 -> com.baidu.tts.a.c.b$3:
    com.baidu.tts.a.c.b a -> a
    void <init>(com.baidu.tts.a.c.b) -> <init>
    void a(com.baidu.tts.m.h) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
    void d(com.baidu.tts.m.h) -> d
    void e(com.baidu.tts.m.h) -> e
com.baidu.tts.a.c.c -> com.baidu.tts.a.c.c:
    com.baidu.tts.a.c.a a -> a
    void <init>() -> <init>
    com.baidu.tts.aop.tts.TtsError a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void a(com.baidu.tts.aop.ttslistener.TtsListener) -> a
    void a(com.baidu.tts.m.i) -> a
    void b(com.baidu.tts.m.i) -> b
    com.baidu.tts.a.c.a f() -> f
    void a(com.baidu.tts.a.c.a) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    int a(float,float) -> a
com.baidu.tts.aop.AInterceptor -> com.baidu.tts.aop.AInterceptor:
    java.util.List a -> a
    void <init>() -> <init>
    java.lang.Object before(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> before
    java.lang.Object after(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.lang.Object) -> after
    boolean a(java.lang.String) -> a
    void a() -> a
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
com.baidu.tts.aop.AInterceptorHandler -> com.baidu.tts.aop.AInterceptorHandler:
    java.lang.Object DEFAULT -> DEFAULT
    java.lang.Object END -> END
    java.util.List a -> a
    java.lang.Object b -> b
    java.util.List c -> c
    void <init>() -> <init>
    java.lang.Object bind(java.lang.Object,java.util.List) -> bind
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void registerMethod(java.lang.String) -> registerMethod
    void unregisterMethod(java.lang.String) -> unregisterMethod
    boolean canIntercept(java.lang.String) -> canIntercept
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.aop.AProxyFactory -> com.baidu.tts.aop.AProxyFactory:
    void <init>() -> <init>
    java.lang.Object makeProxy() -> makeProxy
com.baidu.tts.aop.IInterceptor -> com.baidu.tts.aop.IInterceptor:
    java.lang.Object before(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> before
    java.lang.Object after(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.lang.Object) -> after
com.baidu.tts.aop.IInterceptorHandler -> com.baidu.tts.aop.IInterceptorHandler:
    void registerMethods() -> registerMethods
    void registerMethod(java.lang.String) -> registerMethod
    void unregisterMethod(java.lang.String) -> unregisterMethod
    boolean canIntercept(java.lang.String) -> canIntercept
    java.lang.Object bind(java.lang.Object,java.util.List) -> bind
com.baidu.tts.aop.IProxyFactory -> com.baidu.tts.aop.IProxyFactory:
    java.lang.Object createProxied() -> createProxied
    com.baidu.tts.aop.IInterceptorHandler createInterceptorHandler() -> createInterceptorHandler
    java.util.List createInterceptors() -> createInterceptors
    java.lang.Object makeProxy() -> makeProxy
com.baidu.tts.aop.tts.ArgsCheckInterceptor -> com.baidu.tts.aop.tts.ArgsCheckInterceptor:
    void <init>() -> <init>
    void a() -> a
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
    java.lang.Object a(java.lang.Object,com.baidu.tts.m.i,com.baidu.tts.f.n) -> a
    void a(java.lang.Object,com.baidu.tts.m.h) -> a
com.baidu.tts.aop.tts.CallbackInterceptor -> com.baidu.tts.aop.tts.CallbackInterceptor:
    void <init>() -> <init>
    void a() -> a
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
com.baidu.tts.aop.tts.ITts -> com.baidu.tts.aop.tts.ITts:
    void setTtsListener(com.baidu.tts.aop.ttslistener.TtsListener) -> setTtsListener
    com.baidu.tts.aop.ttslistener.TtsListener getTtsListener() -> getTtsListener
    void setContext(android.content.Context) -> setContext
    void setMode(com.baidu.tts.f.m) -> setMode
    com.baidu.tts.f.m getMode() -> getMode
    com.baidu.tts.auth.AuthInfo auth(com.baidu.tts.f.m) -> auth
    int setParam(com.baidu.tts.f.g,java.lang.String) -> setParam
    void speak(com.baidu.tts.m.i) -> speak
    void synthesize(com.baidu.tts.m.i) -> synthesize
    com.baidu.tts.m.j getTtsParams() -> getTtsParams
    int loadCustomResource(com.baidu.tts.m.e) -> loadCustomResource
    int freeCustomResource(com.baidu.tts.m.e) -> freeCustomResource
    int loadModel(com.baidu.tts.m.g) -> loadModel
    int loadEnglishModel(com.baidu.tts.m.f) -> loadEnglishModel
    int setStereoVolume(float,float) -> setStereoVolume
    int setAudioStreamType(int) -> setAudioStreamType
com.baidu.tts.aop.tts.OfflineAuthNotificationInterceptor -> com.baidu.tts.aop.tts.OfflineAuthNotificationInterceptor:
    java.util.concurrent.atomic.AtomicInteger b -> b
    void <init>() -> <init>
    void a() -> a
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
    java.lang.Object a(com.baidu.tts.o.a.c,com.baidu.tts.m.j,com.baidu.tts.m.i) -> a
    void a(com.baidu.tts.auth.b$a,com.baidu.tts.m.i) -> a
com.baidu.tts.aop.tts.OfflineAuthNotificationInterceptor$1 -> com.baidu.tts.aop.tts.OfflineAuthNotificationInterceptor$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.aop.tts.StatisticsInterceptor -> com.baidu.tts.aop.tts.StatisticsInterceptor:
    void <init>() -> <init>
    void a() -> a
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
com.baidu.tts.aop.tts.TtsError -> com.baidu.tts.aop.tts.TtsError:
    java.lang.Throwable a -> a
    int b -> b
    java.lang.String c -> c
    com.baidu.tts.h.a.b d -> d
    void <init>() -> <init>
    com.baidu.tts.h.a.b getTtsErrorFlyweight() -> getTtsErrorFlyweight
    void setTtsErrorFlyweight(com.baidu.tts.h.a.b) -> setTtsErrorFlyweight
    com.baidu.tts.f.n getErrorEnum() -> getErrorEnum
    java.lang.Throwable getThrowable() -> getThrowable
    void setThrowable(java.lang.Throwable) -> setThrowable
    int getCode() -> getCode
    void setCode(int) -> setCode
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    int getDetailCode() -> getDetailCode
    java.lang.String getDetailMessage() -> getDetailMessage
com.baidu.tts.aop.tts.TtsFactory -> com.baidu.tts.aop.tts.TtsFactory:
    void <init>() -> <init>
    com.baidu.tts.aop.tts.ITts createProxied() -> createProxied
    com.baidu.tts.aop.IInterceptorHandler createInterceptorHandler() -> createInterceptorHandler
    java.util.List createInterceptors() -> createInterceptors
    java.lang.Object createProxied() -> createProxied
com.baidu.tts.aop.tts.TtsInterceptorHandler -> com.baidu.tts.aop.tts.TtsInterceptorHandler:
    void <init>() -> <init>
    void registerMethods() -> registerMethods
com.baidu.tts.aop.ttslistener.ProgressCorrectInterceptor -> com.baidu.tts.aop.ttslistener.ProgressCorrectInterceptor:
    void <init>() -> <init>
    void a() -> a
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
com.baidu.tts.aop.ttslistener.TtsListener -> com.baidu.tts.aop.ttslistener.TtsListener:
    void onSynthesizeStart(com.baidu.tts.m.h) -> onSynthesizeStart
    void onSynthesizeDataArrived(com.baidu.tts.m.h) -> onSynthesizeDataArrived
    void onSynthesizeFinished(com.baidu.tts.m.h) -> onSynthesizeFinished
    void onPlayStart(com.baidu.tts.m.h) -> onPlayStart
    void onPlayProgressUpdate(com.baidu.tts.m.h) -> onPlayProgressUpdate
    void onPlayFinished(com.baidu.tts.m.h) -> onPlayFinished
    void onError(com.baidu.tts.m.h) -> onError
com.baidu.tts.aop.ttslistener.TtsListenerFactory -> com.baidu.tts.aop.ttslistener.TtsListenerFactory:
    com.baidu.tts.aop.ttslistener.TtsListener a -> a
    void <init>(com.baidu.tts.aop.ttslistener.TtsListener) -> <init>
    com.baidu.tts.aop.ttslistener.TtsListener createProxied() -> createProxied
    com.baidu.tts.aop.IInterceptorHandler createInterceptorHandler() -> createInterceptorHandler
    java.util.List createInterceptors() -> createInterceptors
    java.lang.Object createProxied() -> createProxied
com.baidu.tts.aop.ttslistener.TtsListenerInterceptorHandler -> com.baidu.tts.aop.ttslistener.TtsListenerInterceptorHandler:
    void <init>() -> <init>
    void registerMethods() -> registerMethods
com.baidu.tts.auth.AuthInfo -> com.baidu.tts.auth.AuthInfo:
    com.baidu.tts.f.m a -> a
    com.baidu.tts.auth.c$a b -> b
    com.baidu.tts.auth.b$a c -> c
    com.baidu.tts.aop.tts.TtsError d -> d
    void <init>() -> <init>
    com.baidu.tts.f.m getTtsEnum() -> getTtsEnum
    void setTtsEnum(com.baidu.tts.f.m) -> setTtsEnum
    com.baidu.tts.auth.c$a getOnlineResult() -> getOnlineResult
    void setOnlineResult(com.baidu.tts.auth.c$a) -> setOnlineResult
    com.baidu.tts.auth.b$a getOfflineResult() -> getOfflineResult
    void setOfflineResult(com.baidu.tts.auth.b$a) -> setOfflineResult
    com.baidu.tts.aop.tts.TtsError getTtsError() -> getTtsError
    void setTtsError(com.baidu.tts.aop.tts.TtsError) -> setTtsError
    java.lang.String getNotifyMessage() -> getNotifyMessage
    int getLeftValidDays() -> getLeftValidDays
    com.baidu.tts.aop.tts.TtsError getOnlineTtsError() -> getOnlineTtsError
    com.baidu.tts.aop.tts.TtsError getOfflineTtsError() -> getOfflineTtsError
    com.baidu.tts.aop.tts.TtsError getMixTtsError() -> getMixTtsError
    boolean isSuccess() -> isSuccess
    boolean isOnlineSuccess() -> isOnlineSuccess
    boolean isOfflineSuccess() -> isOfflineSuccess
    boolean isMixSuccess() -> isMixSuccess
com.baidu.tts.auth.AuthInfo$1 -> com.baidu.tts.auth.AuthInfo$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.auth.a -> com.baidu.tts.auth.a:
    com.baidu.tts.auth.a a -> a
    com.baidu.tts.k.c b -> b
    com.baidu.tts.k.c c -> c
    void <init>() -> <init>
    com.baidu.tts.auth.a a() -> a
    com.baidu.tts.auth.AuthInfo a(com.baidu.tts.f.m,com.baidu.tts.m.j) -> a
    com.baidu.tts.auth.c$a a(com.baidu.tts.b.a.b.f$b) -> a
    com.baidu.tts.auth.b$a a(com.baidu.tts.b.a.b.e$b) -> a
    com.baidu.tts.auth.AuthInfo a(com.baidu.tts.m.b) -> a
    java.lang.Object a(java.util.concurrent.Callable,long) -> a
    java.util.concurrent.FutureTask a(java.util.concurrent.Callable) -> a
    void b() -> b
    com.baidu.tts.k.c a(com.baidu.tts.auth.a) -> a
    com.baidu.tts.k.c b(com.baidu.tts.auth.a) -> b
    void <clinit>() -> <clinit>
com.baidu.tts.auth.a$1 -> com.baidu.tts.auth.a$1:
    com.baidu.tts.m.b a -> a
    java.util.concurrent.CountDownLatch b -> b
    com.baidu.tts.auth.a c -> c
    void <init>(com.baidu.tts.auth.a,com.baidu.tts.m.b,java.util.concurrent.CountDownLatch) -> <init>
    com.baidu.tts.auth.c$a a() -> a
    java.lang.Object call() -> call
com.baidu.tts.auth.a$2 -> com.baidu.tts.auth.a$2:
    com.baidu.tts.m.b a -> a
    java.util.concurrent.CountDownLatch b -> b
    com.baidu.tts.auth.a c -> c
    void <init>(com.baidu.tts.auth.a,com.baidu.tts.m.b,java.util.concurrent.CountDownLatch) -> <init>
    com.baidu.tts.auth.b$a a() -> a
    java.lang.Object call() -> call
com.baidu.tts.auth.a$3 -> com.baidu.tts.auth.a$3:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.auth.a$a -> com.baidu.tts.auth.a$a:
    com.baidu.tts.b.a.b.e$b b -> b
    com.baidu.tts.auth.a a -> a
    void <init>(com.baidu.tts.auth.a,com.baidu.tts.b.a.b.e$b) -> <init>
    com.baidu.tts.auth.b$a a() -> a
    java.lang.Object call() -> call
com.baidu.tts.auth.a$b -> com.baidu.tts.auth.a$b:
    com.baidu.tts.b.a.b.f$b b -> b
    com.baidu.tts.auth.a a -> a
    void <init>(com.baidu.tts.auth.a,com.baidu.tts.b.a.b.f$b) -> <init>
    com.baidu.tts.auth.c$a a() -> a
    java.lang.Object call() -> call
com.baidu.tts.auth.b -> com.baidu.tts.auth.b:
    java.lang.String a -> a
    java.lang.String b -> b
    void <init>() -> <init>
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void b(java.lang.String) -> b
    int a(com.baidu.tts.auth.b) -> a
    com.baidu.tts.auth.b$a c() -> c
    int compareTo(java.lang.Object) -> compareTo
    java.lang.Object call() -> call
com.baidu.tts.auth.b$a -> com.baidu.tts.auth.b$a:
    int a -> a
    int b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    com.baidu.tts.aop.tts.TtsError e -> e
    void <init>() -> <init>
    int a() -> a
    void a(int) -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a(com.baidu.tts.aop.tts.TtsError) -> a
    java.lang.String c() -> c
    boolean d() -> d
    boolean e() -> e
    boolean f() -> f
    boolean g() -> g
com.baidu.tts.auth.c -> com.baidu.tts.auth.c:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    void <init>() -> <init>
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void b(java.lang.String) -> b
    java.lang.String c() -> c
    void c(java.lang.String) -> c
    int a(com.baidu.tts.auth.c) -> a
    com.baidu.tts.auth.c$a d() -> d
    boolean a(java.lang.String,java.lang.String) -> a
    java.lang.String b(java.lang.String,java.lang.String) -> b
    int compareTo(java.lang.Object) -> compareTo
    java.lang.Object call() -> call
com.baidu.tts.auth.c$a -> com.baidu.tts.auth.c$a:
    java.lang.String a -> a
    java.lang.String b -> b
    long c -> c
    com.baidu.tts.aop.tts.TtsError d -> d
    void <init>() -> <init>
    void a(java.lang.String) -> a
    java.lang.String a() -> a
    void b(java.lang.String) -> b
    void a(long) -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a(com.baidu.tts.aop.tts.TtsError) -> a
    boolean g() -> g
com.baidu.tts.b.a.a -> com.baidu.tts.b.a.a:
    com.baidu.tts.b.a.a a -> a
    void <init>() -> <init>
    com.baidu.tts.b.a.a a() -> a
    com.baidu.tts.b.a.a.d a(com.baidu.tts.f.f) -> a
    com.baidu.tts.b.a.a.d b() -> b
    com.baidu.tts.b.a.a.d c() -> c
    com.baidu.tts.b.a.a.d d() -> d
    com.baidu.tts.b.a.a.d a(com.baidu.tts.b.a.b.b) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.b.a.a$1 -> com.baidu.tts.b.a.a$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.b.a.a.a -> com.baidu.tts.b.a.a.a:
    com.baidu.tts.b.a.b.b a -> a
    java.util.List b -> b
    com.baidu.tts.b.a.a.b c -> c
    void <init>() -> <init>
    com.baidu.tts.b.a.a.b a() -> a
    void a(com.baidu.tts.b.a.a.b) -> a
    com.baidu.tts.aop.tts.TtsError g() -> g
    void h() -> h
    void i() -> i
    void j() -> j
    void k() -> k
    void l() -> l
    void a(com.baidu.tts.b.a.b.b) -> a
    void a(com.baidu.tts.b.a.b) -> a
    void a(java.lang.Object) -> a
    void a(com.baidu.tts.m.i) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    void a(com.baidu.tts.m.h) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
    void d(com.baidu.tts.m.h) -> d
    void e(com.baidu.tts.m.h) -> e
com.baidu.tts.b.a.a.b -> com.baidu.tts.b.a.a.b:
    com.baidu.tts.b.a.a.c a -> a
    void <init>(com.baidu.tts.b.a.a.c) -> <init>
    void a(com.baidu.tts.b.a.a.b) -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a() -> a
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void a(com.baidu.tts.b.a.b.b) -> a
    void a(com.baidu.tts.b.a.b) -> a
    void a(java.lang.Object) -> a
    void a(com.baidu.tts.m.i) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
com.baidu.tts.b.a.a.c -> com.baidu.tts.b.a.a.c:
    java.util.concurrent.ExecutorService f -> f
    com.baidu.tts.b.a.a.h g -> g
    com.baidu.tts.b.a.a.e h -> h
    com.baidu.tts.b.a.a.g i -> i
    com.baidu.tts.b.a.a.f j -> j
    void <init>() -> <init>
    boolean m() -> m
    boolean n() -> n
    com.baidu.tts.b.a.a.h o() -> o
    com.baidu.tts.b.a.a.e p() -> p
    com.baidu.tts.b.a.a.g q() -> q
    com.baidu.tts.b.a.a.f r() -> r
    com.baidu.tts.aop.tts.TtsError s() -> s
    void t() -> t
    void u() -> u
    void v() -> v
    void w() -> w
    void x() -> x
    int b(com.baidu.tts.m.g) -> b
    int b(com.baidu.tts.m.f) -> b
    int c(com.baidu.tts.m.e) -> c
    int d(com.baidu.tts.m.e) -> d
    void b(com.baidu.tts.b.a.b.b) -> b
    void b(com.baidu.tts.b.a.b) -> b
    void b(java.lang.Object) -> b
    void b(com.baidu.tts.m.i) -> b
    void a(boolean) -> a
com.baidu.tts.b.a.a.c$1 -> com.baidu.tts.b.a.a.c$1:
    com.baidu.tts.b.a.a.c a -> a
    void <init>(com.baidu.tts.b.a.a.c) -> <init>
    void e(com.baidu.tts.m.h) -> e
    void a(com.baidu.tts.m.h) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
    void d(com.baidu.tts.m.h) -> d
com.baidu.tts.b.a.a.c$a -> com.baidu.tts.b.a.a.c$a:
    com.baidu.tts.m.i b -> b
    com.baidu.tts.b.a.a.c a -> a
    void <init>(com.baidu.tts.b.a.a.c,com.baidu.tts.m.i) -> <init>
    java.lang.Void a() -> a
    java.lang.Object call() -> call
com.baidu.tts.b.a.a.d -> com.baidu.tts.b.a.a.d:
    void a(com.baidu.tts.b.a.b.b) -> a
    void a(com.baidu.tts.b.a.b) -> a
    void a(java.lang.Object) -> a
    void a(com.baidu.tts.m.i) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
com.baidu.tts.b.a.a.e -> com.baidu.tts.b.a.a.e:
    void <init>(com.baidu.tts.b.a.a.c) -> <init>
    void a() -> a
    void f() -> f
    void a(com.baidu.tts.m.i) -> a
com.baidu.tts.b.a.a.f -> com.baidu.tts.b.a.a.f:
    void <init>(com.baidu.tts.b.a.a.c) -> <init>
    void c() -> c
    void e() -> e
    void f() -> f
    void a(com.baidu.tts.m.i) -> a
com.baidu.tts.b.a.a.g -> com.baidu.tts.b.a.a.g:
    void <init>(com.baidu.tts.b.a.a.c) -> <init>
    void d() -> d
    void e() -> e
    void f() -> f
    void a(com.baidu.tts.m.i) -> a
com.baidu.tts.b.a.a.h -> com.baidu.tts.b.a.a.h:
    void <init>(com.baidu.tts.b.a.a.c) -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a(com.baidu.tts.m.i) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    void a(com.baidu.tts.m.h) -> a
com.baidu.tts.b.a.b -> com.baidu.tts.b.a.b:
    void a(com.baidu.tts.m.h) -> a
    void c(com.baidu.tts.m.h) -> c
    void b(com.baidu.tts.m.h) -> b
    void e(com.baidu.tts.m.h) -> e
    void d(com.baidu.tts.m.h) -> d
com.baidu.tts.b.a.b.a -> com.baidu.tts.b.a.b.a:
    com.baidu.tts.b.a.b a -> a
    void <init>() -> <init>
    void a(java.lang.Object) -> a
    com.baidu.tts.aop.tts.TtsError a() -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a(com.baidu.tts.b.a.b) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.i) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    void a(com.baidu.tts.m.h) -> a
com.baidu.tts.b.a.b.b -> com.baidu.tts.b.a.b.b:
    void a(java.lang.Object) -> a
    void a(com.baidu.tts.b.a.b) -> a
    com.baidu.tts.aop.tts.TtsError a() -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.i) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
com.baidu.tts.b.a.b.c -> com.baidu.tts.b.a.b.c:
    com.baidu.tts.m.b a -> a
    com.baidu.tts.f.j b -> b
    void <init>() -> <init>
    void a(com.baidu.tts.m.b) -> a
    boolean a() -> a
    boolean b() -> b
    boolean a(int) -> a
    int b(int) -> b
    boolean c(int) -> c
com.baidu.tts.b.a.b.c$1 -> com.baidu.tts.b.a.b.c$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.b.a.b.d -> com.baidu.tts.b.a.b.d:
    com.baidu.tts.m.b b -> b
    com.baidu.tts.b.a.b.f c -> c
    com.baidu.tts.b.a.b.e d -> d
    com.baidu.tts.b.a.b.c e -> e
    com.baidu.tts.aop.tts.TtsError f -> f
    int g -> g
    int h -> h
    void <init>() -> <init>
    com.baidu.tts.aop.tts.TtsError a() -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a(java.lang.Object) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.i) -> a
    com.baidu.tts.m.h b(com.baidu.tts.m.h) -> b
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    int a(com.baidu.tts.b.a.b.d,int) -> a
    int b(com.baidu.tts.b.a.b.d,int) -> b
    com.baidu.tts.m.h a(com.baidu.tts.b.a.b.d,com.baidu.tts.m.h) -> a
com.baidu.tts.b.a.b.d$1 -> com.baidu.tts.b.a.b.d$1:
    com.baidu.tts.b.a.b.d a -> a
    void <init>(com.baidu.tts.b.a.b.d) -> <init>
    void a(com.baidu.tts.m.h) -> a
    void c(com.baidu.tts.m.h) -> c
    void b(com.baidu.tts.m.h) -> b
    void e(com.baidu.tts.m.h) -> e
    void d(com.baidu.tts.m.h) -> d
com.baidu.tts.b.a.b.d$2 -> com.baidu.tts.b.a.b.d$2:
    com.baidu.tts.b.a.b.d a -> a
    void <init>(com.baidu.tts.b.a.b.d) -> <init>
    void a(com.baidu.tts.m.h) -> a
    void c(com.baidu.tts.m.h) -> c
    void b(com.baidu.tts.m.h) -> b
    void e(com.baidu.tts.m.h) -> e
    void d(com.baidu.tts.m.h) -> d
com.baidu.tts.b.a.b.e -> com.baidu.tts.b.a.b.e:
    com.baidu.tts.b.a.b.e$b b -> b
    long[] c -> c
    com.baidu.tts.e.c d -> d
    void <init>() -> <init>
    void a(java.lang.Object) -> a
    com.baidu.tts.aop.tts.TtsError a() -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.i) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    com.baidu.tts.b.a.b.e$b a(com.baidu.tts.b.a.b.e) -> a
    long[] b(com.baidu.tts.b.a.b.e) -> b
    com.baidu.tts.e.c c(com.baidu.tts.b.a.b.e) -> c
com.baidu.tts.b.a.b.e$a -> com.baidu.tts.b.a.b.e$a:
    int b -> b
    com.baidu.tts.b.a.b.e a -> a
    void <init>(com.baidu.tts.b.a.b.e,int) -> <init>
    void run() -> run
com.baidu.tts.b.a.b.e$b -> com.baidu.tts.b.a.b.e$b:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    void <init>() -> <init>
    int a(java.lang.String) -> a
    void b(java.lang.String) -> b
    int c(java.lang.String) -> c
    long a() -> a
    long b() -> b
    long c() -> c
    java.lang.String d() -> d
    void d(java.lang.String) -> d
    java.lang.String e() -> e
    void e(java.lang.String) -> e
    java.lang.String f() -> f
    void f(java.lang.String) -> f
    java.lang.String g() -> g
    void g(java.lang.String) -> g
com.baidu.tts.b.a.b.e$c -> com.baidu.tts.b.a.b.e$c:
    com.baidu.tts.m.i b -> b
    int c -> c
    com.baidu.tts.b.a.b.e a -> a
    void <init>(com.baidu.tts.b.a.b.e,com.baidu.tts.m.i) -> <init>
    int onNewData(byte[],int) -> onNewData
    com.baidu.tts.aop.tts.TtsError a() -> a
    java.lang.Object call() -> call
com.baidu.tts.b.a.b.f -> com.baidu.tts.b.a.b.f:
    com.baidu.tts.b.a.b.f$b b -> b
    void <init>() -> <init>
    void a(java.lang.Object) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.i) -> a
    com.baidu.tts.m.h a(int,com.baidu.tts.b.a.b.f$c,com.baidu.tts.m.i) -> a
    org.apache.http.HttpEntity a(int,java.lang.String,com.baidu.tts.m.i,com.baidu.tts.b.a.b.f$b) -> a
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    com.baidu.tts.m.h a(com.baidu.tts.b.a.b.f,int,com.baidu.tts.b.a.b.f$c,com.baidu.tts.m.i) -> a
    org.apache.http.HttpEntity a(com.baidu.tts.b.a.b.f,int,java.lang.String,com.baidu.tts.m.i,com.baidu.tts.b.a.b.f$b) -> a
com.baidu.tts.b.a.b.f$a -> com.baidu.tts.b.a.b.f$a:
    int b -> b
    com.baidu.tts.b.a.b.f$c c -> c
    com.baidu.tts.m.i d -> d
    com.baidu.tts.b.a.b.f$b e -> e
    com.baidu.tts.m.h f -> f
    com.baidu.tts.loopj.SyncHttpClient g -> g
    com.baidu.tts.b.a.b.f a -> a
    void <init>(com.baidu.tts.b.a.b.f,int,com.baidu.tts.b.a.b.f$c,com.baidu.tts.m.i,com.baidu.tts.b.a.b.f$b,com.baidu.tts.m.h) -> <init>
    com.baidu.tts.m.h a() -> a
    void b() -> b
    java.lang.Object call() -> call
com.baidu.tts.b.a.b.f$b -> com.baidu.tts.b.a.b.f$b:
    java.lang.String a -> a
    com.baidu.tts.f.b b -> b
    com.baidu.tts.f.c c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    int m -> m
    int n -> n
    int o -> o
    java.util.Set p -> p
    void <init>() -> <init>
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void b(java.lang.String) -> b
    java.lang.String c() -> c
    int a(com.baidu.tts.f.b) -> a
    java.lang.String d() -> d
    void c(java.lang.String) -> c
    java.lang.String e() -> e
    void a(com.baidu.tts.f.c) -> a
    java.lang.String f() -> f
    void d(java.lang.String) -> d
    java.lang.String g() -> g
    java.lang.String h() -> h
    java.lang.String i() -> i
    void e(java.lang.String) -> e
    java.lang.String j() -> j
    void f(java.lang.String) -> f
    java.lang.String k() -> k
    void g(java.lang.String) -> g
    java.lang.String l() -> l
    void h(java.lang.String) -> h
    int m() -> m
    void a(int) -> a
    int n() -> n
    void b(int) -> b
    int o() -> o
    void c(int) -> c
    void <clinit>() -> <clinit>
com.baidu.tts.b.a.b.f$c -> com.baidu.tts.b.a.b.f$c:
    java.lang.String a -> a
    java.lang.String b -> b
    com.baidu.tts.b.a.b.f c -> c
    void <init>(com.baidu.tts.b.a.b.f) -> <init>
com.baidu.tts.b.a.b.f$d -> com.baidu.tts.b.a.b.f$d:
    com.baidu.tts.m.i b -> b
    com.baidu.tts.b.a.b.f$c c -> c
    com.baidu.tts.b.a.b.f a -> a
    void <init>(com.baidu.tts.b.a.b.f,com.baidu.tts.m.i) -> <init>
    com.baidu.tts.aop.tts.TtsError a() -> a
    boolean a(com.baidu.tts.m.h) -> a
    boolean b(com.baidu.tts.m.h) -> b
    java.lang.Object call() -> call
com.baidu.tts.b.a.b.g -> com.baidu.tts.b.a.b.g:
    java.lang.String a -> a
    org.apache.http.HttpEntity b -> b
    void <init>() -> <init>
    void sendResponseMessage(org.apache.http.HttpResponse) -> sendResponseMessage
    java.lang.String a(org.apache.http.HttpEntity) -> a
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void a(int,org.apache.http.Header[],java.lang.String,org.apache.http.HttpEntity) -> a
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
    void a(int,org.apache.http.Header[],java.lang.String,org.apache.http.HttpEntity,java.lang.Throwable) -> a
com.baidu.tts.b.a.b.h -> com.baidu.tts.b.a.b.h:
    com.baidu.tts.a.a.a a -> a
    com.baidu.tts.b.a.b.f$b b -> b
    com.baidu.tts.m.h c -> c
    void <init>(com.baidu.tts.m.h) -> <init>
    void a(com.baidu.tts.b.a.b.f$b) -> a
    void a(int,org.apache.http.Header[],java.lang.String,org.apache.http.HttpEntity) -> a
    void b(org.apache.http.HttpEntity) -> b
    void c(org.apache.http.HttpEntity) -> c
    void a(java.lang.String) -> a
    void a(int,org.apache.http.Header[],java.lang.String,org.apache.http.HttpEntity,java.lang.Throwable) -> a
com.baidu.tts.b.b.a -> com.baidu.tts.b.b.a:
    void a(com.baidu.tts.m.h) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
com.baidu.tts.b.b.a.a -> com.baidu.tts.b.b.a.a:
    com.baidu.tts.b.b.a a -> a
    com.baidu.tts.b.b.a.b b -> b
    void <init>() -> <init>
    com.baidu.tts.b.b.a.b a() -> a
    void a(com.baidu.tts.b.b.a.b) -> a
    com.baidu.tts.aop.tts.TtsError g() -> g
    void h() -> h
    void i() -> i
    void j() -> j
    void k() -> k
    void l() -> l
    void a(java.lang.Object) -> a
    void a(com.baidu.tts.b.b.a) -> a
    void o() -> o
    void a(com.baidu.tts.m.h) -> a
    int a(float,float) -> a
    int a(int) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
    void d(com.baidu.tts.m.h) -> d
com.baidu.tts.b.b.a.b -> com.baidu.tts.b.b.a.b:
    com.baidu.tts.b.b.a.f a -> a
    void <init>(com.baidu.tts.b.b.a.f) -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a() -> a
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void a(java.lang.Object) -> a
    void a(com.baidu.tts.b.b.a) -> a
    void o() -> o
    void a(com.baidu.tts.m.h) -> a
    int a(float,float) -> a
    int a(int) -> a
    void a(com.baidu.tts.b.b.a.b) -> a
com.baidu.tts.b.b.a.c -> com.baidu.tts.b.b.a.c:
    void a(java.lang.Object) -> a
    void a(com.baidu.tts.b.b.a) -> a
    void o() -> o
    void a(com.baidu.tts.m.h) -> a
    int a(float,float) -> a
    int a(int) -> a
com.baidu.tts.b.b.a.d -> com.baidu.tts.b.b.a.d:
    void <init>(com.baidu.tts.b.b.a.f) -> <init>
    void a() -> a
    void f() -> f
    void a(com.baidu.tts.m.h) -> a
    void o() -> o
com.baidu.tts.b.b.a.e -> com.baidu.tts.b.b.a.e:
    void <init>(com.baidu.tts.b.b.a.f) -> <init>
    void c() -> c
    void e() -> e
    void f() -> f
    void o() -> o
    void a(com.baidu.tts.m.h) -> a
com.baidu.tts.b.b.a.f -> com.baidu.tts.b.b.a.f:
    java.util.concurrent.ThreadPoolExecutor c -> c
    com.baidu.tts.b.b.b.c f -> f
    com.baidu.tts.b.b.a.h g -> g
    com.baidu.tts.b.b.a.d h -> h
    com.baidu.tts.b.b.a.g i -> i
    com.baidu.tts.b.b.a.e j -> j
    void <init>() -> <init>
    boolean m() -> m
    boolean n() -> n
    com.baidu.tts.b.b.a.h p() -> p
    com.baidu.tts.b.b.a.d q() -> q
    com.baidu.tts.b.b.a.g r() -> r
    com.baidu.tts.b.b.a.e s() -> s
    com.baidu.tts.aop.tts.TtsError t() -> t
    void u() -> u
    void v() -> v
    void w() -> w
    void x() -> x
    void y() -> y
    void e(com.baidu.tts.m.h) -> e
    void z() -> z
    void b(java.lang.Object) -> b
    void b(com.baidu.tts.b.b.a) -> b
    int b(float,float) -> b
    int b(int) -> b
    com.baidu.tts.b.b.b.c a(com.baidu.tts.b.b.a.f) -> a
com.baidu.tts.b.b.a.f$1 -> com.baidu.tts.b.b.a.f$1:
    com.baidu.tts.b.b.a.f a -> a
    void <init>(com.baidu.tts.b.b.a.f) -> <init>
    void a(com.baidu.tts.m.h) -> a
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
com.baidu.tts.b.b.a.f$a -> com.baidu.tts.b.b.a.f$a:
    com.baidu.tts.m.h b -> b
    com.baidu.tts.b.b.a.f a -> a
    void <init>(com.baidu.tts.b.b.a.f,com.baidu.tts.m.h) -> <init>
    void run() -> run
com.baidu.tts.b.b.a.g -> com.baidu.tts.b.b.a.g:
    void <init>(com.baidu.tts.b.b.a.f) -> <init>
    void a(com.baidu.tts.m.h) -> a
    void d() -> d
    void e() -> e
    void f() -> f
com.baidu.tts.b.b.a.h -> com.baidu.tts.b.b.a.h:
    void <init>(com.baidu.tts.b.b.a.f) -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a(com.baidu.tts.m.h) -> a
    void o() -> o
com.baidu.tts.b.b.b -> com.baidu.tts.b.b.b:
    com.baidu.tts.b.b.b a -> a
    void <init>() -> <init>
    com.baidu.tts.b.b.b a() -> a
    com.baidu.tts.b.b.b.c b() -> b
    com.baidu.tts.b.b.b.b c() -> c
    void <clinit>() -> <clinit>
com.baidu.tts.b.b.b.a -> com.baidu.tts.b.b.b.a:
    com.baidu.tts.b.b.a a -> a
    void <init>() -> <init>
    void a(com.baidu.tts.b.b.a) -> a
    void a(java.lang.Object) -> a
    com.baidu.tts.aop.tts.TtsError a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    com.baidu.tts.aop.tts.TtsError f() -> f
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.h) -> a
com.baidu.tts.b.b.b.b -> com.baidu.tts.b.b.b.b:
    android.media.AudioTrack d -> d
    com.baidu.tts.b.b.b.b$a e -> e
    com.baidu.tts.i.a.b f -> f
    java.util.concurrent.locks.Lock b -> b
    java.util.concurrent.locks.Condition c -> c
    boolean g -> g
    int h -> h
    void <init>() -> <init>
    void a(com.baidu.tts.b.b.a) -> a
    void a(java.lang.Object) -> a
    com.baidu.tts.aop.tts.TtsError a() -> a
    int a(int,int,int) -> a
    int a(int) -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void g() -> g
    void e() -> e
    com.baidu.tts.aop.tts.TtsError f() -> f
    int a(float,float) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.h) -> a
    int h() -> h
    void b(com.baidu.tts.m.h) -> b
    void c(com.baidu.tts.m.h) -> c
    int b(int) -> b
    void d(com.baidu.tts.m.h) -> d
    void e(com.baidu.tts.m.h) -> e
    void f(com.baidu.tts.m.h) -> f
com.baidu.tts.b.b.b.b$a -> com.baidu.tts.b.b.b.b$a:
    com.baidu.tts.f.k a -> a
    int b -> b
    int c -> c
    int d -> d
    float e -> e
    float f -> f
    void <init>() -> <init>
    int a() -> a
    int b() -> b
    int c() -> c
    int d() -> d
    float e() -> e
    void a(float) -> a
    float f() -> f
    void b(float) -> b
com.baidu.tts.b.b.b.c -> com.baidu.tts.b.b.b.c:
    void a(com.baidu.tts.b.b.a) -> a
    void a(java.lang.Object) -> a
    com.baidu.tts.aop.tts.TtsError a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    com.baidu.tts.aop.tts.TtsError f() -> f
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.m.h) -> a
    int a(int) -> a
    int a(float,float) -> a
com.baidu.tts.c.a -> com.baidu.tts.c.a:
    void <init>(int,java.lang.String) -> <init>
    void <init>(int,java.lang.String,java.util.concurrent.RejectedExecutionHandler) -> <init>
    void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler) -> <init>
    void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler) -> <init>
com.baidu.tts.c.a$a -> com.baidu.tts.c.a$a:
    void <init>() -> <init>
    void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor) -> rejectedExecution
com.baidu.tts.chainofresponsibility.a -> com.baidu.tts.chainofresponsibility.a:
    void a(java.lang.Object,java.lang.Object,java.lang.Object) -> a
com.baidu.tts.chainofresponsibility.logger.LoggerProxy -> com.baidu.tts.chainofresponsibility.logger.LoggerProxy:
    com.baidu.tts.chainofresponsibility.logger.d a -> a
    void <init>() -> <init>
    void v(java.lang.String,java.lang.String) -> v
    void i(java.lang.String,java.lang.String) -> i
    void d(java.lang.String,java.lang.String) -> d
    void w(java.lang.String,java.lang.String) -> w
    void e(java.lang.String,java.lang.String) -> e
    void a(java.lang.String,java.lang.String) -> a
    void log(int,java.lang.String,java.lang.String) -> log
    void printable(boolean) -> printable
    void setModeRelease() -> setModeRelease
    void clearHandler() -> clearHandler
    boolean isModeRelease() -> isModeRelease
    void addPrintString(java.lang.String) -> addPrintString
    void addPrintStrings(java.util.List) -> addPrintStrings
    void addUnPrintString(java.lang.String) -> addUnPrintString
    void clearSpecifyStrings() -> clearSpecifyStrings
    void <clinit>() -> <clinit>
com.baidu.tts.chainofresponsibility.logger.a -> com.baidu.tts.chainofresponsibility.logger.a:
    void <init>() -> <init>
com.baidu.tts.chainofresponsibility.logger.b -> com.baidu.tts.chainofresponsibility.logger.b:
com.baidu.tts.chainofresponsibility.logger.c -> com.baidu.tts.chainofresponsibility.logger.c:
    int a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    void <init>() -> <init>
    int a() -> a
    void a(int) -> a
    java.lang.String b() -> b
    void a(java.lang.String) -> a
    java.lang.String c() -> c
    void b(java.lang.String) -> b
    java.lang.String d() -> d
com.baidu.tts.chainofresponsibility.logger.d -> com.baidu.tts.chainofresponsibility.logger.d:
    com.baidu.tts.chainofresponsibility.logger.d a -> a
    java.util.List b -> b
    java.util.concurrent.ExecutorService c -> c
    com.baidu.tts.chainofresponsibility.logger.f d -> d
    com.baidu.tts.chainofresponsibility.logger.e e -> e
    com.baidu.tts.chainofresponsibility.logger.d$a f -> f
    boolean g -> g
    void <init>() -> <init>
    java.util.List g() -> g
    com.baidu.tts.chainofresponsibility.logger.d a() -> a
    void b() -> b
    void a(boolean) -> a
    void a(java.lang.String) -> a
    void a(java.util.List) -> a
    void b(java.lang.String) -> b
    void c() -> c
    void d() -> d
    boolean e() -> e
    void a(int,java.lang.String,java.lang.String) -> a
    void a(com.baidu.tts.chainofresponsibility.logger.c,int,java.lang.String,java.lang.String) -> a
    void a(com.baidu.tts.chainofresponsibility.logger.c) -> a
    void b(com.baidu.tts.chainofresponsibility.logger.c) -> b
    java.util.List a(com.baidu.tts.chainofresponsibility.logger.d) -> a
    com.baidu.tts.chainofresponsibility.logger.d f() -> f
    void <clinit>() -> <clinit>
com.baidu.tts.chainofresponsibility.logger.d$1 -> com.baidu.tts.chainofresponsibility.logger.d$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.chainofresponsibility.logger.d$a -> com.baidu.tts.chainofresponsibility.logger.d$a:
    com.baidu.tts.chainofresponsibility.logger.d$a a -> a
    com.baidu.tts.chainofresponsibility.logger.d$a b -> b
    com.baidu.tts.chainofresponsibility.logger.d$a[] c -> c
    com.baidu.tts.chainofresponsibility.logger.d$a[] values() -> values
    com.baidu.tts.chainofresponsibility.logger.d$a valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.tts.chainofresponsibility.logger.d$b -> com.baidu.tts.chainofresponsibility.logger.d$b:
    com.baidu.tts.chainofresponsibility.logger.c b -> b
    com.baidu.tts.chainofresponsibility.logger.d a -> a
    void <init>(com.baidu.tts.chainofresponsibility.logger.d,com.baidu.tts.chainofresponsibility.logger.c) -> <init>
    void run() -> run
com.baidu.tts.chainofresponsibility.logger.e -> com.baidu.tts.chainofresponsibility.logger.e:
    java.util.List a -> a
    java.util.List b -> b
    void <init>() -> <init>
    void a() -> a
    void a(java.lang.String) -> a
    void a(java.util.List) -> a
    void b(java.lang.String) -> b
    void a(com.baidu.tts.chainofresponsibility.logger.c,java.lang.Void,com.baidu.tts.chainofresponsibility.logger.d) -> a
com.baidu.tts.chainofresponsibility.logger.f -> com.baidu.tts.chainofresponsibility.logger.f:
    void <init>() -> <init>
    void a(com.baidu.tts.chainofresponsibility.logger.c,java.lang.Void,com.baidu.tts.chainofresponsibility.logger.d) -> a
    void a(java.lang.Object,java.lang.Object,java.lang.Object) -> a
com.baidu.tts.client.SpeechError -> com.baidu.tts.client.SpeechError:
    int code -> code
    java.lang.String description -> description
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.baidu.tts.client.SpeechSynthesizeBag -> com.baidu.tts.client.SpeechSynthesizeBag:
    java.lang.String a -> a
    java.lang.String b -> b
    void <init>() -> <init>
    java.lang.String getText() -> getText
    int setText(java.lang.String) -> setText
    java.lang.String getUtteranceId() -> getUtteranceId
    void setUtteranceId(java.lang.String) -> setUtteranceId
com.baidu.tts.client.SpeechSynthesizer -> com.baidu.tts.client.SpeechSynthesizer:
    int ERROR_QUEUE_IS_FULL -> ERROR_QUEUE_IS_FULL
    int ERROR_LIST_IS_TOO_LONG -> ERROR_LIST_IS_TOO_LONG
    int ERROR_TEXT_IS_EMPTY -> ERROR_TEXT_IS_EMPTY
    int ERROR_TEXT_IS_TOO_LONG -> ERROR_TEXT_IS_TOO_LONG
    int ERROR_TEXT_ENCODE_IS_WRONG -> ERROR_TEXT_ENCODE_IS_WRONG
    int ERROR_APP_ID_IS_INVALID -> ERROR_APP_ID_IS_INVALID
    int MAX_QUEUE_SIZE -> MAX_QUEUE_SIZE
    int MAX_LIST_SIZE -> MAX_LIST_SIZE
    java.lang.String PARAM_SPEED -> PARAM_SPEED
    java.lang.String PARAM_PITCH -> PARAM_PITCH
    java.lang.String PARAM_VOLUME -> PARAM_VOLUME
    java.lang.String PARAM_TTS_TEXT_MODEL_FILE -> PARAM_TTS_TEXT_MODEL_FILE
    java.lang.String PARAM_TTS_SPEECH_MODEL_FILE -> PARAM_TTS_SPEECH_MODEL_FILE
    java.lang.String PARAM_TTS_LICENCE_FILE -> PARAM_TTS_LICENCE_FILE
    java.lang.String PARAM_VOCODER_OPTIM_LEVEL -> PARAM_VOCODER_OPTIM_LEVEL
    java.lang.String PARAM_CUSTOM_SYNTH -> PARAM_CUSTOM_SYNTH
    java.lang.String PARAM_OPEN_XML -> PARAM_OPEN_XML
    java.lang.String PARAM_PRODUCT_ID -> PARAM_PRODUCT_ID
    java.lang.String PARAM_LANGUAGE -> PARAM_LANGUAGE
    java.lang.String PARAM_AUDIO_ENCODE -> PARAM_AUDIO_ENCODE
    java.lang.String PARAM_AUDIO_RATE -> PARAM_AUDIO_RATE
    java.lang.String PARAM_SPEAKER -> PARAM_SPEAKER
    java.lang.String PARAM_MIX_MODE -> PARAM_MIX_MODE
    java.lang.String MIX_MODE_DEFAULT -> MIX_MODE_DEFAULT
    java.lang.String MIX_MODE_HIGH_SPEED_NETWORK -> MIX_MODE_HIGH_SPEED_NETWORK
    java.lang.String MIX_MODE_HIGH_SPEED_SYNTHESIZE -> MIX_MODE_HIGH_SPEED_SYNTHESIZE
    java.lang.String MIX_MODE_HIGH_SPEED_SYNTHESIZE_WIFI -> MIX_MODE_HIGH_SPEED_SYNTHESIZE_WIFI
    java.lang.String LANGUAGE_ZH -> LANGUAGE_ZH
    java.lang.String TEXT_ENCODE_GBK -> TEXT_ENCODE_GBK
    java.lang.String TEXT_ENCODE_BIG5 -> TEXT_ENCODE_BIG5
    java.lang.String TEXT_ENCODE_UTF8 -> TEXT_ENCODE_UTF8
    java.lang.String AUDIO_ENCODE_BV -> AUDIO_ENCODE_BV
    java.lang.String AUDIO_ENCODE_AMR -> AUDIO_ENCODE_AMR
    java.lang.String AUDIO_ENCODE_OPUS -> AUDIO_ENCODE_OPUS
    java.lang.String AUDIO_BITRATE_BV_16K -> AUDIO_BITRATE_BV_16K
    java.lang.String AUDIO_BITRATE_AMR_6K6 -> AUDIO_BITRATE_AMR_6K6
    java.lang.String AUDIO_BITRATE_AMR_8K85 -> AUDIO_BITRATE_AMR_8K85
    java.lang.String AUDIO_BITRATE_AMR_12K65 -> AUDIO_BITRATE_AMR_12K65
    java.lang.String AUDIO_BITRATE_AMR_14K25 -> AUDIO_BITRATE_AMR_14K25
    java.lang.String AUDIO_BITRATE_AMR_15K85 -> AUDIO_BITRATE_AMR_15K85
    java.lang.String AUDIO_BITRATE_AMR_18K25 -> AUDIO_BITRATE_AMR_18K25
    java.lang.String AUDIO_BITRATE_AMR_19K85 -> AUDIO_BITRATE_AMR_19K85
    java.lang.String AUDIO_BITRATE_AMR_23K05 -> AUDIO_BITRATE_AMR_23K05
    java.lang.String AUDIO_BITRATE_AMR_23K85 -> AUDIO_BITRATE_AMR_23K85
    java.lang.String AUDIO_BITRATE_OPUS_8K -> AUDIO_BITRATE_OPUS_8K
    java.lang.String AUDIO_BITRATE_OPUS_16K -> AUDIO_BITRATE_OPUS_16K
    java.lang.String AUDIO_BITRATE_OPUS_18K -> AUDIO_BITRATE_OPUS_18K
    java.lang.String AUDIO_BITRATE_OPUS_20K -> AUDIO_BITRATE_OPUS_20K
    java.lang.String AUDIO_BITRATE_OPUS_24K -> AUDIO_BITRATE_OPUS_24K
    java.lang.String AUDIO_BITRATE_OPUS_32K -> AUDIO_BITRATE_OPUS_32K
    com.baidu.tts.client.SpeechSynthesizer a -> a
    com.baidu.tts.a.b.a b -> b
    void <init>() -> <init>
    com.baidu.tts.client.SpeechSynthesizer getInstance() -> getInstance
    void setSpeechSynthesizerListener(com.baidu.tts.client.SpeechSynthesizerListener) -> setSpeechSynthesizerListener
    void setContext(android.content.Context) -> setContext
    int initTts(com.baidu.tts.client.TtsMode) -> initTts
    java.lang.String libVersion() -> libVersion
    int setApiKey(java.lang.String,java.lang.String) -> setApiKey
    int setAppId(java.lang.String) -> setAppId
    int setParam(java.lang.String,java.lang.String) -> setParam
    int pause() -> pause
    int resume() -> resume
    int stop() -> stop
    int release() -> release
    int loadCustomResource(java.lang.String) -> loadCustomResource
    int freeCustomResource() -> freeCustomResource
    int loadModel(java.lang.String,java.lang.String) -> loadModel
    int loadEnglishModel(java.lang.String,java.lang.String) -> loadEnglishModel
    int speak(java.lang.String) -> speak
    int speak(com.baidu.tts.client.SpeechSynthesizeBag) -> speak
    int speak(java.lang.String,java.lang.String) -> speak
    int speak(java.lang.String,java.lang.String,android.os.Bundle) -> speak
    int synthesize(java.lang.String) -> synthesize
    int synthesize(com.baidu.tts.client.SpeechSynthesizeBag) -> synthesize
    int synthesize(java.lang.String,java.lang.String) -> synthesize
    int synthesize(java.lang.String,java.lang.String,android.os.Bundle) -> synthesize
    int batchSpeak(java.util.List) -> batchSpeak
    com.baidu.tts.auth.AuthInfo auth(com.baidu.tts.client.TtsMode) -> auth
    int setStereoVolume(float,float) -> setStereoVolume
    int setAudioStreamType(int) -> setAudioStreamType
    void <clinit>() -> <clinit>
com.baidu.tts.client.SpeechSynthesizerListener -> com.baidu.tts.client.SpeechSynthesizerListener:
    void onSynthesizeStart(java.lang.String) -> onSynthesizeStart
    void onSynthesizeDataArrived(java.lang.String,byte[],int) -> onSynthesizeDataArrived
    void onSynthesizeFinish(java.lang.String) -> onSynthesizeFinish
    void onSpeechStart(java.lang.String) -> onSpeechStart
    void onSpeechProgressChanged(java.lang.String,int) -> onSpeechProgressChanged
    void onSpeechFinish(java.lang.String) -> onSpeechFinish
    void onError(java.lang.String,com.baidu.tts.client.SpeechError) -> onError
com.baidu.tts.client.SynthesizerTool -> com.baidu.tts.client.SynthesizerTool:
    void <init>() -> <init>
    boolean verifyModelFile(java.lang.String) -> verifyModelFile
    java.lang.String getEngineInfo() -> getEngineInfo
    int getEngineVersion() -> getEngineVersion
    java.lang.String getModelInfo(java.lang.String) -> getModelInfo
com.baidu.tts.client.TtsMode -> com.baidu.tts.client.TtsMode:
    com.baidu.tts.client.TtsMode ONLINE -> ONLINE
    com.baidu.tts.client.TtsMode MIX -> MIX
    com.baidu.tts.f.m a -> a
    com.baidu.tts.client.TtsMode[] b -> b
    com.baidu.tts.client.TtsMode[] values() -> values
    com.baidu.tts.client.TtsMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.baidu.tts.f.m) -> <init>
    com.baidu.tts.f.m getTtsEnum() -> getTtsEnum
    int getMode() -> getMode
    java.lang.String getDescription() -> getDescription
    void <clinit>() -> <clinit>
com.baidu.tts.client.model.AvailableConditions -> com.baidu.tts.client.model.AvailableConditions:
    java.util.Set a -> a
    java.util.Set b -> b
    void <init>() -> <init>
    java.util.Set getGenders() -> getGenders
    void setGenders(java.util.Set) -> setGenders
    java.util.Set getSpeakers() -> getSpeakers
    void setSpeakers(java.util.Set) -> setSpeakers
    void appendGender(java.lang.String) -> appendGender
    void appendSpeaker(java.lang.String) -> appendSpeaker
com.baidu.tts.client.model.BasicHandler -> com.baidu.tts.client.model.BasicHandler:
    java.util.concurrent.FutureTask a -> a
    void <init>(java.util.concurrent.FutureTask) -> <init>
    void start() -> start
    boolean cancel() -> cancel
    java.lang.Object get() -> get
com.baidu.tts.client.model.Conditions -> com.baidu.tts.client.model.Conditions:
    java.util.Set a -> a
    java.lang.String b -> b
    java.util.Set c -> c
    java.util.Set d -> d
    java.util.Set e -> e
    java.util.Set f -> f
    java.util.Set g -> g
    void <init>() -> <init>
    java.util.Set getModelIds() -> getModelIds
    void setModelIds(java.util.Set) -> setModelIds
    java.util.Set getLanguages() -> getLanguages
    void setLanguages(java.util.Set) -> setLanguages
    java.util.Set getGenders() -> getGenders
    void setGenders(java.util.Set) -> setGenders
    java.util.Set getSpeakers() -> getSpeakers
    void setSpeakers(java.util.Set) -> setSpeakers
    java.util.Set getDomains() -> getDomains
    void setDomains(java.util.Set) -> setDomains
    java.util.Set getQualitys() -> getQualitys
    void setQualitys(java.util.Set) -> setQualitys
    void appendId(java.lang.String) -> appendId
    void appendLanguage(java.lang.String) -> appendLanguage
    void appendGender(java.lang.String) -> appendGender
    void appendSpeaker(java.lang.String) -> appendSpeaker
    void appendDomain(java.lang.String) -> appendDomain
    void appendQuality(java.lang.String) -> appendQuality
    org.json.JSONArray getSpeakerJA() -> getSpeakerJA
    org.json.JSONArray getGenderJA() -> getGenderJA
    void setDomains(java.lang.String[]) -> setDomains
    void setLanguages(java.lang.String[]) -> setLanguages
    void setQualitys(java.lang.String[]) -> setQualitys
    java.lang.String[] getModelIdsArray() -> getModelIdsArray
    java.lang.String[] getDomainArray() -> getDomainArray
    java.lang.String[] getLanguageArray() -> getLanguageArray
    java.lang.String[] getQualityArray() -> getQualityArray
    java.lang.String[] getGenderArray() -> getGenderArray
    java.lang.String[] getSpeakerArray() -> getSpeakerArray
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    org.json.JSONObject getJSONConditions() -> getJSONConditions
com.baidu.tts.client.model.DownloadHandler -> com.baidu.tts.client.model.DownloadHandler:
    int DOWNLOAD_SUCCESS -> DOWNLOAD_SUCCESS
    com.baidu.tts.d.b a -> a
    java.util.concurrent.Future b -> b
    com.baidu.tts.aop.tts.TtsError c -> c
    com.baidu.tts.d.b.a d -> d
    boolean e -> e
    com.baidu.tts.l.a f -> f
    com.baidu.tts.client.model.RecordData g -> g
    java.lang.String h -> h
    void <init>(com.baidu.tts.l.a) -> <init>
    java.lang.String getModelId() -> getModelId
    com.baidu.tts.client.model.OnDownloadListener a() -> a
    void setCheckFuture(java.util.concurrent.Future) -> setCheckFuture
    void setTtsError(com.baidu.tts.aop.tts.TtsError) -> setTtsError
    com.baidu.tts.aop.tts.TtsError getTtsError() -> getTtsError
    int getErrorCode() -> getErrorCode
    int getErrorCode(com.baidu.tts.aop.tts.TtsError) -> getErrorCode
    java.lang.String getErrorMessage() -> getErrorMessage
    java.lang.String getErrorMessage(com.baidu.tts.aop.tts.TtsError) -> getErrorMessage
    com.baidu.tts.d.b getDownloadParams() -> getDownloadParams
    void setDownloadParams(com.baidu.tts.d.b) -> setDownloadParams
    void reset(com.baidu.tts.d.b) -> reset
    void reset() -> reset
    void stop() -> stop
    void updateStart(com.baidu.tts.d.b.d) -> updateStart
    void updateProgress(com.baidu.tts.d.b.d) -> updateProgress
    void updateFinish(com.baidu.tts.d.b.d,com.baidu.tts.aop.tts.TtsError) -> updateFinish
    void updateFinish(java.lang.String,com.baidu.tts.aop.tts.TtsError) -> updateFinish
    void a(java.lang.String) -> a
    void a(java.lang.String,long,long) -> a
    void a(java.lang.String,int) -> a
com.baidu.tts.client.model.LibEngineParams -> com.baidu.tts.client.model.LibEngineParams:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String[] c -> c
    java.lang.String[] d -> d
    java.lang.String[] e -> e
    void <init>(java.lang.String) -> <init>
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.String[] getDomain() -> getDomain
    void setDomain(java.lang.String[]) -> setDomain
    java.lang.String[] getLanguage() -> getLanguage
    void setLanguage(java.lang.String[]) -> setLanguage
    java.lang.String[] getQuality() -> getQuality
    void setQuality(java.lang.String[]) -> setQuality
    java.lang.String getResult() -> getResult
    org.json.JSONObject getJsonResult() -> getJsonResult
com.baidu.tts.client.model.ModelBags -> com.baidu.tts.client.model.ModelBags:
    com.baidu.tts.aop.tts.TtsError a -> a
    java.util.List b -> b
    void <init>() -> <init>
    com.baidu.tts.aop.tts.TtsError getTtsError() -> getTtsError
    void setTtsError(com.baidu.tts.aop.tts.TtsError) -> setTtsError
    java.util.List getModelInfos() -> getModelInfos
    void setModelInfos(java.util.List) -> setModelInfos
    void addModelInfo(com.baidu.tts.client.model.ModelInfo) -> addModelInfo
    void setList(java.util.List) -> setList
    boolean isEmpty() -> isEmpty
    org.json.JSONArray toJson() -> toJson
    void parseJson(org.json.JSONArray) -> parseJson
com.baidu.tts.client.model.ModelFileBags -> com.baidu.tts.client.model.ModelFileBags:
    com.baidu.tts.aop.tts.TtsError a -> a
    java.util.List b -> b
    void <init>() -> <init>
    java.util.List getModelFileInfos() -> getModelFileInfos
    com.baidu.tts.aop.tts.TtsError getTtsError() -> getTtsError
    void setTtsError(com.baidu.tts.aop.tts.TtsError) -> setTtsError
    void setModelFileInfos(java.util.List) -> setModelFileInfos
    void addFileInfo(com.baidu.tts.client.model.ModelFileInfo) -> addFileInfo
    void setList(java.util.List) -> setList
    void generateAbsPath(android.content.Context) -> generateAbsPath
    com.baidu.tts.client.model.ModelFileInfo getModelFileInfo(int) -> getModelFileInfo
    java.lang.String getUrl(int) -> getUrl
    boolean isEmpty() -> isEmpty
    org.json.JSONArray toJson() -> toJson
    void parseJson(org.json.JSONArray) -> parseJson
com.baidu.tts.client.model.ModelFileInfo -> com.baidu.tts.client.model.ModelFileInfo:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    void <init>() -> <init>
    java.lang.String getServerid() -> getServerid
    void setServerid(java.lang.String) -> setServerid
    java.lang.String getLength() -> getLength
    void setLength(java.lang.String) -> setLength
    java.lang.String getMd5() -> getMd5
    void setMd5(java.lang.String) -> setMd5
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getAbsPath() -> getAbsPath
    void setAbsPath(java.lang.String) -> setAbsPath
    java.lang.String getUrl() -> getUrl
    void setUrl(java.lang.String) -> setUrl
    void generateAbsPath(android.content.Context) -> generateAbsPath
    void setMap(java.util.Map) -> setMap
    org.json.JSONObject toJson() -> toJson
    void parseJson(org.json.JSONObject) -> parseJson
com.baidu.tts.client.model.ModelInfo -> com.baidu.tts.client.model.ModelInfo:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    void <init>() -> <init>
    java.lang.String getServerId() -> getServerId
    void setServerId(java.lang.String) -> setServerId
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getVersionMin() -> getVersionMin
    void setVersionMin(java.lang.String) -> setVersionMin
    java.lang.String getVersionMax() -> getVersionMax
    void setVersionMax(java.lang.String) -> setVersionMax
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String getGender() -> getGender
    void setGender(java.lang.String) -> setGender
    java.lang.String getSpeaker() -> getSpeaker
    void setSpeaker(java.lang.String) -> setSpeaker
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getQuality() -> getQuality
    void setQuality(java.lang.String) -> setQuality
    java.lang.String getTextDataId() -> getTextDataId
    void setTextDataId(java.lang.String) -> setTextDataId
    java.lang.String getSpeechDataId() -> getSpeechDataId
    void setSpeechDataId(java.lang.String) -> setSpeechDataId
    void setMap(java.util.Map) -> setMap
    org.json.JSONObject toJson() -> toJson
    void parseJson(org.json.JSONObject) -> parseJson
com.baidu.tts.client.model.ModelManager -> com.baidu.tts.client.model.ModelManager:
    com.baidu.tts.l.a a -> a
    void <init>(android.content.Context) -> <init>
    com.baidu.tts.client.model.BasicHandler getServerModels(com.baidu.tts.client.model.Conditions) -> getServerModels
    com.baidu.tts.client.model.BasicHandler getLocalModels(com.baidu.tts.client.model.Conditions) -> getLocalModels
    com.baidu.tts.client.model.LibEngineParams getEngineParams() -> getEngineParams
    com.baidu.tts.client.model.BasicHandler getServerModelsAvailable(com.baidu.tts.client.model.AvailableConditions) -> getServerModelsAvailable
    com.baidu.tts.client.model.BasicHandler getLocalModelsAvailable(com.baidu.tts.client.model.AvailableConditions) -> getLocalModelsAvailable
    com.baidu.tts.client.model.Conditions a(com.baidu.tts.client.model.AvailableConditions) -> a
    com.baidu.tts.client.model.Conditions a() -> a
    boolean isModelFileValid(java.lang.String) -> isModelFileValid
    boolean isModelValid(java.lang.String) -> isModelValid
    java.lang.String getTextModelFileAbsPath(java.lang.String) -> getTextModelFileAbsPath
    java.lang.String getSpeechModelFileAbsPath(java.lang.String) -> getSpeechModelFileAbsPath
    com.baidu.tts.client.model.BasicHandler getServerModelFileInfos(java.util.Set) -> getServerModelFileInfos
    com.baidu.tts.client.model.BasicHandler getLocalModelFileInfos(java.util.Set) -> getLocalModelFileInfos
    com.baidu.tts.client.model.BasicHandler getServerDefaultModels() -> getServerDefaultModels
    com.baidu.tts.client.model.DownloadHandler download(java.lang.String,com.baidu.tts.client.model.OnDownloadListener) -> download
    int stop() -> stop
com.baidu.tts.client.model.OnDownloadListener -> com.baidu.tts.client.model.OnDownloadListener:
    void onStart(java.lang.String) -> onStart
    void onProgress(java.lang.String,long,long) -> onProgress
    void onFinish(java.lang.String,int) -> onFinish
com.baidu.tts.client.model.RecordData -> com.baidu.tts.client.model.RecordData:
    com.baidu.tts.l.a b -> b
    java.util.concurrent.ExecutorService a -> a
    void <init>(com.baidu.tts.l.a) -> <init>
    void setStartInfo(java.lang.String,java.lang.String,java.lang.String) -> setStartInfo
    void setEndInfo(java.lang.String,java.lang.String,int,java.lang.String) -> setEndInfo
    com.baidu.tts.l.a a(com.baidu.tts.client.model.RecordData) -> a
com.baidu.tts.client.model.RecordData$InsertData -> com.baidu.tts.client.model.RecordData$InsertData:
    org.json.JSONObject b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    com.baidu.tts.client.model.RecordData a -> a
    void <init>(com.baidu.tts.client.model.RecordData,org.json.JSONObject,java.lang.String,java.lang.String) -> <init>
    java.lang.Integer call() -> call
    java.lang.Object call() -> call
com.baidu.tts.client.model.Statistics -> com.baidu.tts.client.model.Statistics:
    boolean isStatistics -> isStatistics
    com.baidu.tts.p.b a -> a
    void <init>(android.content.Context) -> <init>
    void setEnable(boolean) -> setEnable
    int start() -> start
    int stop() -> stop
    void <clinit>() -> <clinit>
com.baidu.tts.d.a -> com.baidu.tts.d.a:
    boolean a -> a
    java.util.Map b -> b
    void <init>() -> <init>
    boolean a() -> a
    void a(boolean) -> a
    void a(java.lang.String,int) -> a
    boolean b() -> b
com.baidu.tts.d.a.a -> com.baidu.tts.d.a.a:
    com.baidu.tts.d.a.b a -> a
    void <init>(com.baidu.tts.d.a.b) -> <init>
    void a(com.baidu.tts.d.a.a) -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    void a() -> a
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    com.baidu.tts.d.a.e a(com.baidu.tts.d.a.c) -> a
com.baidu.tts.d.a.b -> com.baidu.tts.d.a.b:
    com.baidu.tts.d.a.a a -> a
    com.baidu.tts.d.a.i b -> b
    com.baidu.tts.d.a.f c -> c
    com.baidu.tts.d.a.d f -> f
    com.baidu.tts.d.a.h g -> g
    java.util.concurrent.ThreadPoolExecutor h -> h
    com.baidu.tts.l.a i -> i
    void <init>() -> <init>
    void a(com.baidu.tts.l.a) -> a
    com.baidu.tts.d.a.a a() -> a
    void a(com.baidu.tts.d.a.a) -> a
    com.baidu.tts.d.a.i o() -> o
    com.baidu.tts.d.a.f p() -> p
    com.baidu.tts.d.a.d q() -> q
    com.baidu.tts.d.a.h r() -> r
    com.baidu.tts.aop.tts.TtsError g() -> g
    void h() -> h
    void i() -> i
    void j() -> j
    void k() -> k
    void l() -> l
    boolean m() -> m
    boolean n() -> n
    com.baidu.tts.d.a.e a(com.baidu.tts.d.a.c) -> a
    void s() -> s
    void t() -> t
    com.baidu.tts.d.a.e b(com.baidu.tts.d.a.c) -> b
    com.baidu.tts.l.a a(com.baidu.tts.d.a.b) -> a
com.baidu.tts.d.a.b$a -> com.baidu.tts.d.a.b$a:
    com.baidu.tts.d.a.c b -> b
    com.baidu.tts.loopj.SyncHttpClient c -> c
    com.baidu.tts.d.a.b a -> a
    void <init>(com.baidu.tts.d.a.b,com.baidu.tts.d.a.c) -> <init>
    java.lang.Void a() -> a
    void b() -> b
    com.baidu.tts.d.a.c c() -> c
    java.lang.Object call() -> call
com.baidu.tts.d.a.b$a$1 -> com.baidu.tts.d.a.b$a$1:
    java.lang.String a -> a
    com.baidu.tts.d.a.b$a b -> b
    void <init>(com.baidu.tts.d.a.b$a,java.io.File,com.baidu.tts.d.a.c,java.lang.String) -> <init>
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,java.io.File) -> onFailure
    void onSuccess(int,org.apache.http.Header[],java.io.File) -> onSuccess
    void onProgress(long,long) -> onProgress
com.baidu.tts.d.a.c -> com.baidu.tts.d.a.c:
    com.baidu.tts.d.b.b a -> a
    void <init>() -> <init>
    void a(com.baidu.tts.d.b.b) -> a
    java.lang.String a() -> a
    java.lang.String b() -> b
    void c() -> c
    void d() -> d
    void a(long,long) -> a
    void e() -> e
    void a(com.baidu.tts.aop.tts.TtsError) -> a
com.baidu.tts.d.a.d -> com.baidu.tts.d.a.d:
    void <init>(com.baidu.tts.d.a.b) -> <init>
    void d() -> d
    void e() -> e
    void f() -> f
    com.baidu.tts.d.a.e a(com.baidu.tts.d.a.c) -> a
com.baidu.tts.d.a.e -> com.baidu.tts.d.a.e:
    java.util.concurrent.Future a -> a
    com.baidu.tts.d.a.b$a b -> b
    void <init>() -> <init>
    void a(java.util.concurrent.Future) -> a
    void a(com.baidu.tts.d.a.b$a) -> a
    void a() -> a
com.baidu.tts.d.a.f -> com.baidu.tts.d.a.f:
    void <init>(com.baidu.tts.d.a.b) -> <init>
    void a() -> a
    void f() -> f
    com.baidu.tts.d.a.e a(com.baidu.tts.d.a.c) -> a
com.baidu.tts.d.a.g -> com.baidu.tts.d.a.g:
    com.baidu.tts.d.a.c a -> a
    void <init>(java.io.File,com.baidu.tts.d.a.c) -> <init>
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,java.io.File) -> onFailure
    void onSuccess(int,org.apache.http.Header[],java.io.File) -> onSuccess
    void onProgress(long,long) -> onProgress
com.baidu.tts.d.a.h -> com.baidu.tts.d.a.h:
    void <init>(com.baidu.tts.d.a.b) -> <init>
    void c() -> c
    void e() -> e
    void f() -> f
    com.baidu.tts.d.a.e a(com.baidu.tts.d.a.c) -> a
com.baidu.tts.d.a.i -> com.baidu.tts.d.a.i:
    void <init>(com.baidu.tts.d.a.b) -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
com.baidu.tts.d.b -> com.baidu.tts.d.b:
    java.lang.String a -> a
    com.baidu.tts.client.model.OnDownloadListener b -> b
    void <init>() -> <init>
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    boolean b() -> b
    com.baidu.tts.client.model.OnDownloadListener c() -> c
    void a(com.baidu.tts.client.model.OnDownloadListener) -> a
com.baidu.tts.d.b.a -> com.baidu.tts.d.b.a:
    com.baidu.tts.d.b.a a -> a
    com.baidu.tts.d.b.e b -> b
    com.baidu.tts.database.a c -> c
    void <init>() -> <init>
    com.baidu.tts.d.b.a a() -> a
    com.baidu.tts.database.a b() -> b
    void a(com.baidu.tts.database.a) -> a
    com.baidu.tts.d.b.b a(java.lang.String) -> a
    com.baidu.tts.d.b.d b(java.lang.String) -> b
    com.baidu.tts.d.b.c c(java.lang.String) -> c
    long d(java.lang.String) -> d
    int e(java.lang.String) -> e
    void a(com.baidu.tts.client.model.DownloadHandler) -> a
    void a(java.lang.String,java.lang.String) -> a
    void c() -> c
    void <clinit>() -> <clinit>
com.baidu.tts.d.b.b -> com.baidu.tts.d.b.b:
    java.lang.String a -> a
    long b -> b
    java.lang.String c -> c
    int d -> d
    int e -> e
    java.lang.String f -> f
    com.baidu.tts.d.a.e g -> g
    java.util.concurrent.CopyOnWriteArraySet h -> h
    void <init>(java.lang.String) -> <init>
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void j() -> j
    long a() -> a
    void a(com.baidu.tts.d.a.e) -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    void c(java.lang.String) -> c
    int d() -> d
    boolean a(com.baidu.tts.database.a) -> a
    boolean e() -> e
    boolean f() -> f
    int b(com.baidu.tts.database.a) -> b
    int a(com.baidu.tts.d.b.c) -> a
    void g() -> g
    void h() -> h
    void a(long,long) -> a
    void i() -> i
    void a(com.baidu.tts.aop.tts.TtsError) -> a
com.baidu.tts.d.b.c -> com.baidu.tts.d.b.c:
    java.lang.String a -> a
    java.util.Map b -> b
    void <init>(java.lang.String) -> <init>
    boolean a(com.baidu.tts.database.a) -> a
    void a(com.baidu.tts.client.model.ModelFileBags,com.baidu.tts.database.a) -> a
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
com.baidu.tts.d.b.d -> com.baidu.tts.d.b.d:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    long d -> d
    com.baidu.tts.d.b.a e -> e
    java.util.concurrent.CopyOnWriteArraySet f -> f
    void <init>(java.lang.String) -> <init>
    void a(com.baidu.tts.client.model.DownloadHandler) -> a
    void b(com.baidu.tts.client.model.DownloadHandler) -> b
    void j() -> j
    void a() -> a
    java.util.Set b() -> b
    long c() -> c
    void d() -> d
    void e() -> e
    boolean a(com.baidu.tts.database.a) -> a
    void a(com.baidu.tts.client.model.ModelBags,com.baidu.tts.database.a) -> a
    java.util.Set f() -> f
    java.lang.String g() -> g
    long h() -> h
    void c(com.baidu.tts.client.model.DownloadHandler) -> c
    void a(com.baidu.tts.client.model.DownloadHandler,com.baidu.tts.aop.tts.TtsError) -> a
    void a(com.baidu.tts.d.b.b) -> a
    boolean i() -> i
    void b(com.baidu.tts.d.b.b) -> b
    void a(com.baidu.tts.d.b.b,com.baidu.tts.aop.tts.TtsError) -> a
com.baidu.tts.d.b.e -> com.baidu.tts.d.b.e:
    com.baidu.tts.d.b.e a -> a
    java.util.concurrent.ConcurrentHashMap b -> b
    java.util.concurrent.ConcurrentHashMap c -> c
    java.util.concurrent.ConcurrentHashMap d -> d
    void <init>() -> <init>
    com.baidu.tts.d.b.e a() -> a
    com.baidu.tts.d.b.d a(java.lang.String) -> a
    com.baidu.tts.d.b.c b(java.lang.String) -> b
    com.baidu.tts.d.b.b c(java.lang.String) -> c
    com.baidu.tts.d.b.b d(java.lang.String) -> d
    long e(java.lang.String) -> e
    int f(java.lang.String) -> f
    void a(com.baidu.tts.client.model.DownloadHandler) -> a
    void a(java.lang.String,java.lang.String) -> a
    void b() -> b
    void <clinit>() -> <clinit>
com.baidu.tts.d.c -> com.baidu.tts.d.c:
    com.baidu.tts.d.c a -> a
    com.baidu.tts.l.a b -> b
    com.baidu.tts.d.b.a c -> c
    com.baidu.tts.d.a.b d -> d
    java.util.concurrent.ExecutorService e -> e
    void <init>() -> <init>
    com.baidu.tts.d.c a() -> a
    java.util.concurrent.ExecutorService h() -> h
    com.baidu.tts.aop.tts.TtsError b() -> b
    void g() -> g
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void a(com.baidu.tts.l.a) -> a
    com.baidu.tts.client.model.DownloadHandler a(com.baidu.tts.client.model.DownloadHandler) -> a
    com.baidu.tts.l.a a(com.baidu.tts.d.c) -> a
    com.baidu.tts.d.b.a b(com.baidu.tts.d.c) -> b
    com.baidu.tts.d.a.b c(com.baidu.tts.d.c) -> c
    void <clinit>() -> <clinit>
com.baidu.tts.d.c$a -> com.baidu.tts.d.c$a:
    com.baidu.tts.client.model.DownloadHandler b -> b
    com.baidu.tts.d.c a -> a
    void <init>(com.baidu.tts.d.c,com.baidu.tts.client.model.DownloadHandler) -> <init>
    com.baidu.tts.d.a a() -> a
    java.lang.Object call() -> call
com.baidu.tts.d.d -> com.baidu.tts.d.d:
    com.baidu.tts.d.c a -> a
    java.util.concurrent.ConcurrentMap b -> b
    com.baidu.tts.l.a c -> c
    void <init>() -> <init>
    void a() -> a
    void b() -> b
    void c() -> c
    void a(com.baidu.tts.l.a) -> a
    com.baidu.tts.client.model.DownloadHandler a(com.baidu.tts.d.b) -> a
    com.baidu.tts.client.model.DownloadHandler a(java.lang.String) -> a
com.baidu.tts.database.FsFileInfoTable -> com.baidu.tts.database.FsFileInfoTable:
    java.lang.String a() -> a
    java.lang.String b() -> b
com.baidu.tts.database.FsFileInfoTable$Field -> com.baidu.tts.database.FsFileInfoTable$Field:
    com.baidu.tts.database.FsFileInfoTable$Field a -> a
    com.baidu.tts.database.FsFileInfoTable$Field b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    com.baidu.tts.database.FsFileInfoTable$Field[] e -> e
    com.baidu.tts.database.FsFileInfoTable$Field[] values() -> values
    com.baidu.tts.database.FsFileInfoTable$Field valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String getColumnName() -> getColumnName
    java.lang.String getDataType() -> getDataType
    void <clinit>() -> <clinit>
com.baidu.tts.database.ModelFileTable -> com.baidu.tts.database.ModelFileTable:
    java.lang.String a() -> a
    java.lang.String b() -> b
    int a(android.database.sqlite.SQLiteDatabase,java.lang.String) -> a
    void a(android.database.sqlite.SQLiteDatabase,com.baidu.tts.client.model.ModelFileBags) -> a
com.baidu.tts.database.ModelFileTable$1 -> com.baidu.tts.database.ModelFileTable$1:
    com.baidu.tts.client.model.ModelFileBags a -> a
    void <init>(com.baidu.tts.client.model.ModelFileBags) -> <init>
    boolean a(android.database.sqlite.SQLiteDatabase) -> a
com.baidu.tts.database.ModelFileTable$Field -> com.baidu.tts.database.ModelFileTable$Field:
    com.baidu.tts.database.ModelFileTable$Field a -> a
    com.baidu.tts.database.ModelFileTable$Field b -> b
    com.baidu.tts.database.ModelFileTable$Field c -> c
    com.baidu.tts.database.ModelFileTable$Field d -> d
    com.baidu.tts.database.ModelFileTable$Field e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    com.baidu.tts.database.ModelFileTable$Field[] h -> h
    com.baidu.tts.database.ModelFileTable$Field[] values() -> values
    com.baidu.tts.database.ModelFileTable$Field valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String getColumnName() -> getColumnName
    java.lang.String getDataType() -> getDataType
    void <clinit>() -> <clinit>
com.baidu.tts.database.SpeechModelTable -> com.baidu.tts.database.SpeechModelTable:
    java.lang.String a() -> a
    java.lang.String b() -> b
    int a(android.database.sqlite.SQLiteDatabase,java.lang.String) -> a
    void a(android.database.sqlite.SQLiteDatabase,com.baidu.tts.client.model.ModelBags) -> a
com.baidu.tts.database.SpeechModelTable$1 -> com.baidu.tts.database.SpeechModelTable$1:
    com.baidu.tts.client.model.ModelBags a -> a
    void <init>(com.baidu.tts.client.model.ModelBags) -> <init>
    boolean a(android.database.sqlite.SQLiteDatabase) -> a
com.baidu.tts.database.SpeechModelTable$Field -> com.baidu.tts.database.SpeechModelTable$Field:
    com.baidu.tts.database.SpeechModelTable$Field a -> a
    com.baidu.tts.database.SpeechModelTable$Field b -> b
    com.baidu.tts.database.SpeechModelTable$Field c -> c
    com.baidu.tts.database.SpeechModelTable$Field d -> d
    com.baidu.tts.database.SpeechModelTable$Field e -> e
    com.baidu.tts.database.SpeechModelTable$Field f -> f
    com.baidu.tts.database.SpeechModelTable$Field g -> g
    com.baidu.tts.database.SpeechModelTable$Field h -> h
    com.baidu.tts.database.SpeechModelTable$Field i -> i
    com.baidu.tts.database.SpeechModelTable$Field j -> j
    com.baidu.tts.database.SpeechModelTable$Field k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    com.baidu.tts.database.SpeechModelTable$Field[] n -> n
    com.baidu.tts.database.SpeechModelTable$Field[] values() -> values
    com.baidu.tts.database.SpeechModelTable$Field valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String getColumnName() -> getColumnName
    java.lang.String getDataType() -> getDataType
    void <clinit>() -> <clinit>
com.baidu.tts.database.a -> com.baidu.tts.database.a:
    com.baidu.tts.l.a a -> a
    com.baidu.tts.database.b b -> b
    java.util.concurrent.locks.ReadWriteLock c -> c
    java.util.concurrent.locks.Lock d -> d
    java.util.concurrent.locks.Lock e -> e
    void <init>(com.baidu.tts.l.a) -> <init>
    int a(java.lang.String) -> a
    int b(java.lang.String) -> b
    java.lang.String a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String,int) -> a
    java.util.Map c(java.lang.String) -> c
    java.util.Map d(java.lang.String) -> d
    java.util.Map e(java.lang.String) -> e
    void a(com.baidu.tts.client.model.ModelFileBags) -> a
    void a(com.baidu.tts.client.model.ModelBags) -> a
    java.util.List a(com.baidu.tts.client.model.Conditions) -> a
    java.util.List a(java.util.Set) -> a
    android.database.sqlite.SQLiteDatabase a() -> a
    android.database.sqlite.SQLiteDatabase b() -> b
    java.util.Map a(java.lang.String,java.lang.String[]) -> a
    java.util.List b(java.lang.String,java.lang.String[]) -> b
com.baidu.tts.database.b -> com.baidu.tts.database.b:
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.baidu.tts.database.c -> com.baidu.tts.database.c:
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.baidu.tts.database.d -> com.baidu.tts.database.d:
    com.baidu.tts.l.a a -> a
    com.baidu.tts.database.c b -> b
    java.util.concurrent.locks.ReadWriteLock c -> c
    java.util.concurrent.locks.Lock d -> d
    java.util.concurrent.locks.Lock e -> e
    void <init>(com.baidu.tts.l.a) -> <init>
    long a(java.lang.String) -> a
    int a(java.lang.String,java.lang.String,java.lang.String) -> a
    java.util.Map a() -> a
    int a(int,int) -> a
    android.database.sqlite.SQLiteDatabase b() -> b
    android.database.sqlite.SQLiteDatabase c() -> c
com.baidu.tts.database.e -> com.baidu.tts.database.e:
    java.lang.String a() -> a
    java.lang.String b() -> b
com.baidu.tts.database.f -> com.baidu.tts.database.f:
    android.database.sqlite.SQLiteDatabase a -> a
    com.baidu.tts.database.f$a b -> b
    void <init>(android.database.sqlite.SQLiteDatabase,com.baidu.tts.database.f$a) -> <init>
    boolean a() -> a
com.baidu.tts.database.f$a -> com.baidu.tts.database.f$a:
    boolean a(android.database.sqlite.SQLiteDatabase) -> a
com.baidu.tts.e.a -> com.baidu.tts.e.a:
    void a(android.content.Context,java.lang.String) -> a
    boolean b(android.content.Context,java.lang.String) -> b
    boolean c(android.content.Context,java.lang.String) -> c
    java.util.List a(org.json.JSONObject,android.database.Cursor,int,int) -> a
    boolean a(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String d(android.content.Context,java.lang.String) -> d
    java.lang.String e(android.content.Context,java.lang.String) -> e
    org.apache.http.client.entity.UrlEncodedFormEntity a(java.lang.String) -> a
com.baidu.tts.e.b -> com.baidu.tts.e.b:
    android.content.Context a -> a
    java.lang.String b -> b
    void <init>(android.content.Context,java.lang.String) -> <init>
    void run() -> run
com.baidu.tts.e.c -> com.baidu.tts.e.c:
    com.baidu.tts.e.c$a a -> a
    android.database.sqlite.SQLiteDatabase b -> b
    boolean c -> c
    android.content.Context d -> d
    com.baidu.tts.e.c e -> e
    void <init>(android.content.Context) -> <init>
    com.baidu.tts.e.c a(android.content.Context) -> a
    void a() -> a
    void a(long,int,int,int,java.lang.String) -> a
    android.database.Cursor b() -> b
    void a(java.util.List) -> a
    void c() -> c
    boolean d() -> d
    void e() -> e
com.baidu.tts.e.c$a -> com.baidu.tts.e.c$a:
    com.baidu.tts.e.c a -> a
    void <init>(com.baidu.tts.e.c,android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.baidu.tts.e.d -> com.baidu.tts.e.d:
    void a(android.content.Context,long) -> a
    long a(android.content.Context) -> a
    void a(android.content.Context,int) -> a
    int b(android.content.Context) -> b
    java.lang.String a(byte[]) -> a
    byte[] a(java.lang.String) -> a
    java.lang.String a() -> a
    java.lang.String c(android.content.Context) -> c
    java.lang.String d(android.content.Context) -> d
    java.lang.String b() -> b
    int e(android.content.Context) -> e
    java.lang.String f(android.content.Context) -> f
    java.lang.String c() -> c
    java.lang.String g(android.content.Context) -> g
    java.lang.String b(byte[]) -> b
    java.lang.String c(byte[]) -> c
    java.lang.String h(android.content.Context) -> h
com.baidu.tts.f.a -> com.baidu.tts.f.a:
    com.baidu.tts.f.a a -> a
    com.baidu.tts.f.a b -> b
    int c -> c
    com.baidu.tts.f.a[] d -> d
    com.baidu.tts.f.a[] values() -> values
    com.baidu.tts.f.a valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.tts.f.b -> com.baidu.tts.f.b:
    com.baidu.tts.f.b a -> a
    com.baidu.tts.f.b b -> b
    com.baidu.tts.f.b c -> c
    java.lang.String d -> d
    com.baidu.tts.f.b[] e -> e
    com.baidu.tts.f.b[] values() -> values
    com.baidu.tts.f.b valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String a() -> a
    com.baidu.tts.f.b a(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String,com.baidu.tts.f.b$1) -> <init>
    void <clinit>() -> <clinit>
com.baidu.tts.f.b$1 -> com.baidu.tts.f.b$1:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
com.baidu.tts.f.b$2 -> com.baidu.tts.f.b$2:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
com.baidu.tts.f.b$3 -> com.baidu.tts.f.b$3:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
com.baidu.tts.f.c -> com.baidu.tts.f.c:
    com.baidu.tts.f.c a -> a
    com.baidu.tts.f.c b -> b
    com.baidu.tts.f.c c -> c
    com.baidu.tts.f.c d -> d
    com.baidu.tts.f.c e -> e
    com.baidu.tts.f.c f -> f
    com.baidu.tts.f.c g -> g
    com.baidu.tts.f.c h -> h
    com.baidu.tts.f.c i -> i
    com.baidu.tts.f.c j -> j
    com.baidu.tts.f.c k -> k
    com.baidu.tts.f.c l -> l
    com.baidu.tts.f.c m -> m
    com.baidu.tts.f.c n -> n
    com.baidu.tts.f.c o -> o
    com.baidu.tts.f.c p -> p
    com.baidu.tts.f.c q -> q
    com.baidu.tts.f.c r -> r
    com.baidu.tts.f.c s -> s
    com.baidu.tts.f.c t -> t
    com.baidu.tts.f.c u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    com.baidu.tts.f.c[] x -> x
    com.baidu.tts.f.c[] values() -> values
    com.baidu.tts.f.c valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String a() -> a
    com.baidu.tts.f.c a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.f.d -> com.baidu.tts.f.d:
    com.baidu.tts.f.d a -> a
    com.baidu.tts.f.d b -> b
    com.baidu.tts.f.d c -> c
    com.baidu.tts.f.d d -> d
    com.baidu.tts.f.d e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    com.baidu.tts.f.d[] h -> h
    com.baidu.tts.f.d[] values() -> values
    com.baidu.tts.f.d valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String a() -> a
    java.lang.String b() -> b
    com.baidu.tts.f.d a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.f.e -> com.baidu.tts.f.e:
    com.baidu.tts.f.e a -> a
    com.baidu.tts.f.e b -> b
    com.baidu.tts.f.e c -> c
    com.baidu.tts.f.e d -> d
    com.baidu.tts.f.e e -> e
    com.baidu.tts.f.e f -> f
    com.baidu.tts.f.e g -> g
    com.baidu.tts.f.e[] h -> h
    com.baidu.tts.f.e[] values() -> values
    com.baidu.tts.f.e valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.tts.f.f -> com.baidu.tts.f.f:
    com.baidu.tts.f.f a -> a
    com.baidu.tts.f.f b -> b
    com.baidu.tts.f.f c -> c
    int d -> d
    java.lang.String e -> e
    com.baidu.tts.f.f[] f -> f
    com.baidu.tts.f.f[] values() -> values
    com.baidu.tts.f.f valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int a() -> a
    void <clinit>() -> <clinit>
com.baidu.tts.f.g -> com.baidu.tts.f.g:
    com.baidu.tts.f.g a -> a
    com.baidu.tts.f.g b -> b
    com.baidu.tts.f.g c -> c
    com.baidu.tts.f.g d -> d
    com.baidu.tts.f.g e -> e
    com.baidu.tts.f.g f -> f
    com.baidu.tts.f.g g -> g
    com.baidu.tts.f.g h -> h
    com.baidu.tts.f.g i -> i
    com.baidu.tts.f.g j -> j
    com.baidu.tts.f.g k -> k
    com.baidu.tts.f.g l -> l
    com.baidu.tts.f.g m -> m
    com.baidu.tts.f.g n -> n
    com.baidu.tts.f.g o -> o
    com.baidu.tts.f.g p -> p
    com.baidu.tts.f.g q -> q
    com.baidu.tts.f.g r -> r
    com.baidu.tts.f.g s -> s
    com.baidu.tts.f.g t -> t
    com.baidu.tts.f.g u -> u
    com.baidu.tts.f.g v -> v
    com.baidu.tts.f.g w -> w
    com.baidu.tts.f.g x -> x
    com.baidu.tts.f.g y -> y
    com.baidu.tts.f.g z -> z
    com.baidu.tts.f.g A -> A
    com.baidu.tts.f.g B -> B
    com.baidu.tts.f.g C -> C
    com.baidu.tts.f.g D -> D
    com.baidu.tts.f.g E -> E
    com.baidu.tts.f.g F -> F
    com.baidu.tts.f.g G -> G
    com.baidu.tts.f.g H -> H
    com.baidu.tts.f.g I -> I
    com.baidu.tts.f.g J -> J
    com.baidu.tts.f.g K -> K
    com.baidu.tts.f.g L -> L
    com.baidu.tts.f.g M -> M
    com.baidu.tts.f.g N -> N
    com.baidu.tts.f.g O -> O
    com.baidu.tts.f.g P -> P
    com.baidu.tts.f.g Q -> Q
    com.baidu.tts.f.g R -> R
    com.baidu.tts.f.g S -> S
    com.baidu.tts.f.g T -> T
    com.baidu.tts.f.g U -> U
    com.baidu.tts.f.g V -> V
    com.baidu.tts.f.g W -> W
    com.baidu.tts.f.g X -> X
    com.baidu.tts.f.g Y -> Y
    com.baidu.tts.f.g Z -> Z
    com.baidu.tts.f.g aa -> aa
    com.baidu.tts.f.g ab -> ab
    com.baidu.tts.f.g ac -> ac
    com.baidu.tts.f.g ad -> ad
    com.baidu.tts.f.g ae -> ae
    com.baidu.tts.f.g af -> af
    com.baidu.tts.f.g ag -> ag
    com.baidu.tts.f.g ah -> ah
    com.baidu.tts.f.g ai -> ai
    java.lang.String aj -> aj
    java.lang.String ak -> ak
    java.lang.String al -> al
    com.baidu.tts.f.g[] am -> am
    com.baidu.tts.f.g[] values() -> values
    com.baidu.tts.f.g valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String a(com.baidu.tts.f.g) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.f.h -> com.baidu.tts.f.h:
    com.baidu.tts.f.h a -> a
    com.baidu.tts.f.h b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    com.baidu.tts.f.h[] e -> e
    com.baidu.tts.f.h[] values() -> values
    com.baidu.tts.f.h valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String a() -> a
    com.baidu.tts.f.h a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.f.i -> com.baidu.tts.f.i:
    com.baidu.tts.f.i a -> a
    com.baidu.tts.f.i b -> b
    com.baidu.tts.f.i[] c -> c
    com.baidu.tts.f.i[] values() -> values
    com.baidu.tts.f.i valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean a(com.baidu.tts.f.i) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.f.j -> com.baidu.tts.f.j:
    com.baidu.tts.f.j a -> a
    com.baidu.tts.f.j b -> b
    com.baidu.tts.f.j c -> c
    com.baidu.tts.f.j d -> d
    com.baidu.tts.f.j[] e -> e
    com.baidu.tts.f.j[] values() -> values
    com.baidu.tts.f.j valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.tts.f.k -> com.baidu.tts.f.k:
    com.baidu.tts.f.k a -> a
    com.baidu.tts.f.k b -> b
    int c -> c
    java.lang.String d -> d
    com.baidu.tts.f.k[] e -> e
    com.baidu.tts.f.k[] values() -> values
    com.baidu.tts.f.k valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int a() -> a
    void <clinit>() -> <clinit>
com.baidu.tts.f.l -> com.baidu.tts.f.l:
    com.baidu.tts.f.l a -> a
    com.baidu.tts.f.l b -> b
    com.baidu.tts.f.l c -> c
    long d -> d
    long e -> e
    com.baidu.tts.f.l[] f -> f
    com.baidu.tts.f.l[] values() -> values
    com.baidu.tts.f.l valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,long,long) -> <init>
    long a() -> a
    int b() -> b
    void <clinit>() -> <clinit>
com.baidu.tts.f.m -> com.baidu.tts.f.m:
    com.baidu.tts.f.m a -> a
    com.baidu.tts.f.m b -> b
    com.baidu.tts.f.m c -> c
    int d -> d
    java.lang.String e -> e
    com.baidu.tts.f.m[] f -> f
    com.baidu.tts.f.m[] values() -> values
    com.baidu.tts.f.m valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int a() -> a
    java.lang.String b() -> b
    void <clinit>() -> <clinit>
com.baidu.tts.f.n -> com.baidu.tts.f.n:
    com.baidu.tts.f.n a -> a
    com.baidu.tts.f.n b -> b
    com.baidu.tts.f.n c -> c
    com.baidu.tts.f.n d -> d
    com.baidu.tts.f.n e -> e
    com.baidu.tts.f.n f -> f
    com.baidu.tts.f.n g -> g
    com.baidu.tts.f.n h -> h
    com.baidu.tts.f.n i -> i
    com.baidu.tts.f.n j -> j
    com.baidu.tts.f.n k -> k
    com.baidu.tts.f.n l -> l
    com.baidu.tts.f.n m -> m
    com.baidu.tts.f.n n -> n
    com.baidu.tts.f.n o -> o
    com.baidu.tts.f.n p -> p
    com.baidu.tts.f.n q -> q
    com.baidu.tts.f.n r -> r
    com.baidu.tts.f.n s -> s
    com.baidu.tts.f.n t -> t
    com.baidu.tts.f.n u -> u
    com.baidu.tts.f.n v -> v
    com.baidu.tts.f.n w -> w
    com.baidu.tts.f.n x -> x
    com.baidu.tts.f.n y -> y
    com.baidu.tts.f.n z -> z
    com.baidu.tts.f.n A -> A
    com.baidu.tts.f.n B -> B
    com.baidu.tts.f.n C -> C
    com.baidu.tts.f.n D -> D
    com.baidu.tts.f.n E -> E
    com.baidu.tts.f.n F -> F
    com.baidu.tts.f.n G -> G
    com.baidu.tts.f.n H -> H
    com.baidu.tts.f.n I -> I
    com.baidu.tts.f.n J -> J
    com.baidu.tts.f.n K -> K
    com.baidu.tts.f.n L -> L
    com.baidu.tts.f.n M -> M
    com.baidu.tts.f.n N -> N
    com.baidu.tts.f.n O -> O
    com.baidu.tts.f.n P -> P
    com.baidu.tts.f.n Q -> Q
    com.baidu.tts.f.n R -> R
    com.baidu.tts.f.n S -> S
    com.baidu.tts.f.n T -> T
    com.baidu.tts.f.n U -> U
    com.baidu.tts.f.n V -> V
    com.baidu.tts.f.n W -> W
    com.baidu.tts.f.n X -> X
    com.baidu.tts.f.n Y -> Y
    com.baidu.tts.f.n Z -> Z
    com.baidu.tts.f.n aa -> aa
    com.baidu.tts.f.n ab -> ab
    com.baidu.tts.f.n ac -> ac
    com.baidu.tts.f.n ad -> ad
    com.baidu.tts.f.n ae -> ae
    com.baidu.tts.f.n af -> af
    com.baidu.tts.f.n ag -> ag
    com.baidu.tts.f.n ah -> ah
    com.baidu.tts.f.n ai -> ai
    com.baidu.tts.f.n aj -> aj
    com.baidu.tts.f.n ak -> ak
    com.baidu.tts.f.n al -> al
    com.baidu.tts.f.n$a am -> am
    int an -> an
    java.lang.String ao -> ao
    com.baidu.tts.f.n[] ap -> ap
    com.baidu.tts.f.n[] values() -> values
    com.baidu.tts.f.n valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.baidu.tts.f.n$a,int,java.lang.String) -> <init>
    com.baidu.tts.f.n$a a() -> a
    int b() -> b
    java.lang.String c() -> c
    void <clinit>() -> <clinit>
com.baidu.tts.f.n$a -> com.baidu.tts.f.n$a:
    com.baidu.tts.f.n$a a -> a
    com.baidu.tts.f.n$a b -> b
    com.baidu.tts.f.n$a c -> c
    com.baidu.tts.f.n$a d -> d
    com.baidu.tts.f.n$a e -> e
    com.baidu.tts.f.n$a f -> f
    com.baidu.tts.f.n$a g -> g
    com.baidu.tts.f.n$a h -> h
    com.baidu.tts.f.n$a i -> i
    com.baidu.tts.f.n$a[] j -> j
    com.baidu.tts.f.n$a[] values() -> values
    com.baidu.tts.f.n$a valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.tts.f.o -> com.baidu.tts.f.o:
    com.baidu.tts.f.o a -> a
    com.baidu.tts.f.o b -> b
    com.baidu.tts.f.o c -> c
    java.lang.String d -> d
    com.baidu.tts.f.o[] e -> e
    com.baidu.tts.f.o[] values() -> values
    com.baidu.tts.f.o valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String a(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String,com.baidu.tts.f.o$1) -> <init>
    void <clinit>() -> <clinit>
com.baidu.tts.f.o$1 -> com.baidu.tts.f.o$1:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String b() -> b
com.baidu.tts.f.o$2 -> com.baidu.tts.f.o$2:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String b() -> b
com.baidu.tts.f.o$3 -> com.baidu.tts.f.o$3:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String b() -> b
com.baidu.tts.g.a.a -> com.baidu.tts.g.a.a:
    java.lang.String a -> a
    int b -> b
    void <init>(java.lang.String) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.baidu.tts.h.a.a -> com.baidu.tts.h.a.a:
    com.baidu.tts.f.n a -> a
    void <init>(com.baidu.tts.f.n) -> <init>
    com.baidu.tts.f.n a() -> a
com.baidu.tts.h.a.b -> com.baidu.tts.h.a.b:
    void <init>(com.baidu.tts.f.n) -> <init>
    int a(com.baidu.tts.aop.tts.TtsError) -> a
    java.lang.String b(com.baidu.tts.aop.tts.TtsError) -> b
com.baidu.tts.h.a.c -> com.baidu.tts.h.a.c:
    com.baidu.tts.h.a.c a -> a
    java.util.Hashtable b -> b
    void <init>() -> <init>
    com.baidu.tts.h.a.c a() -> a
    com.baidu.tts.h.a.b a(com.baidu.tts.f.n) -> a
    com.baidu.tts.aop.tts.TtsError b(com.baidu.tts.f.n) -> b
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.f.n,java.lang.Throwable) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.f.n,int) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.f.n,java.lang.String) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.f.n,int,java.lang.String) -> a
    com.baidu.tts.aop.tts.TtsError a(com.baidu.tts.f.n,int,java.lang.String,java.lang.Throwable) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.h.b.a -> com.baidu.tts.h.b.a:
    java.lang.ref.WeakReference a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    void <init>(java.lang.ref.WeakReference) -> <init>
    java.lang.String a() -> a
    java.lang.String b() -> b
    android.content.Context c() -> c
com.baidu.tts.h.b.b -> com.baidu.tts.h.b.b:
    com.baidu.tts.h.b.b a -> a
    java.util.Hashtable b -> b
    java.lang.ref.WeakReference c -> c
    java.util.Hashtable d -> d
    void <init>() -> <init>
    com.baidu.tts.h.b.b a() -> a
    com.baidu.tts.aop.tts.TtsError b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    com.baidu.tts.h.b.a a(java.lang.ref.WeakReference) -> a
    com.baidu.tts.h.b.a g() -> g
    android.content.Context h() -> h
    void a(android.content.Context) -> a
    java.lang.String a(java.lang.String) -> a
    java.lang.String i() -> i
    java.lang.String j() -> j
    void <clinit>() -> <clinit>
com.baidu.tts.i.a.a -> com.baidu.tts.i.a.a:
    int a -> a
    int b -> b
    boolean c -> c
    float d -> d
    void <init>() -> <init>
    int a() -> a
    void a(int) -> a
    int b() -> b
    void b(int) -> b
    boolean c() -> c
    void a(boolean) -> a
    float d() -> d
    void a(float) -> a
com.baidu.tts.i.a.b -> com.baidu.tts.i.a.b:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    void <init>() -> <init>
    void a(int) -> a
    void a() -> a
    void b() -> b
    void b(int) -> b
    int e() -> e
    int f() -> f
    boolean hasNext() -> hasNext
    com.baidu.tts.i.a.a c() -> c
    void remove() -> remove
    int d() -> d
    void c(int) -> c
    java.lang.Object next() -> next
com.baidu.tts.j.a -> com.baidu.tts.j.a:
    java.util.concurrent.locks.Lock d -> d
    java.util.concurrent.locks.Condition e -> e
    void <init>() -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    com.baidu.tts.aop.tts.TtsError g() -> g
    void A() -> A
    void h() -> h
    void c() -> c
    void i() -> i
    void d() -> d
    void j() -> j
    void e() -> e
    void k() -> k
    void f() -> f
    void l() -> l
    void a(com.baidu.tts.j.a$a) -> a
    void b(com.baidu.tts.j.a$a) -> b
    void B() -> B
    boolean C() -> C
    boolean m() -> m
    boolean n() -> n
com.baidu.tts.j.a$a -> com.baidu.tts.j.a$a:
    void a() -> a
com.baidu.tts.j.b -> com.baidu.tts.j.b:
    com.baidu.tts.aop.tts.TtsError b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
com.baidu.tts.jni.EmbeddedSynthesizerEngine -> com.baidu.tts.jni.EmbeddedSynthesizerEngine:
    java.lang.String TAG -> TAG
    com.baidu.tts.jni.EmbeddedSynthesizerEngine$OnNewDataListener mNewDataListener -> mNewDataListener
    void <init>() -> <init>
    void setOnNewDataListener(com.baidu.tts.jni.EmbeddedSynthesizerEngine$OnNewDataListener) -> setOnNewDataListener
    int newAudioDataCallback(byte[],int) -> newAudioDataCallback
    int bdTTSEngineInit(byte[],byte[],long[]) -> bdTTSEngineInit
    int bdTTSReInitData(byte[],long) -> bdTTSReInitData
    int bdTTSDomainDataInit(byte[],long) -> bdTTSDomainDataInit
    int bdTTSDomainDataUninit(long) -> bdTTSDomainDataUninit
    int bdTTSSetText(long,byte[],int) -> bdTTSSetText
    int bdTTSSetParam(long,int,long) -> bdTTSSetParam
    int bdTTSSetParamFloat(long,int,float) -> bdTTSSetParamFloat
    int bdTTSSynthesis(long,byte[],int) -> bdTTSSynthesis
    int bdTTSEngineUninit(long) -> bdTTSEngineUninit
    int bdTTSGetLicense(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> bdTTSGetLicense
    int bdTTSVerifyLicense(android.content.Context,java.lang.String,java.lang.String,java.lang.String,byte[]) -> bdTTSVerifyLicense
    int bdTTSGetTestAuthorize() -> bdTTSGetTestAuthorize
    int bdTTSVerifyDataFile(byte[]) -> bdTTSVerifyDataFile
    int bdTTSGetDataFileParam(byte[],int,byte[]) -> bdTTSGetDataFileParam
    java.lang.String bdTTSGetEngineParam() -> bdTTSGetEngineParam
    java.lang.String bdTTSGetDatParam(java.lang.String) -> bdTTSGetDatParam
    int loadEnglishEngine(byte[],byte[],long) -> loadEnglishEngine
    int getEngineMinVersion() -> getEngineMinVersion
    void <clinit>() -> <clinit>
com.baidu.tts.jni.EmbeddedSynthesizerEngine$OnNewDataListener -> com.baidu.tts.jni.EmbeddedSynthesizerEngine$OnNewDataListener:
    int onNewData(byte[],int) -> onNewData
com.baidu.tts.k.a -> com.baidu.tts.k.a:
    boolean g() -> g
com.baidu.tts.k.b -> com.baidu.tts.k.b:
com.baidu.tts.k.c -> com.baidu.tts.k.c:
    java.util.concurrent.ConcurrentMap a -> a
    void <init>() -> <init>
    com.baidu.tts.k.a a(com.baidu.tts.k.b) -> a
    com.baidu.tts.k.b b(com.baidu.tts.k.b) -> b
    void a() -> a
com.baidu.tts.l.a -> com.baidu.tts.l.a:
    android.content.Context a -> a
    com.baidu.tts.database.a b -> b
    com.baidu.tts.database.d c -> c
    com.baidu.tts.l.a.h d -> d
    com.baidu.tts.d.d e -> e
    void <init>(android.content.Context) -> <init>
    void g() -> g
    com.baidu.tts.client.model.BasicHandler a(com.baidu.tts.client.model.Conditions) -> a
    com.baidu.tts.client.model.BasicHandler a(com.baidu.tts.client.model.Conditions,boolean) -> a
    com.baidu.tts.client.model.LibEngineParams a() -> a
    com.baidu.tts.client.model.BasicHandler a(java.util.Set) -> a
    com.baidu.tts.client.model.BasicHandler b(java.util.Set) -> b
    com.baidu.tts.client.model.BasicHandler b() -> b
    java.lang.String a(java.lang.String,java.lang.String) -> a
    boolean a(java.lang.String) -> a
    boolean b(java.lang.String) -> b
    com.baidu.tts.client.model.DownloadHandler a(com.baidu.tts.d.b) -> a
    void c() -> c
    android.content.Context d() -> d
    com.baidu.tts.database.a e() -> e
    void c(java.lang.String) -> c
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
    java.util.Map f() -> f
    int a(int,int) -> a
com.baidu.tts.l.a.a -> com.baidu.tts.l.a.a:
    com.baidu.tts.aop.tts.TtsError a -> a
    com.baidu.tts.client.model.ModelBags b -> b
    void <init>() -> <init>
    com.baidu.tts.client.model.ModelBags a() -> a
    void onFailure(int,org.apache.http.Header[],java.lang.String,java.lang.Throwable) -> onFailure
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,org.json.JSONObject) -> onFailure
    void onSuccess(int,org.apache.http.Header[],org.json.JSONObject) -> onSuccess
com.baidu.tts.l.a.b -> com.baidu.tts.l.a.b:
    java.util.Set a -> a
    com.baidu.tts.database.a b -> b
    void <init>(com.baidu.tts.database.a,java.util.Set) -> <init>
    com.baidu.tts.client.model.ModelFileBags a() -> a
    java.lang.Object call() -> call
com.baidu.tts.l.a.c -> com.baidu.tts.l.a.c:
    com.baidu.tts.client.model.Conditions a -> a
    com.baidu.tts.database.a b -> b
    com.baidu.tts.l.a c -> c
    boolean d -> d
    void <init>(com.baidu.tts.database.a,com.baidu.tts.client.model.Conditions,com.baidu.tts.l.a,boolean) -> <init>
    com.baidu.tts.client.model.ModelBags a() -> a
    java.lang.Object call() -> call
com.baidu.tts.l.a.d -> com.baidu.tts.l.a.d:
    com.baidu.tts.aop.tts.TtsError a -> a
    com.baidu.tts.client.model.ModelFileBags b -> b
    void <init>() -> <init>
    com.baidu.tts.client.model.ModelFileBags a() -> a
    void onSuccess(int,org.apache.http.Header[],org.json.JSONObject) -> onSuccess
    void onFailure(int,org.apache.http.Header[],java.lang.String,java.lang.Throwable) -> onFailure
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,org.json.JSONObject) -> onFailure
com.baidu.tts.l.a.e -> com.baidu.tts.l.a.e:
    com.baidu.tts.loopj.RequestHandle a -> a
    void <init>() -> <init>
    com.baidu.tts.client.model.ModelBags a() -> a
    org.apache.http.entity.StringEntity b() -> b
    java.lang.Object call() -> call
com.baidu.tts.l.a.f -> com.baidu.tts.l.a.f:
    com.baidu.tts.loopj.RequestHandle a -> a
    java.util.Set b -> b
    void <init>(java.util.Set) -> <init>
    com.baidu.tts.client.model.ModelFileBags a() -> a
    org.apache.http.entity.StringEntity b() -> b
    java.lang.Object call() -> call
com.baidu.tts.l.a.g -> com.baidu.tts.l.a.g:
    com.baidu.tts.client.model.Conditions a -> a
    com.baidu.tts.loopj.RequestHandle b -> b
    void <init>(com.baidu.tts.client.model.Conditions) -> <init>
    com.baidu.tts.client.model.ModelBags a() -> a
    org.apache.http.entity.StringEntity b() -> b
    java.lang.Object call() -> call
com.baidu.tts.l.a.h -> com.baidu.tts.l.a.h:
    com.baidu.tts.l.a a -> a
    void <init>(com.baidu.tts.l.a) -> <init>
    com.baidu.tts.client.model.BasicHandler a(com.baidu.tts.client.model.Conditions) -> a
    com.baidu.tts.client.model.BasicHandler a(com.baidu.tts.client.model.Conditions,boolean) -> a
    com.baidu.tts.client.model.LibEngineParams a() -> a
    com.baidu.tts.client.model.BasicHandler a(java.util.Set) -> a
    com.baidu.tts.client.model.BasicHandler b(java.util.Set) -> b
    com.baidu.tts.client.model.BasicHandler b() -> b
com.baidu.tts.loopj.AsyncHttpClient -> com.baidu.tts.loopj.AsyncHttpClient:
    java.lang.String LOG_TAG -> LOG_TAG
    java.lang.String HEADER_CONTENT_TYPE -> HEADER_CONTENT_TYPE
    java.lang.String HEADER_CONTENT_RANGE -> HEADER_CONTENT_RANGE
    java.lang.String HEADER_CONTENT_ENCODING -> HEADER_CONTENT_ENCODING
    java.lang.String HEADER_CONTENT_DISPOSITION -> HEADER_CONTENT_DISPOSITION
    java.lang.String HEADER_ACCEPT_ENCODING -> HEADER_ACCEPT_ENCODING
    java.lang.String ENCODING_GZIP -> ENCODING_GZIP
    int DEFAULT_MAX_CONNECTIONS -> DEFAULT_MAX_CONNECTIONS
    int DEFAULT_SOCKET_TIMEOUT -> DEFAULT_SOCKET_TIMEOUT
    int DEFAULT_MAX_RETRIES -> DEFAULT_MAX_RETRIES
    int DEFAULT_RETRY_SLEEP_TIME_MILLIS -> DEFAULT_RETRY_SLEEP_TIME_MILLIS
    int DEFAULT_SOCKET_BUFFER_SIZE -> DEFAULT_SOCKET_BUFFER_SIZE
    int maxConnections -> maxConnections
    int connectTimeout -> connectTimeout
    int responseTimeout -> responseTimeout
    org.apache.http.impl.client.DefaultHttpClient httpClient -> httpClient
    org.apache.http.protocol.HttpContext httpContext -> httpContext
    java.util.concurrent.ExecutorService threadPool -> threadPool
    java.util.Map requestMap -> requestMap
    java.util.Map clientHeaderMap -> clientHeaderMap
    boolean isUrlEncodingEnabled -> isUrlEncodingEnabled
    com.baidu.tts.loopj.LogInterface log -> log
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void <init>(boolean,int,int) -> <init>
    org.apache.http.conn.scheme.SchemeRegistry getDefaultSchemeRegistry(boolean,int,int) -> getDefaultSchemeRegistry
    void <init>(org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    void allowRetryExceptionClass(java.lang.Class) -> allowRetryExceptionClass
    void blockRetryExceptionClass(java.lang.Class) -> blockRetryExceptionClass
    org.apache.http.client.HttpClient getHttpClient() -> getHttpClient
    org.apache.http.protocol.HttpContext getHttpContext() -> getHttpContext
    void setLoggingEnabled(boolean) -> setLoggingEnabled
    boolean isLoggingEnabled() -> isLoggingEnabled
    void setLoggingLevel(int) -> setLoggingLevel
    int getLoggingLevel() -> getLoggingLevel
    com.baidu.tts.loopj.LogInterface getLogInterface() -> getLogInterface
    void setLogInterface(com.baidu.tts.loopj.LogInterface) -> setLogInterface
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    void setThreadPool(java.util.concurrent.ExecutorService) -> setThreadPool
    java.util.concurrent.ExecutorService getThreadPool() -> getThreadPool
    java.util.concurrent.ExecutorService getDefaultThreadPool() -> getDefaultThreadPool
    org.apache.http.conn.ClientConnectionManager createConnectionManager(org.apache.http.conn.scheme.SchemeRegistry,org.apache.http.params.BasicHttpParams) -> createConnectionManager
    void setEnableRedirects(boolean,boolean,boolean) -> setEnableRedirects
    void setEnableRedirects(boolean,boolean) -> setEnableRedirects
    void setEnableRedirects(boolean) -> setEnableRedirects
    void setRedirectHandler(org.apache.http.client.RedirectHandler) -> setRedirectHandler
    void setUserAgent(java.lang.String) -> setUserAgent
    int getMaxConnections() -> getMaxConnections
    void setMaxConnections(int) -> setMaxConnections
    void setTimeout(int) -> setTimeout
    int getConnectTimeout() -> getConnectTimeout
    void setConnectTimeout(int) -> setConnectTimeout
    int getResponseTimeout() -> getResponseTimeout
    void setResponseTimeout(int) -> setResponseTimeout
    void setProxy(java.lang.String,int) -> setProxy
    void setProxy(java.lang.String,int,java.lang.String,java.lang.String) -> setProxy
    void setSSLSocketFactory(org.apache.http.conn.ssl.SSLSocketFactory) -> setSSLSocketFactory
    void setMaxRetriesAndTimeout(int,int) -> setMaxRetriesAndTimeout
    void removeAllHeaders() -> removeAllHeaders
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void removeHeader(java.lang.String) -> removeHeader
    void setBasicAuth(java.lang.String,java.lang.String) -> setBasicAuth
    void setBasicAuth(java.lang.String,java.lang.String,boolean) -> setBasicAuth
    void setBasicAuth(java.lang.String,java.lang.String,org.apache.http.auth.AuthScope) -> setBasicAuth
    void setBasicAuth(java.lang.String,java.lang.String,org.apache.http.auth.AuthScope,boolean) -> setBasicAuth
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    void setAuthenticationPreemptive(boolean) -> setAuthenticationPreemptive
    void clearCredentialsProvider() -> clearCredentialsProvider
    void cancelRequests(android.content.Context,boolean) -> cancelRequests
    void cancelRequests(java.util.List,boolean) -> cancelRequests
    void cancelAllRequests(boolean) -> cancelAllRequests
    void cancelRequestsByTAG(java.lang.Object,boolean) -> cancelRequestsByTAG
    com.baidu.tts.loopj.RequestHandle head(java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> head
    com.baidu.tts.loopj.RequestHandle head(java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> head
    com.baidu.tts.loopj.RequestHandle head(android.content.Context,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> head
    com.baidu.tts.loopj.RequestHandle head(android.content.Context,java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> head
    com.baidu.tts.loopj.RequestHandle head(android.content.Context,java.lang.String,org.apache.http.Header[],com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> head
    com.baidu.tts.loopj.RequestHandle get(java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> get
    com.baidu.tts.loopj.RequestHandle get(java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> get
    com.baidu.tts.loopj.RequestHandle get(android.content.Context,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> get
    com.baidu.tts.loopj.RequestHandle get(android.content.Context,java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> get
    com.baidu.tts.loopj.RequestHandle get(android.content.Context,java.lang.String,org.apache.http.Header[],com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> get
    com.baidu.tts.loopj.RequestHandle get(android.content.Context,java.lang.String,org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> get
    com.baidu.tts.loopj.RequestHandle post(java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> post
    com.baidu.tts.loopj.RequestHandle post(java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> post
    com.baidu.tts.loopj.RequestHandle post(android.content.Context,java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> post
    com.baidu.tts.loopj.RequestHandle post(android.content.Context,java.lang.String,org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> post
    com.baidu.tts.loopj.RequestHandle post(android.content.Context,java.lang.String,org.apache.http.Header[],com.baidu.tts.loopj.RequestParams,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> post
    com.baidu.tts.loopj.RequestHandle post(android.content.Context,java.lang.String,org.apache.http.Header[],org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> post
    com.baidu.tts.loopj.RequestHandle put(java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> put
    com.baidu.tts.loopj.RequestHandle put(java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> put
    com.baidu.tts.loopj.RequestHandle put(android.content.Context,java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> put
    com.baidu.tts.loopj.RequestHandle put(android.content.Context,java.lang.String,org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> put
    com.baidu.tts.loopj.RequestHandle put(android.content.Context,java.lang.String,org.apache.http.Header[],org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> put
    com.baidu.tts.loopj.RequestHandle patch(java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> patch
    com.baidu.tts.loopj.RequestHandle patch(java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> patch
    com.baidu.tts.loopj.RequestHandle patch(android.content.Context,java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> patch
    com.baidu.tts.loopj.RequestHandle patch(android.content.Context,java.lang.String,org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> patch
    com.baidu.tts.loopj.RequestHandle patch(android.content.Context,java.lang.String,org.apache.http.Header[],org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> patch
    com.baidu.tts.loopj.RequestHandle delete(java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> delete
    com.baidu.tts.loopj.RequestHandle delete(android.content.Context,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> delete
    com.baidu.tts.loopj.RequestHandle delete(android.content.Context,java.lang.String,org.apache.http.Header[],com.baidu.tts.loopj.ResponseHandlerInterface) -> delete
    void delete(java.lang.String,com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.AsyncHttpResponseHandler) -> delete
    com.baidu.tts.loopj.RequestHandle delete(android.content.Context,java.lang.String,org.apache.http.Header[],com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> delete
    com.baidu.tts.loopj.RequestHandle delete(android.content.Context,java.lang.String,org.apache.http.HttpEntity,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface) -> delete
    com.baidu.tts.loopj.AsyncHttpRequest newAsyncHttpRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface,android.content.Context) -> newAsyncHttpRequest
    com.baidu.tts.loopj.RequestHandle sendRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface,android.content.Context) -> sendRequest
    java.net.URI getURI(java.lang.String) -> getURI
    void setURLEncodingEnabled(boolean) -> setURLEncodingEnabled
    java.lang.String getUrlWithQueryString(boolean,java.lang.String,com.baidu.tts.loopj.RequestParams) -> getUrlWithQueryString
    boolean isInputStreamGZIPCompressed(java.io.PushbackInputStream) -> isInputStreamGZIPCompressed
    void silentCloseInputStream(java.io.InputStream) -> silentCloseInputStream
    void silentCloseOutputStream(java.io.OutputStream) -> silentCloseOutputStream
    org.apache.http.HttpEntity paramsToEntity(com.baidu.tts.loopj.RequestParams,com.baidu.tts.loopj.ResponseHandlerInterface) -> paramsToEntity
    boolean isUrlEncodingEnabled() -> isUrlEncodingEnabled
    org.apache.http.client.methods.HttpEntityEnclosingRequestBase addEntityToRequestBase(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,org.apache.http.HttpEntity) -> addEntityToRequestBase
    void endEntityViaReflection(org.apache.http.HttpEntity) -> endEntityViaReflection
    java.util.Map access$000(com.baidu.tts.loopj.AsyncHttpClient) -> access$000
    void access$100(com.baidu.tts.loopj.AsyncHttpClient,java.util.List,boolean) -> access$100
    void <clinit>() -> <clinit>
com.baidu.tts.loopj.AsyncHttpClient$1 -> com.baidu.tts.loopj.AsyncHttpClient$1:
    com.baidu.tts.loopj.AsyncHttpClient this$0 -> this$0
    void <init>(com.baidu.tts.loopj.AsyncHttpClient) -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.baidu.tts.loopj.AsyncHttpClient$2 -> com.baidu.tts.loopj.AsyncHttpClient$2:
    com.baidu.tts.loopj.AsyncHttpClient this$0 -> this$0
    void <init>(com.baidu.tts.loopj.AsyncHttpClient) -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.baidu.tts.loopj.AsyncHttpClient$3 -> com.baidu.tts.loopj.AsyncHttpClient$3:
    com.baidu.tts.loopj.AsyncHttpClient this$0 -> this$0
    void <init>(com.baidu.tts.loopj.AsyncHttpClient) -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.baidu.tts.loopj.AsyncHttpClient$4 -> com.baidu.tts.loopj.AsyncHttpClient$4:
    java.util.List val$requestList -> val$requestList
    boolean val$mayInterruptIfRunning -> val$mayInterruptIfRunning
    com.baidu.tts.loopj.AsyncHttpClient this$0 -> this$0
    void <init>(com.baidu.tts.loopj.AsyncHttpClient,java.util.List,boolean) -> <init>
    void run() -> run
com.baidu.tts.loopj.AsyncHttpClient$InflatingEntity -> com.baidu.tts.loopj.AsyncHttpClient$InflatingEntity:
    java.io.InputStream wrappedStream -> wrappedStream
    java.io.PushbackInputStream pushbackStream -> pushbackStream
    java.util.zip.GZIPInputStream gzippedStream -> gzippedStream
    void <init>(org.apache.http.HttpEntity) -> <init>
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    void consumeContent() -> consumeContent
com.baidu.tts.loopj.AsyncHttpRequest -> com.baidu.tts.loopj.AsyncHttpRequest:
    org.apache.http.impl.client.AbstractHttpClient client -> client
    org.apache.http.protocol.HttpContext context -> context
    org.apache.http.client.methods.HttpUriRequest request -> request
    com.baidu.tts.loopj.ResponseHandlerInterface responseHandler -> responseHandler
    int executionCount -> executionCount
    java.util.concurrent.atomic.AtomicBoolean isCancelled -> isCancelled
    boolean cancelIsNotified -> cancelIsNotified
    boolean isFinished -> isFinished
    boolean isRequestPreProcessed -> isRequestPreProcessed
    void <init>(org.apache.http.impl.client.AbstractHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,com.baidu.tts.loopj.ResponseHandlerInterface) -> <init>
    void onPreProcessRequest(com.baidu.tts.loopj.AsyncHttpRequest) -> onPreProcessRequest
    void onPostProcessRequest(com.baidu.tts.loopj.AsyncHttpRequest) -> onPostProcessRequest
    void run() -> run
    void makeRequest() -> makeRequest
    void makeRequestWithRetries() -> makeRequestWithRetries
    boolean isCancelled() -> isCancelled
    void sendCancelNotification() -> sendCancelNotification
    boolean isDone() -> isDone
    boolean cancel(boolean) -> cancel
    com.baidu.tts.loopj.AsyncHttpRequest setRequestTag(java.lang.Object) -> setRequestTag
    java.lang.Object getTag() -> getTag
com.baidu.tts.loopj.AsyncHttpResponseHandler -> com.baidu.tts.loopj.AsyncHttpResponseHandler:
    java.lang.String LOG_TAG -> LOG_TAG
    int SUCCESS_MESSAGE -> SUCCESS_MESSAGE
    int FAILURE_MESSAGE -> FAILURE_MESSAGE
    int START_MESSAGE -> START_MESSAGE
    int FINISH_MESSAGE -> FINISH_MESSAGE
    int PROGRESS_MESSAGE -> PROGRESS_MESSAGE
    int RETRY_MESSAGE -> RETRY_MESSAGE
    int CANCEL_MESSAGE -> CANCEL_MESSAGE
    int BUFFER_SIZE -> BUFFER_SIZE
    java.lang.String DEFAULT_CHARSET -> DEFAULT_CHARSET
    java.lang.String UTF8_BOM -> UTF8_BOM
    java.lang.String responseCharset -> responseCharset
    android.os.Handler handler -> handler
    boolean useSynchronousMode -> useSynchronousMode
    boolean usePoolThread -> usePoolThread
    java.net.URI requestURI -> requestURI
    org.apache.http.Header[] requestHeaders -> requestHeaders
    android.os.Looper looper -> looper
    java.lang.ref.WeakReference TAG -> TAG
    void <init>() -> <init>
    void <init>(android.os.Looper) -> <init>
    void <init>(boolean) -> <init>
    void setTag(java.lang.Object) -> setTag
    java.lang.Object getTag() -> getTag
    java.net.URI getRequestURI() -> getRequestURI
    org.apache.http.Header[] getRequestHeaders() -> getRequestHeaders
    void setRequestURI(java.net.URI) -> setRequestURI
    void setRequestHeaders(org.apache.http.Header[]) -> setRequestHeaders
    boolean getUseSynchronousMode() -> getUseSynchronousMode
    void setUseSynchronousMode(boolean) -> setUseSynchronousMode
    boolean getUsePoolThread() -> getUsePoolThread
    void setUsePoolThread(boolean) -> setUsePoolThread
    void setCharset(java.lang.String) -> setCharset
    java.lang.String getCharset() -> getCharset
    void onProgress(long,long) -> onProgress
    void onStart() -> onStart
    void onFinish() -> onFinish
    void onPreProcessResponse(com.baidu.tts.loopj.ResponseHandlerInterface,org.apache.http.HttpResponse) -> onPreProcessResponse
    void onPostProcessResponse(com.baidu.tts.loopj.ResponseHandlerInterface,org.apache.http.HttpResponse) -> onPostProcessResponse
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
    void onRetry(int) -> onRetry
    void onCancel() -> onCancel
    void onUserException(java.lang.Throwable) -> onUserException
    void sendProgressMessage(long,long) -> sendProgressMessage
    void sendSuccessMessage(int,org.apache.http.Header[],byte[]) -> sendSuccessMessage
    void sendFailureMessage(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> sendFailureMessage
    void sendStartMessage() -> sendStartMessage
    void sendFinishMessage() -> sendFinishMessage
    void sendRetryMessage(int) -> sendRetryMessage
    void sendCancelMessage() -> sendCancelMessage
    void handleMessage(android.os.Message) -> handleMessage
    void sendMessage(android.os.Message) -> sendMessage
    void postRunnable(java.lang.Runnable) -> postRunnable
    android.os.Message obtainMessage(int,java.lang.Object) -> obtainMessage
    void sendResponseMessage(org.apache.http.HttpResponse) -> sendResponseMessage
    byte[] getResponseData(org.apache.http.HttpEntity) -> getResponseData
com.baidu.tts.loopj.AsyncHttpResponseHandler$ResponderHandler -> com.baidu.tts.loopj.AsyncHttpResponseHandler$ResponderHandler:
    com.baidu.tts.loopj.AsyncHttpResponseHandler mResponder -> mResponder
    void <init>(com.baidu.tts.loopj.AsyncHttpResponseHandler,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.tts.loopj.Base64 -> com.baidu.tts.loopj.Base64:
    int DEFAULT -> DEFAULT
    int NO_PADDING -> NO_PADDING
    int NO_WRAP -> NO_WRAP
    int CRLF -> CRLF
    int URL_SAFE -> URL_SAFE
    int NO_CLOSE -> NO_CLOSE
    byte[] decode(java.lang.String,int) -> decode
    byte[] decode(byte[],int) -> decode
    byte[] decode(byte[],int,int,int) -> decode
    java.lang.String encodeToString(byte[],int) -> encodeToString
    java.lang.String encodeToString(byte[],int,int,int) -> encodeToString
    byte[] encode(byte[],int) -> encode
    byte[] encode(byte[],int,int,int) -> encode
    void <init>() -> <init>
com.baidu.tts.loopj.Base64$Coder -> com.baidu.tts.loopj.Base64$Coder:
    byte[] output -> output
    int op -> op
    void <init>() -> <init>
    boolean process(byte[],int,int,boolean) -> process
    int maxOutputSize(int) -> maxOutputSize
com.baidu.tts.loopj.Base64$Decoder -> com.baidu.tts.loopj.Base64$Decoder:
    int[] DECODE -> DECODE
    int[] DECODE_WEBSAFE -> DECODE_WEBSAFE
    int SKIP -> SKIP
    int EQUALS -> EQUALS
    int state -> state
    int value -> value
    int[] alphabet -> alphabet
    void <init>(int,byte[]) -> <init>
    int maxOutputSize(int) -> maxOutputSize
    boolean process(byte[],int,int,boolean) -> process
    void <clinit>() -> <clinit>
com.baidu.tts.loopj.Base64$Encoder -> com.baidu.tts.loopj.Base64$Encoder:
    int LINE_GROUPS -> LINE_GROUPS
    byte[] ENCODE -> ENCODE
    byte[] ENCODE_WEBSAFE -> ENCODE_WEBSAFE
    byte[] tail -> tail
    int tailLen -> tailLen
    int count -> count
    boolean do_padding -> do_padding
    boolean do_newline -> do_newline
    boolean do_cr -> do_cr
    byte[] alphabet -> alphabet
    void <init>(int,byte[]) -> <init>
    int maxOutputSize(int) -> maxOutputSize
    boolean process(byte[],int,int,boolean) -> process
    void <clinit>() -> <clinit>
com.baidu.tts.loopj.Base64DataException -> com.baidu.tts.loopj.Base64DataException:
    void <init>(java.lang.String) -> <init>
com.baidu.tts.loopj.Base64OutputStream -> com.baidu.tts.loopj.Base64OutputStream:
    com.baidu.tts.loopj.Base64$Coder coder -> coder
    int flags -> flags
    byte[] buffer -> buffer
    int bpos -> bpos
    byte[] EMPTY -> EMPTY
    void <init>(java.io.OutputStream,int) -> <init>
    void <init>(java.io.OutputStream,int,boolean) -> <init>
    void write(int) -> write
    void flushBuffer() -> flushBuffer
    void write(byte[],int,int) -> write
    void close() -> close
    void internalWrite(byte[],int,int,boolean) -> internalWrite
    byte[] embiggen(byte[],int) -> embiggen
    void <clinit>() -> <clinit>
com.baidu.tts.loopj.BaseJsonHttpResponseHandler -> com.baidu.tts.loopj.BaseJsonHttpResponseHandler:
    java.lang.String LOG_TAG -> LOG_TAG
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void onSuccess(int,org.apache.http.Header[],java.lang.String,java.lang.Object) -> onSuccess
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,java.lang.String,java.lang.Object) -> onFailure
    void onSuccess(int,org.apache.http.Header[],java.lang.String) -> onSuccess
    void onFailure(int,org.apache.http.Header[],java.lang.String,java.lang.Throwable) -> onFailure
    java.lang.Object parseResponse(java.lang.String,boolean) -> parseResponse
com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1 -> com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1:
    java.lang.String val$responseString -> val$responseString
    int val$statusCode -> val$statusCode
    org.apache.http.Header[] val$headers -> val$headers
    com.baidu.tts.loopj.BaseJsonHttpResponseHandler this$0 -> this$0
    void <init>(com.baidu.tts.loopj.BaseJsonHttpResponseHandler,java.lang.String,int,org.apache.http.Header[]) -> <init>
    void run() -> run
com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1$1 -> com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1$1:
    java.lang.Object val$jsonResponse -> val$jsonResponse
    com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1,java.lang.Object) -> <init>
    void run() -> run
com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1$2 -> com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1$2:
    java.lang.Throwable val$t -> val$t
    com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.BaseJsonHttpResponseHandler$1,java.lang.Throwable) -> <init>
    void run() -> run
com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2 -> com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2:
    java.lang.String val$responseString -> val$responseString
    int val$statusCode -> val$statusCode
    org.apache.http.Header[] val$headers -> val$headers
    java.lang.Throwable val$throwable -> val$throwable
    com.baidu.tts.loopj.BaseJsonHttpResponseHandler this$0 -> this$0
    void <init>(com.baidu.tts.loopj.BaseJsonHttpResponseHandler,java.lang.String,int,org.apache.http.Header[],java.lang.Throwable) -> <init>
    void run() -> run
com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2$1 -> com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2$1:
    java.lang.Object val$jsonResponse -> val$jsonResponse
    com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2,java.lang.Object) -> <init>
    void run() -> run
com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2$2 -> com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2$2:
    com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.BaseJsonHttpResponseHandler$2) -> <init>
    void run() -> run
com.baidu.tts.loopj.BinaryHttpResponseHandler -> com.baidu.tts.loopj.BinaryHttpResponseHandler:
    java.lang.String LOG_TAG -> LOG_TAG
    java.lang.String[] mAllowedContentTypes -> mAllowedContentTypes
    java.lang.String[] getAllowedContentTypes() -> getAllowedContentTypes
    void <init>() -> <init>
    void <init>(java.lang.String[]) -> <init>
    void <init>(java.lang.String[],android.os.Looper) -> <init>
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
    void sendResponseMessage(org.apache.http.HttpResponse) -> sendResponseMessage
com.baidu.tts.loopj.BlackholeHttpResponseHandler -> com.baidu.tts.loopj.BlackholeHttpResponseHandler:
    void <init>() -> <init>
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
    void onProgress(long,long) -> onProgress
    void onCancel() -> onCancel
    void onFinish() -> onFinish
    void onPostProcessResponse(com.baidu.tts.loopj.ResponseHandlerInterface,org.apache.http.HttpResponse) -> onPostProcessResponse
    void onPreProcessResponse(com.baidu.tts.loopj.ResponseHandlerInterface,org.apache.http.HttpResponse) -> onPreProcessResponse
    void onRetry(int) -> onRetry
    void onStart() -> onStart
    void onUserException(java.lang.Throwable) -> onUserException
com.baidu.tts.loopj.DataAsyncHttpResponseHandler -> com.baidu.tts.loopj.DataAsyncHttpResponseHandler:
    java.lang.String LOG_TAG -> LOG_TAG
    int PROGRESS_DATA_MESSAGE -> PROGRESS_DATA_MESSAGE
    void <init>() -> <init>
    void onProgressData(byte[]) -> onProgressData
    void sendProgressDataMessage(byte[]) -> sendProgressDataMessage
    void handleMessage(android.os.Message) -> handleMessage
    byte[] getResponseData(org.apache.http.HttpEntity) -> getResponseData
    byte[] copyOfRange(byte[],int,int) -> copyOfRange
com.baidu.tts.loopj.FileAsyncHttpResponseHandler -> com.baidu.tts.loopj.FileAsyncHttpResponseHandler:
    java.io.File file -> file
    boolean append -> append
    boolean renameIfExists -> renameIfExists
    java.io.File frontendFile -> frontendFile
    java.lang.String LOG_TAG -> LOG_TAG
    void <init>(java.io.File) -> <init>
    void <init>(java.io.File,boolean) -> <init>
    void <init>(java.io.File,boolean,boolean) -> <init>
    void <init>(android.content.Context) -> <init>
    boolean deleteTargetFile() -> deleteTargetFile
    java.io.File getTemporaryFile(android.content.Context) -> getTemporaryFile
    java.io.File getOriginalFile() -> getOriginalFile
    java.io.File getTargetFile() -> getTargetFile
    java.io.File getTargetFileByParsingURL() -> getTargetFileByParsingURL
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,java.io.File) -> onFailure
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void onSuccess(int,org.apache.http.Header[],java.io.File) -> onSuccess
    byte[] getResponseData(org.apache.http.HttpEntity) -> getResponseData
com.baidu.tts.loopj.HttpDelete -> com.baidu.tts.loopj.HttpDelete:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
com.baidu.tts.loopj.HttpGet -> com.baidu.tts.loopj.HttpGet:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
com.baidu.tts.loopj.HttpPatch -> com.baidu.tts.loopj.HttpPatch:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
com.baidu.tts.loopj.JsonHttpResponseHandler -> com.baidu.tts.loopj.JsonHttpResponseHandler:
    java.lang.String LOG_TAG -> LOG_TAG
    boolean useRFC5179CompatibilityMode -> useRFC5179CompatibilityMode
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(boolean) -> <init>
    void <init>(java.lang.String,boolean) -> <init>
    void onSuccess(int,org.apache.http.Header[],org.json.JSONObject) -> onSuccess
    void onSuccess(int,org.apache.http.Header[],org.json.JSONArray) -> onSuccess
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,org.json.JSONObject) -> onFailure
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,org.json.JSONArray) -> onFailure
    void onFailure(int,org.apache.http.Header[],java.lang.String,java.lang.Throwable) -> onFailure
    void onSuccess(int,org.apache.http.Header[],java.lang.String) -> onSuccess
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
    java.lang.Object parseResponse(byte[]) -> parseResponse
    boolean isUseRFC5179CompatibilityMode() -> isUseRFC5179CompatibilityMode
    void setUseRFC5179CompatibilityMode(boolean) -> setUseRFC5179CompatibilityMode
    boolean access$000(com.baidu.tts.loopj.JsonHttpResponseHandler) -> access$000
com.baidu.tts.loopj.JsonHttpResponseHandler$1 -> com.baidu.tts.loopj.JsonHttpResponseHandler$1:
    byte[] val$responseBytes -> val$responseBytes
    int val$statusCode -> val$statusCode
    org.apache.http.Header[] val$headers -> val$headers
    com.baidu.tts.loopj.JsonHttpResponseHandler this$0 -> this$0
    void <init>(com.baidu.tts.loopj.JsonHttpResponseHandler,byte[],int,org.apache.http.Header[]) -> <init>
    void run() -> run
com.baidu.tts.loopj.JsonHttpResponseHandler$1$1 -> com.baidu.tts.loopj.JsonHttpResponseHandler$1$1:
    java.lang.Object val$jsonResponse -> val$jsonResponse
    com.baidu.tts.loopj.JsonHttpResponseHandler$1 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.JsonHttpResponseHandler$1,java.lang.Object) -> <init>
    void run() -> run
com.baidu.tts.loopj.JsonHttpResponseHandler$1$2 -> com.baidu.tts.loopj.JsonHttpResponseHandler$1$2:
    org.json.JSONException val$ex -> val$ex
    com.baidu.tts.loopj.JsonHttpResponseHandler$1 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.JsonHttpResponseHandler$1,org.json.JSONException) -> <init>
    void run() -> run
com.baidu.tts.loopj.JsonHttpResponseHandler$2 -> com.baidu.tts.loopj.JsonHttpResponseHandler$2:
    byte[] val$responseBytes -> val$responseBytes
    int val$statusCode -> val$statusCode
    org.apache.http.Header[] val$headers -> val$headers
    java.lang.Throwable val$throwable -> val$throwable
    com.baidu.tts.loopj.JsonHttpResponseHandler this$0 -> this$0
    void <init>(com.baidu.tts.loopj.JsonHttpResponseHandler,byte[],int,org.apache.http.Header[],java.lang.Throwable) -> <init>
    void run() -> run
com.baidu.tts.loopj.JsonHttpResponseHandler$2$1 -> com.baidu.tts.loopj.JsonHttpResponseHandler$2$1:
    java.lang.Object val$jsonResponse -> val$jsonResponse
    com.baidu.tts.loopj.JsonHttpResponseHandler$2 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.JsonHttpResponseHandler$2,java.lang.Object) -> <init>
    void run() -> run
com.baidu.tts.loopj.JsonHttpResponseHandler$2$2 -> com.baidu.tts.loopj.JsonHttpResponseHandler$2$2:
    org.json.JSONException val$ex -> val$ex
    com.baidu.tts.loopj.JsonHttpResponseHandler$2 this$1 -> this$1
    void <init>(com.baidu.tts.loopj.JsonHttpResponseHandler$2,org.json.JSONException) -> <init>
    void run() -> run
com.baidu.tts.loopj.JsonStreamerEntity -> com.baidu.tts.loopj.JsonStreamerEntity:
    java.lang.String LOG_TAG -> LOG_TAG
    java.lang.UnsupportedOperationException ERR_UNSUPPORTED -> ERR_UNSUPPORTED
    int BUFFER_SIZE -> BUFFER_SIZE
    byte[] buffer -> buffer
    byte[] JSON_TRUE -> JSON_TRUE
    byte[] JSON_FALSE -> JSON_FALSE
    byte[] JSON_NULL -> JSON_NULL
    byte[] STREAM_NAME -> STREAM_NAME
    byte[] STREAM_TYPE -> STREAM_TYPE
    byte[] STREAM_CONTENTS -> STREAM_CONTENTS
    org.apache.http.Header HEADER_JSON_CONTENT -> HEADER_JSON_CONTENT
    org.apache.http.Header HEADER_GZIP_ENCODING -> HEADER_GZIP_ENCODING
    java.util.Map jsonParams -> jsonParams
    org.apache.http.Header contentEncoding -> contentEncoding
    byte[] elapsedField -> elapsedField
    com.baidu.tts.loopj.ResponseHandlerInterface progressHandler -> progressHandler
    void <init>(com.baidu.tts.loopj.ResponseHandlerInterface,boolean,java.lang.String) -> <init>
    void addPart(java.lang.String,java.lang.Object) -> addPart
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    org.apache.http.Header getContentType() -> getContentType
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    void writeToFromStream(java.io.OutputStream,com.baidu.tts.loopj.RequestParams$StreamWrapper) -> writeToFromStream
    void writeToFromFile(java.io.OutputStream,com.baidu.tts.loopj.RequestParams$FileWrapper) -> writeToFromFile
    void writeMetaData(java.io.OutputStream,java.lang.String,java.lang.String) -> writeMetaData
    void endMetaData(java.io.OutputStream) -> endMetaData
    byte[] escape(java.lang.String) -> escape
    void <clinit>() -> <clinit>
com.baidu.tts.loopj.JsonValueInterface -> com.baidu.tts.loopj.JsonValueInterface:
    byte[] getEscapedJsonValue() -> getEscapedJsonValue
com.baidu.tts.loopj.LogHandler -> com.baidu.tts.loopj.LogHandler:
    boolean mLoggingEnabled -> mLoggingEnabled
    int mLoggingLevel -> mLoggingLevel
    void <init>() -> <init>
    boolean isLoggingEnabled() -> isLoggingEnabled
    void setLoggingEnabled(boolean) -> setLoggingEnabled
    int getLoggingLevel() -> getLoggingLevel
    void setLoggingLevel(int) -> setLoggingLevel
    boolean shouldLog(int) -> shouldLog
    void log(int,java.lang.String,java.lang.String) -> log
    void logWithThrowable(int,java.lang.String,java.lang.String,java.lang.Throwable) -> logWithThrowable
    void checkedWtf(java.lang.String,java.lang.String,java.lang.Throwable) -> checkedWtf
    void v(java.lang.String,java.lang.String) -> v
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void i(java.lang.String,java.lang.String) -> i
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void wtf(java.lang.String,java.lang.String) -> wtf
    void wtf(java.lang.String,java.lang.String,java.lang.Throwable) -> wtf
com.baidu.tts.loopj.LogInterface -> com.baidu.tts.loopj.LogInterface:
    int VERBOSE -> VERBOSE
    int DEBUG -> DEBUG
    int INFO -> INFO
    int WARN -> WARN
    int ERROR -> ERROR
    int WTF -> WTF
    boolean isLoggingEnabled() -> isLoggingEnabled
    void setLoggingEnabled(boolean) -> setLoggingEnabled
    int getLoggingLevel() -> getLoggingLevel
    void setLoggingLevel(int) -> setLoggingLevel
    boolean shouldLog(int) -> shouldLog
    void v(java.lang.String,java.lang.String) -> v
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void i(java.lang.String,java.lang.String) -> i
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void wtf(java.lang.String,java.lang.String) -> wtf
    void wtf(java.lang.String,java.lang.String,java.lang.Throwable) -> wtf
com.baidu.tts.loopj.MyRedirectHandler -> com.baidu.tts.loopj.MyRedirectHandler:
    java.lang.String REDIRECT_LOCATIONS -> REDIRECT_LOCATIONS
    boolean enableRedirects -> enableRedirects
    void <init>(boolean) -> <init>
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
com.baidu.tts.loopj.MySSLSocketFactory -> com.baidu.tts.loopj.MySSLSocketFactory:
    javax.net.ssl.SSLContext sslContext -> sslContext
    void <init>(java.security.KeyStore) -> <init>
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
    void fixHttpsURLConnection() -> fixHttpsURLConnection
    java.security.KeyStore getKeystoreOfCA(java.io.InputStream) -> getKeystoreOfCA
    java.security.KeyStore getKeystore() -> getKeystore
    org.apache.http.conn.ssl.SSLSocketFactory getFixedSocketFactory() -> getFixedSocketFactory
    org.apache.http.impl.client.DefaultHttpClient getNewHttpClient(java.security.KeyStore) -> getNewHttpClient
com.baidu.tts.loopj.MySSLSocketFactory$1 -> com.baidu.tts.loopj.MySSLSocketFactory$1:
    com.baidu.tts.loopj.MySSLSocketFactory this$0 -> this$0
    void <init>(com.baidu.tts.loopj.MySSLSocketFactory) -> <init>
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.baidu.tts.loopj.PersistentCookieStore -> com.baidu.tts.loopj.PersistentCookieStore:
    java.lang.String LOG_TAG -> LOG_TAG
    java.lang.String COOKIE_PREFS -> COOKIE_PREFS
    java.lang.String COOKIE_NAME_STORE -> COOKIE_NAME_STORE
    java.lang.String COOKIE_NAME_PREFIX -> COOKIE_NAME_PREFIX
    boolean omitNonPersistentCookies -> omitNonPersistentCookies
    java.util.concurrent.ConcurrentHashMap cookies -> cookies
    android.content.SharedPreferences cookiePrefs -> cookiePrefs
    void <init>(android.content.Context) -> <init>
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void clear() -> clear
    boolean clearExpired(java.util.Date) -> clearExpired
    java.util.List getCookies() -> getCookies
    void setOmitNonPersistentCookies(boolean) -> setOmitNonPersistentCookies
    void deleteCookie(org.apache.http.cookie.Cookie) -> deleteCookie
    java.lang.String encodeCookie(com.baidu.tts.loopj.SerializableCookie) -> encodeCookie
    org.apache.http.cookie.Cookie decodeCookie(java.lang.String) -> decodeCookie
    java.lang.String byteArrayToHexString(byte[]) -> byteArrayToHexString
    byte[] hexStringToByteArray(java.lang.String) -> hexStringToByteArray
com.baidu.tts.loopj.PreemptiveAuthorizationHttpRequestInterceptor -> com.baidu.tts.loopj.PreemptiveAuthorizationHttpRequestInterceptor:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.baidu.tts.loopj.RangeFileAsyncHttpResponseHandler -> com.baidu.tts.loopj.RangeFileAsyncHttpResponseHandler:
    java.lang.String LOG_TAG -> LOG_TAG
    long current -> current
    boolean append -> append
    void <init>(java.io.File) -> <init>
    void sendResponseMessage(org.apache.http.HttpResponse) -> sendResponseMessage
    byte[] getResponseData(org.apache.http.HttpEntity) -> getResponseData
    void updateRequestHeaders(org.apache.http.client.methods.HttpUriRequest) -> updateRequestHeaders
com.baidu.tts.loopj.RequestHandle -> com.baidu.tts.loopj.RequestHandle:
    java.lang.ref.WeakReference request -> request
    void <init>(com.baidu.tts.loopj.AsyncHttpRequest) -> <init>
    boolean cancel(boolean) -> cancel
    boolean isFinished() -> isFinished
    boolean isCancelled() -> isCancelled
    boolean shouldBeGarbageCollected() -> shouldBeGarbageCollected
    com.baidu.tts.loopj.RequestHandle setTag(java.lang.Object) -> setTag
    java.lang.Object getTag() -> getTag
com.baidu.tts.loopj.RequestHandle$1 -> com.baidu.tts.loopj.RequestHandle$1:
    com.baidu.tts.loopj.AsyncHttpRequest val$_request -> val$_request
    boolean val$mayInterruptIfRunning -> val$mayInterruptIfRunning
    com.baidu.tts.loopj.RequestHandle this$0 -> this$0
    void <init>(com.baidu.tts.loopj.RequestHandle,com.baidu.tts.loopj.AsyncHttpRequest,boolean) -> <init>
    void run() -> run
com.baidu.tts.loopj.RequestParams -> com.baidu.tts.loopj.RequestParams:
    java.lang.String APPLICATION_OCTET_STREAM -> APPLICATION_OCTET_STREAM
    java.lang.String APPLICATION_JSON -> APPLICATION_JSON
    java.lang.String LOG_TAG -> LOG_TAG
    boolean isRepeatable -> isRepeatable
    boolean forceMultipartEntity -> forceMultipartEntity
    boolean useJsonStreamer -> useJsonStreamer
    java.lang.String elapsedFieldInJsonStreamer -> elapsedFieldInJsonStreamer
    boolean autoCloseInputStreams -> autoCloseInputStreams
    java.util.concurrent.ConcurrentHashMap urlParams -> urlParams
    java.util.concurrent.ConcurrentHashMap streamParams -> streamParams
    java.util.concurrent.ConcurrentHashMap fileParams -> fileParams
    java.util.concurrent.ConcurrentHashMap fileArrayParams -> fileArrayParams
    java.util.concurrent.ConcurrentHashMap urlParamsWithObjects -> urlParamsWithObjects
    java.lang.String contentEncoding -> contentEncoding
    void setContentEncoding(java.lang.String) -> setContentEncoding
    void setForceMultipartEntityContentType(boolean) -> setForceMultipartEntityContentType
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void put(java.lang.String,java.lang.String) -> put
    void put(java.lang.String,java.io.File[]) -> put
    void put(java.lang.String,java.io.File[],java.lang.String,java.lang.String) -> put
    void put(java.lang.String,java.io.File) -> put
    void put(java.lang.String,java.lang.String,java.io.File) -> put
    void put(java.lang.String,java.io.File,java.lang.String) -> put
    void put(java.lang.String,java.io.File,java.lang.String,java.lang.String) -> put
    void put(java.lang.String,java.io.InputStream) -> put
    void put(java.lang.String,java.io.InputStream,java.lang.String) -> put
    void put(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String) -> put
    void put(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,boolean) -> put
    void put(java.lang.String,java.lang.Object) -> put
    void put(java.lang.String,int) -> put
    void put(java.lang.String,long) -> put
    void add(java.lang.String,java.lang.String) -> add
    void remove(java.lang.String) -> remove
    boolean has(java.lang.String) -> has
    java.lang.String toString() -> toString
    void setHttpEntityIsRepeatable(boolean) -> setHttpEntityIsRepeatable
    void setUseJsonStreamer(boolean) -> setUseJsonStreamer
    void setElapsedFieldInJsonStreamer(java.lang.String) -> setElapsedFieldInJsonStreamer
    void setAutoCloseInputStreams(boolean) -> setAutoCloseInputStreams
    org.apache.http.HttpEntity getEntity(com.baidu.tts.loopj.ResponseHandlerInterface) -> getEntity
    org.apache.http.HttpEntity createJsonStreamerEntity(com.baidu.tts.loopj.ResponseHandlerInterface) -> createJsonStreamerEntity
    org.apache.http.HttpEntity createFormEntity() -> createFormEntity
    org.apache.http.HttpEntity createMultipartEntity(com.baidu.tts.loopj.ResponseHandlerInterface) -> createMultipartEntity
    java.util.List getParamsList() -> getParamsList
    java.util.List getParamsList(java.lang.String,java.lang.Object) -> getParamsList
    java.lang.String getParamString() -> getParamString
com.baidu.tts.loopj.RequestParams$1 -> com.baidu.tts.loopj.RequestParams$1:
    java.lang.String val$key -> val$key
    java.lang.String val$value -> val$value
    void <init>(java.lang.String,java.lang.String) -> <init>
com.baidu.tts.loopj.RequestParams$FileWrapper -> com.baidu.tts.loopj.RequestParams$FileWrapper:
    java.io.File file -> file
    java.lang.String contentType -> contentType
    java.lang.String customFileName -> customFileName
    void <init>(java.io.File,java.lang.String,java.lang.String) -> <init>
com.baidu.tts.loopj.RequestParams$StreamWrapper -> com.baidu.tts.loopj.RequestParams$StreamWrapper:
    java.io.InputStream inputStream -> inputStream
    java.lang.String name -> name
    java.lang.String contentType -> contentType
    boolean autoClose -> autoClose
    void <init>(java.io.InputStream,java.lang.String,java.lang.String,boolean) -> <init>
    com.baidu.tts.loopj.RequestParams$StreamWrapper newInstance(java.io.InputStream,java.lang.String,java.lang.String,boolean) -> newInstance
com.baidu.tts.loopj.ResponseHandlerInterface -> com.baidu.tts.loopj.ResponseHandlerInterface:
    void sendResponseMessage(org.apache.http.HttpResponse) -> sendResponseMessage
    void sendStartMessage() -> sendStartMessage
    void sendFinishMessage() -> sendFinishMessage
    void sendProgressMessage(long,long) -> sendProgressMessage
    void sendCancelMessage() -> sendCancelMessage
    void sendSuccessMessage(int,org.apache.http.Header[],byte[]) -> sendSuccessMessage
    void sendFailureMessage(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> sendFailureMessage
    void sendRetryMessage(int) -> sendRetryMessage
    java.net.URI getRequestURI() -> getRequestURI
    org.apache.http.Header[] getRequestHeaders() -> getRequestHeaders
    void setRequestURI(java.net.URI) -> setRequestURI
    void setRequestHeaders(org.apache.http.Header[]) -> setRequestHeaders
    void setUseSynchronousMode(boolean) -> setUseSynchronousMode
    boolean getUseSynchronousMode() -> getUseSynchronousMode
    void setUsePoolThread(boolean) -> setUsePoolThread
    boolean getUsePoolThread() -> getUsePoolThread
    void onPreProcessResponse(com.baidu.tts.loopj.ResponseHandlerInterface,org.apache.http.HttpResponse) -> onPreProcessResponse
    void onPostProcessResponse(com.baidu.tts.loopj.ResponseHandlerInterface,org.apache.http.HttpResponse) -> onPostProcessResponse
    void setTag(java.lang.Object) -> setTag
    java.lang.Object getTag() -> getTag
com.baidu.tts.loopj.RetryHandler -> com.baidu.tts.loopj.RetryHandler:
    java.util.HashSet exceptionWhitelist -> exceptionWhitelist
    java.util.HashSet exceptionBlacklist -> exceptionBlacklist
    int maxRetries -> maxRetries
    int retrySleepTimeMS -> retrySleepTimeMS
    void <init>(int,int) -> <init>
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
    void addClassToWhitelist(java.lang.Class) -> addClassToWhitelist
    void addClassToBlacklist(java.lang.Class) -> addClassToBlacklist
    boolean isInList(java.util.HashSet,java.lang.Throwable) -> isInList
    void <clinit>() -> <clinit>
com.baidu.tts.loopj.SaxAsyncHttpResponseHandler -> com.baidu.tts.loopj.SaxAsyncHttpResponseHandler:
    org.xml.sax.helpers.DefaultHandler handler -> handler
    java.lang.String LOG_TAG -> LOG_TAG
    void <init>(org.xml.sax.helpers.DefaultHandler) -> <init>
    byte[] getResponseData(org.apache.http.HttpEntity) -> getResponseData
    void onSuccess(int,org.apache.http.Header[],org.xml.sax.helpers.DefaultHandler) -> onSuccess
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void onFailure(int,org.apache.http.Header[],org.xml.sax.helpers.DefaultHandler) -> onFailure
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
com.baidu.tts.loopj.SerializableCookie -> com.baidu.tts.loopj.SerializableCookie:
    long serialVersionUID -> serialVersionUID
    org.apache.http.cookie.Cookie cookie -> cookie
    org.apache.http.impl.cookie.BasicClientCookie clientCookie -> clientCookie
    void <init>(org.apache.http.cookie.Cookie) -> <init>
    org.apache.http.cookie.Cookie getCookie() -> getCookie
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.baidu.tts.loopj.SimpleMultipartEntity -> com.baidu.tts.loopj.SimpleMultipartEntity:
    java.lang.String LOG_TAG -> LOG_TAG
    java.lang.String STR_CR_LF -> STR_CR_LF
    byte[] CR_LF -> CR_LF
    byte[] TRANSFER_ENCODING_BINARY -> TRANSFER_ENCODING_BINARY
    char[] MULTIPART_CHARS -> MULTIPART_CHARS
    java.lang.String boundary -> boundary
    byte[] boundaryLine -> boundaryLine
    byte[] boundaryEnd -> boundaryEnd
    boolean isRepeatable -> isRepeatable
    java.util.List fileParts -> fileParts
    java.io.ByteArrayOutputStream out -> out
    com.baidu.tts.loopj.ResponseHandlerInterface progressHandler -> progressHandler
    long bytesWritten -> bytesWritten
    long totalSize -> totalSize
    void <init>(com.baidu.tts.loopj.ResponseHandlerInterface) -> <init>
    void addPart(java.lang.String,java.lang.String,java.lang.String) -> addPart
    void addPartWithCharset(java.lang.String,java.lang.String,java.lang.String) -> addPartWithCharset
    void addPart(java.lang.String,java.lang.String) -> addPart
    void addPart(java.lang.String,java.io.File) -> addPart
    void addPart(java.lang.String,java.io.File,java.lang.String) -> addPart
    void addPart(java.lang.String,java.io.File,java.lang.String,java.lang.String) -> addPart
    void addPart(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String) -> addPart
    java.lang.String normalizeContentType(java.lang.String) -> normalizeContentType
    byte[] createContentType(java.lang.String) -> createContentType
    byte[] createContentDisposition(java.lang.String) -> createContentDisposition
    byte[] createContentDisposition(java.lang.String,java.lang.String) -> createContentDisposition
    void updateProgress(long) -> updateProgress
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    boolean isChunked() -> isChunked
    void setIsRepeatable(boolean) -> setIsRepeatable
    boolean isRepeatable() -> isRepeatable
    boolean isStreaming() -> isStreaming
    void writeTo(java.io.OutputStream) -> writeTo
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    byte[] access$000(com.baidu.tts.loopj.SimpleMultipartEntity) -> access$000
    byte[] access$100(com.baidu.tts.loopj.SimpleMultipartEntity,java.lang.String,java.lang.String) -> access$100
    byte[] access$200(com.baidu.tts.loopj.SimpleMultipartEntity,java.lang.String) -> access$200
    byte[] access$300() -> access$300
    byte[] access$400() -> access$400
    void access$500(com.baidu.tts.loopj.SimpleMultipartEntity,long) -> access$500
    void <clinit>() -> <clinit>
com.baidu.tts.loopj.SimpleMultipartEntity$FilePart -> com.baidu.tts.loopj.SimpleMultipartEntity$FilePart:
    java.io.File file -> file
    byte[] header -> header
    com.baidu.tts.loopj.SimpleMultipartEntity this$0 -> this$0
    void <init>(com.baidu.tts.loopj.SimpleMultipartEntity,java.lang.String,java.io.File,java.lang.String,java.lang.String) -> <init>
    void <init>(com.baidu.tts.loopj.SimpleMultipartEntity,java.lang.String,java.io.File,java.lang.String) -> <init>
    byte[] createHeader(java.lang.String,java.lang.String,java.lang.String) -> createHeader
    long getTotalLength() -> getTotalLength
    void writeTo(java.io.OutputStream) -> writeTo
com.baidu.tts.loopj.SyncHttpClient -> com.baidu.tts.loopj.SyncHttpClient:
    com.baidu.tts.loopj.RequestHandle mRequestHandle -> mRequestHandle
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void <init>(boolean,int,int) -> <init>
    void <init>(org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    com.baidu.tts.loopj.RequestHandle sendRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.baidu.tts.loopj.ResponseHandlerInterface,android.content.Context) -> sendRequest
    void stop() -> stop
com.baidu.tts.loopj.TextHttpResponseHandler -> com.baidu.tts.loopj.TextHttpResponseHandler:
    java.lang.String LOG_TAG -> LOG_TAG
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void onFailure(int,org.apache.http.Header[],java.lang.String,java.lang.Throwable) -> onFailure
    void onSuccess(int,org.apache.http.Header[],java.lang.String) -> onSuccess
    void onSuccess(int,org.apache.http.Header[],byte[]) -> onSuccess
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> onFailure
    java.lang.String getResponseString(byte[],java.lang.String) -> getResponseString
com.baidu.tts.loopj.Utils -> com.baidu.tts.loopj.Utils:
    void <init>() -> <init>
    void asserts(boolean,java.lang.String) -> asserts
    java.lang.Object notNull(java.lang.Object,java.lang.String) -> notNull
com.baidu.tts.loopj.package-info -> com.baidu.tts.loopj.package-info:
com.baidu.tts.m.a -> com.baidu.tts.m.a:
    com.baidu.tts.b.b.b.b$a a -> a
    void <init>() -> <init>
    com.baidu.tts.b.b.b.b$a a() -> a
    void a(int) -> a
com.baidu.tts.m.b -> com.baidu.tts.m.b:
    com.baidu.tts.b.a.b.f$b a -> a
    com.baidu.tts.b.a.b.e$b b -> b
    com.baidu.tts.f.j c -> c
    void <init>() -> <init>
    com.baidu.tts.b.a.b.f$b a() -> a
    com.baidu.tts.b.a.b.e$b b() -> b
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void c(java.lang.String) -> c
    int d(java.lang.String) -> d
    com.baidu.tts.f.j c() -> c
    void a(com.baidu.tts.f.j) -> a
com.baidu.tts.m.c -> com.baidu.tts.m.c:
    int a -> a
    int b -> b
    void <init>() -> <init>
    int g() -> g
    void a(int) -> a
    int h() -> h
    void a(java.lang.String) -> a
com.baidu.tts.m.d -> com.baidu.tts.m.d:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    com.baidu.tts.f.h d -> d
    com.baidu.tts.f.d e -> e
    java.lang.String f -> f
    void <init>() -> <init>
    java.lang.String p() -> p
    java.lang.String q() -> q
    void a(com.baidu.tts.f.d) -> a
    java.lang.String r() -> r
    void i(java.lang.String) -> i
    void j(java.lang.String) -> j
    java.lang.String s() -> s
    long t() -> t
    java.lang.String u() -> u
    void k(java.lang.String) -> k
    java.lang.String v() -> v
    void l(java.lang.String) -> l
    java.lang.String w() -> w
    void m(java.lang.String) -> m
    long x() -> x
    long y() -> y
    long z() -> z
com.baidu.tts.m.e -> com.baidu.tts.m.e:
    java.lang.String a -> a
    void <init>() -> <init>
    java.lang.String a() -> a
    void a(java.lang.String) -> a
com.baidu.tts.m.f -> com.baidu.tts.m.f:
    java.lang.String a -> a
    java.lang.String b -> b
    void <init>() -> <init>
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void b(java.lang.String) -> b
com.baidu.tts.m.g -> com.baidu.tts.m.g:
    java.lang.String a -> a
    java.lang.String b -> b
    void <init>() -> <init>
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void b(java.lang.String) -> b
com.baidu.tts.m.h -> com.baidu.tts.m.h:
    com.baidu.tts.f.e a -> a
    int b -> b
    int c -> c
    java.lang.String d -> d
    int e -> e
    int f -> f
    byte[] g -> g
    com.baidu.tts.f.a h -> h
    com.baidu.tts.m.i i -> i
    com.baidu.tts.aop.tts.TtsError j -> j
    void <init>() -> <init>
    int a() -> a
    void a(int) -> a
    void a(java.lang.String) -> a
    int b() -> b
    void b(int) -> b
    int c() -> c
    void c(int) -> c
    byte[] d() -> d
    void a(byte[]) -> a
    void d(int) -> d
    void a(com.baidu.tts.f.a) -> a
    com.baidu.tts.m.i e() -> e
    void a(com.baidu.tts.m.i) -> a
    com.baidu.tts.aop.tts.TtsError f() -> f
    void a(com.baidu.tts.aop.tts.TtsError) -> a
    com.baidu.tts.f.e g() -> g
    void a(com.baidu.tts.f.e) -> a
    com.baidu.tts.m.h b(com.baidu.tts.m.i) -> b
    com.baidu.tts.m.h b(com.baidu.tts.aop.tts.TtsError) -> b
    com.baidu.tts.m.h a(com.baidu.tts.m.i,com.baidu.tts.aop.tts.TtsError) -> a
com.baidu.tts.m.i -> com.baidu.tts.m.i:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    com.baidu.tts.f.i d -> d
    java.lang.String e -> e
    void <init>(java.lang.String,java.lang.String) -> <init>
    void a() -> a
    java.lang.String b() -> b
    void a(java.lang.String) -> a
    java.lang.String c() -> c
    void b(java.lang.String) -> b
    java.lang.String d() -> d
    void c(java.lang.String) -> c
    byte[] e() -> e
    java.lang.String f() -> f
    void d(java.lang.String) -> d
    com.baidu.tts.f.i g() -> g
    void a(com.baidu.tts.f.i) -> a
com.baidu.tts.m.j -> com.baidu.tts.m.j:
    com.baidu.tts.m.b a -> a
    com.baidu.tts.m.a b -> b
    void <init>() -> <init>
    com.baidu.tts.m.b a() -> a
    com.baidu.tts.m.a b() -> b
    com.baidu.tts.b.a.b.f$b c() -> c
    com.baidu.tts.b.a.b.e$b d() -> d
    com.baidu.tts.b.b.b.b$a e() -> e
    int a(com.baidu.tts.f.g,java.lang.String) -> a
    int b(com.baidu.tts.f.g,java.lang.String) -> b
com.baidu.tts.m.j$1 -> com.baidu.tts.m.j$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.n.a -> com.baidu.tts.n.a:
    void <init>() -> <init>
    java.lang.Object A() -> A
com.baidu.tts.n.b -> com.baidu.tts.n.b:
com.baidu.tts.o.a.a -> com.baidu.tts.o.a.a:
    com.baidu.tts.o.a.c a -> a
    void <init>(com.baidu.tts.o.a.c) -> <init>
    void setTtsListener(com.baidu.tts.aop.ttslistener.TtsListener) -> setTtsListener
    com.baidu.tts.aop.ttslistener.TtsListener getTtsListener() -> getTtsListener
    void setContext(android.content.Context) -> setContext
    void setMode(com.baidu.tts.f.m) -> setMode
    com.baidu.tts.f.m getMode() -> getMode
    com.baidu.tts.auth.AuthInfo auth(com.baidu.tts.f.m) -> auth
    int setParam(com.baidu.tts.f.g,java.lang.String) -> setParam
    com.baidu.tts.m.j getTtsParams() -> getTtsParams
    void a(com.baidu.tts.o.a.a) -> a
com.baidu.tts.o.a.b -> com.baidu.tts.o.a.b:
    void <init>(com.baidu.tts.o.a.c) -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void speak(com.baidu.tts.m.i) -> speak
    void synthesize(com.baidu.tts.m.i) -> synthesize
    int loadCustomResource(com.baidu.tts.m.e) -> loadCustomResource
    int freeCustomResource(com.baidu.tts.m.e) -> freeCustomResource
    int loadModel(com.baidu.tts.m.g) -> loadModel
    int loadEnglishModel(com.baidu.tts.m.f) -> loadEnglishModel
    int setStereoVolume(float,float) -> setStereoVolume
    int setAudioStreamType(int) -> setAudioStreamType
com.baidu.tts.o.a.c -> com.baidu.tts.o.a.c:
    com.baidu.tts.m.j b -> b
    com.baidu.tts.aop.ttslistener.TtsListener c -> c
    com.baidu.tts.f.m d -> d
    com.baidu.tts.a.c.c e -> e
    com.baidu.tts.o.a.a f -> f
    com.baidu.tts.o.a.d g -> g
    com.baidu.tts.o.a.b h -> h
    boolean a -> a
    void <init>() -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void setTtsListener(com.baidu.tts.aop.ttslistener.TtsListener) -> setTtsListener
    com.baidu.tts.aop.ttslistener.TtsListener getTtsListener() -> getTtsListener
    void setContext(android.content.Context) -> setContext
    void setMode(com.baidu.tts.f.m) -> setMode
    com.baidu.tts.f.m getMode() -> getMode
    com.baidu.tts.auth.AuthInfo auth(com.baidu.tts.f.m) -> auth
    int setParam(com.baidu.tts.f.g,java.lang.String) -> setParam
    void speak(com.baidu.tts.m.i) -> speak
    void synthesize(com.baidu.tts.m.i) -> synthesize
    int loadCustomResource(com.baidu.tts.m.e) -> loadCustomResource
    int freeCustomResource(com.baidu.tts.m.e) -> freeCustomResource
    int loadModel(com.baidu.tts.m.g) -> loadModel
    int loadEnglishModel(com.baidu.tts.m.f) -> loadEnglishModel
    int setStereoVolume(float,float) -> setStereoVolume
    int setAudioStreamType(int) -> setAudioStreamType
    com.baidu.tts.m.j getTtsParams() -> getTtsParams
    void a(com.baidu.tts.o.a.a) -> a
    com.baidu.tts.o.a.d a() -> a
    com.baidu.tts.o.a.b g() -> g
    com.baidu.tts.aop.tts.TtsError h() -> h
    void i() -> i
    void j() -> j
    void k() -> k
    void l() -> l
    void a(com.baidu.tts.aop.ttslistener.TtsListener) -> a
    com.baidu.tts.aop.ttslistener.TtsListener m() -> m
    void a(android.content.Context) -> a
    void a(com.baidu.tts.f.m) -> a
    com.baidu.tts.f.m n() -> n
    com.baidu.tts.auth.AuthInfo b(com.baidu.tts.f.m) -> b
    int a(com.baidu.tts.f.g,java.lang.String) -> a
    void a(com.baidu.tts.m.i) -> a
    void b(com.baidu.tts.m.i) -> b
    int a(com.baidu.tts.m.e) -> a
    int b(com.baidu.tts.m.e) -> b
    int a(com.baidu.tts.m.g) -> a
    int a(com.baidu.tts.m.f) -> a
    com.baidu.tts.m.j o() -> o
    int a(float,float) -> a
    int a(int) -> a
    int p() -> p
    void a(com.baidu.tts.aop.tts.TtsError) -> a
    void a(com.baidu.tts.m.h) -> a
    boolean q() -> q
    void <clinit>() -> <clinit>
com.baidu.tts.o.a.c$1 -> com.baidu.tts.o.a.c$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.tts.o.a.d -> com.baidu.tts.o.a.d:
    void <init>(com.baidu.tts.o.a.c) -> <init>
    com.baidu.tts.aop.tts.TtsError b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void speak(com.baidu.tts.m.i) -> speak
    void synthesize(com.baidu.tts.m.i) -> synthesize
    int loadCustomResource(com.baidu.tts.m.e) -> loadCustomResource
    int freeCustomResource(com.baidu.tts.m.e) -> freeCustomResource
    int loadModel(com.baidu.tts.m.g) -> loadModel
    int loadEnglishModel(com.baidu.tts.m.f) -> loadEnglishModel
    int setStereoVolume(float,float) -> setStereoVolume
    int setAudioStreamType(int) -> setAudioStreamType
com.baidu.tts.observer.receiver.NetworkChangeReceiver -> com.baidu.tts.observer.receiver.NetworkChangeReceiver:
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.tts.p.a -> com.baidu.tts.p.a:
    java.lang.String a(android.content.Context) -> a
    java.lang.String b(android.content.Context) -> b
com.baidu.tts.p.b -> com.baidu.tts.p.b:
    com.baidu.tts.p.c a -> a
    android.content.Context b -> b
    java.util.concurrent.FutureTask c -> c
    void <init>(android.content.Context) -> <init>
    void a() -> a
    void b() -> b
com.baidu.tts.p.c -> com.baidu.tts.p.c:
    android.content.Context b -> b
    com.baidu.tts.l.a c -> c
    java.util.concurrent.FutureTask d -> d
    int e -> e
    int f -> f
    java.util.concurrent.ExecutorService a -> a
    void <init>(android.content.Context) -> <init>
    java.util.concurrent.FutureTask a() -> a
    void b() -> b
    int a(com.baidu.tts.p.c) -> a
    int b(com.baidu.tts.p.c) -> b
    com.baidu.tts.l.a c(com.baidu.tts.p.c) -> c
    int a(com.baidu.tts.p.c,int) -> a
    int b(com.baidu.tts.p.c,int) -> b
    android.content.Context d(com.baidu.tts.p.c) -> d
com.baidu.tts.p.c$a -> com.baidu.tts.p.c$a:
    com.baidu.tts.loopj.RequestHandle b -> b
    com.baidu.tts.p.c a -> a
    void <init>(com.baidu.tts.p.c) -> <init>
    java.lang.Integer a() -> a
    org.apache.http.client.entity.UrlEncodedFormEntity b() -> b
    java.lang.Object call() -> call
com.baidu.tts.p.c$a$1 -> com.baidu.tts.p.c$a$1:
    int a -> a
    com.baidu.tts.p.c$a b -> b
    void <init>(com.baidu.tts.p.c$a,int) -> <init>
    void run() -> run
com.baidu.tts.p.d -> com.baidu.tts.p.d:
    com.baidu.tts.aop.tts.TtsError a -> a
    int b -> b
    void <init>() -> <init>
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,org.json.JSONObject) -> onFailure
    void onSuccess(int,org.apache.http.Header[],org.json.JSONObject) -> onSuccess
    int a() -> a
com.baidu.tts.q.a -> com.baidu.tts.q.a:
    void <init>() -> <init>
com.baidu.tts.tools.CommonUtility -> com.baidu.tts.tools.CommonUtility:
    void <init>() -> <init>
    java.lang.String generateSerialNumber() -> generateSerialNumber
    byte[] shortArrayToByteArray(short[]) -> shortArrayToByteArray
    int indexOf(byte[],byte[],int) -> indexOf
    int[] a(byte[]) -> a
    android.net.NetworkInfo getNetworkInfo(android.content.Context) -> getNetworkInfo
    boolean isNetworkConnected(android.content.Context) -> isNetworkConnected
    boolean isWifiConnected(android.content.Context) -> isWifiConnected
    byte[] copyBytesOfRange(byte[],int,int) -> copyBytesOfRange
    byte[] addCAFHeaderForPCMData(byte[]) -> addCAFHeaderForPCMData
com.baidu.tts.tools.DataTool -> com.baidu.tts.tools.DataTool:
    void <init>() -> <init>
    java.util.Set fromArrayToSet(java.lang.String[]) -> fromArrayToSet
    java.lang.String[] fromSetToArray(java.util.Set) -> fromSetToArray
    java.lang.String[] connect(java.lang.String[],java.lang.String[][]) -> connect
    java.util.Set copy(java.util.Set) -> copy
    boolean isSetEmpty(java.util.Set) -> isSetEmpty
    boolean isMapEmpty(java.util.Map) -> isMapEmpty
    boolean isListEmpty(java.util.List) -> isListEmpty
    java.util.Map getSuitItem(java.util.Map,boolean,int) -> getSuitItem
    java.util.Map getSuitItem(java.util.Map,java.lang.String,boolean,java.lang.String) -> getSuitItem
    void putMapItem(java.util.Map,java.lang.String,java.util.Map) -> putMapItem
    java.util.Map putIfAbsent(java.util.Map,java.lang.String) -> putIfAbsent
    void putMapValue(java.util.Map,java.lang.String,java.lang.String,java.lang.String) -> putMapValue
    java.lang.String getMapInnerValue(java.util.Map,java.lang.String,java.lang.String) -> getMapInnerValue
    java.lang.String getMapValue(java.util.Map,java.lang.String) -> getMapValue
    boolean isLong(java.lang.String) -> isLong
com.baidu.tts.tools.DateTool -> com.baidu.tts.tools.DateTool:
    void <init>() -> <init>
    java.lang.String simpleFormatCurrentDate() -> simpleFormatCurrentDate
    java.lang.String formatCurrentDate(java.lang.String) -> formatCurrentDate
    java.lang.String formatInChinaDate(long) -> formatInChinaDate
    java.lang.String formatInyyyyMMdd(long) -> formatInyyyyMMdd
    java.lang.String formatInHHmm(long) -> formatInHHmm
    java.lang.String format(long,java.lang.String) -> format
    java.lang.String format(java.util.Date,java.lang.String) -> format
    java.lang.String format(java.util.Calendar,java.lang.String) -> format
    java.lang.String format(java.lang.String,java.lang.String,java.lang.String) -> format
    java.util.Calendar getCalendar(java.lang.String,java.lang.String) -> getCalendar
    java.lang.String[] getDateRange(java.lang.String,java.lang.String,int) -> getDateRange
    java.util.Date getDate(java.lang.String,java.lang.String) -> getDate
com.baidu.tts.tools.FileTools -> com.baidu.tts.tools.FileTools:
    void <init>() -> <init>
    boolean isFileExist(java.lang.String) -> isFileExist
    boolean isFileExist(java.lang.Object[]) -> isFileExist
    java.lang.String jointPathAndName(java.lang.String,java.lang.String) -> jointPathAndName
    boolean deleteFile(java.lang.String) -> deleteFile
    boolean deleteFile(java.io.File) -> deleteFile
    boolean fileCopy(java.lang.String,java.lang.String) -> fileCopy
    boolean fileCopy(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fileCopy
    boolean fileCopy(java.io.FileDescriptor,java.io.FileDescriptor) -> fileCopy
    boolean fileCopy(java.io.File,java.io.File) -> fileCopy
    boolean fileCopy(java.io.FileInputStream,java.io.FileOutputStream) -> fileCopy
    boolean fileCopy(java.nio.channels.FileChannel,java.nio.channels.FileChannel) -> fileCopy
    boolean writeFile(java.lang.String,java.io.File) -> writeFile
    void createDir(java.lang.String) -> createDir
    java.lang.String extractFileName(java.lang.String) -> extractFileName
    java.io.File getFile(java.lang.String) -> getFile
    java.io.File getFile(java.lang.String,java.lang.String) -> getFile
    java.io.File createFile(java.lang.String) -> createFile
    java.io.File createFile(java.lang.String,java.lang.String) -> createFile
com.baidu.tts.tools.JsonTool -> com.baidu.tts.tools.JsonTool:
    void <init>() -> <init>
    org.json.JSONArray fromSetToJson(java.util.Set) -> fromSetToJson
    java.lang.String[] getStringarray(org.json.JSONArray) -> getStringarray
com.baidu.tts.tools.MD5 -> com.baidu.tts.tools.MD5:
    com.baidu.tts.tools.MD5 a -> a
    char[] b -> b
    void <init>() -> <init>
    com.baidu.tts.tools.MD5 getInstance() -> getInstance
    java.lang.String getMD5(byte[]) -> getMD5
    java.lang.String getBigFileMd5(java.io.File) -> getBigFileMd5
    java.lang.String getBigFileMd5(java.lang.String) -> getBigFileMd5
    java.lang.String getFileMd5(java.lang.String) -> getFileMd5
    java.lang.String a(byte[]) -> a
    java.lang.String a(byte[],int,int) -> a
    void a(byte,java.lang.StringBuffer) -> a
    void <clinit>() -> <clinit>
com.baidu.tts.tools.ReflectTool -> com.baidu.tts.tools.ReflectTool:
    void <init>() -> <init>
    java.lang.reflect.Method getSupportedMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getSupportedMethod
com.baidu.tts.tools.ResourceTools -> com.baidu.tts.tools.ResourceTools:
    int TEXT_LENGTH_LIMIT -> TEXT_LENGTH_LIMIT
    void <init>() -> <init>
    java.lang.String getAppFilesPath(android.content.Context) -> getAppFilesPath
    java.lang.String getModelFileAbsName(android.content.Context,java.lang.String) -> getModelFileAbsName
    java.lang.String getByteMapAbsName(android.content.Context,java.lang.String) -> getByteMapAbsName
    java.lang.String getAppFilesDirPath(android.content.Context) -> getAppFilesDirPath
    java.lang.String getSdcardFilesDirPath(android.content.Context) -> getSdcardFilesDirPath
    java.lang.String getDefaultResourcePath(android.content.Context,java.lang.String) -> getDefaultResourcePath
    com.baidu.tts.m.i format(java.lang.String,java.lang.String,com.baidu.tts.m.i) -> format
    com.baidu.tts.f.n isTextValid(java.lang.String) -> isTextValid
    byte[] stringToByteArrayAddNull(java.lang.String) -> stringToByteArrayAddNull
com.baidu.tts.tools.SqlTool -> com.baidu.tts.tools.SqlTool:
    void <init>() -> <init>
    java.lang.String sqlDropTable(java.lang.String) -> sqlDropTable
    java.lang.String sqlCreateTable(java.lang.String,java.lang.Object[]) -> sqlCreateTable
    java.lang.String a(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object) -> a
    java.lang.String a(java.lang.reflect.Method,java.lang.Object) -> a
    java.lang.String buildConditions(java.lang.String,java.lang.String[]) -> buildConditions
    java.lang.String buildInCondition(java.lang.String,java.lang.String[]) -> buildInCondition
    java.lang.String addPlaceholders(int) -> addPlaceholders
    java.lang.String[] getSQLformat(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[]) -> getSQLformat
com.baidu.tts.tools.StringTool -> com.baidu.tts.tools.StringTool:
    void <init>() -> <init>
    java.lang.String addDivider(java.util.List,java.lang.String) -> addDivider
    java.lang.String addDivider(int[],java.lang.String) -> addDivider
    boolean isEmpty(java.lang.String) -> isEmpty
    boolean isAllNumber(java.lang.String) -> isAllNumber
    boolean isEqual(java.lang.String,java.lang.String) -> isEqual
com.byc.wzry.ProcessConnection -> com.a.a.a:
com.byc.wzry.ProcessConnection$Stub -> com.a.a.b:
    void <init>() -> <init>
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.example.h3.Config -> com.example.h3.a:
    boolean bReg -> a
    java.lang.String RegCode -> b
    int screenWidth -> c
    int screenHeight -> d
    int currentapiVersion -> e
    int wv -> f
    java.lang.String new_version -> g
    java.lang.String contact -> h
    java.lang.String ad -> i
    java.lang.String download -> j
    java.lang.String homepage -> k
    java.lang.String warning -> l
    java.lang.String speaker -> m
    boolean bSpeaking -> n
    com.example.h3.Config current -> p
    android.content.SharedPreferences preferences -> q
    android.content.Context context -> r
    android.content.SharedPreferences$Editor editor -> o
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    com.example.h3.Config getConfig(android.content.Context) -> a
    boolean isFirstRun() -> a
    boolean getREG() -> b
    void setREG(boolean) -> a
    java.lang.String getRegCode() -> c
    void setRegCode(java.lang.String) -> a
    void setTestTime(int) -> a
    void setTestNum(int) -> b
    void setRunNum(int) -> c
    java.lang.String getPhoneIDFromHard() -> d
    java.lang.String getPhoneID() -> e
    void setPhoneID(java.lang.String) -> b
    java.lang.String getStartTestTime() -> f
    void setStartTestTime(java.lang.String) -> c
    void setCurrentStartTestTime() -> g
    int getDateInterval(java.lang.String,java.lang.String) -> a
    java.lang.String getSpeaker() -> h
    void setSpeaker(java.lang.String) -> d
    boolean getWhetherSpeaking() -> i
    void setWhetherSpeaking(boolean) -> b
com.example.h3.FloatingWindow -> com.example.h3.b:
    java.lang.String TAG -> a
    com.example.h3.FloatingWindow current -> b
    android.content.Context context -> c
    android.widget.LinearLayout mFloatLayout -> d
    android.view.WindowManager$LayoutParams wmParams -> e
    android.view.WindowManager mWindowManager -> f
    android.widget.Button mFbtMove -> g
    android.widget.Button mFbtGet -> h
    android.widget.Button mFbtRet -> i
    boolean bShow -> j
    util.SpeechUtil speaker -> k
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    com.example.h3.FloatingWindow getFloatingWindow(android.content.Context) -> a
    void ShowFloatingWindow() -> a
    void createFloatView() -> c
    void DestroyFloatingWindow() -> b
    android.view.WindowManager$LayoutParams access$0(com.example.h3.FloatingWindow) -> a
    android.widget.Button access$1(com.example.h3.FloatingWindow) -> b
    android.view.WindowManager access$2(com.example.h3.FloatingWindow) -> c
    android.widget.LinearLayout access$3(com.example.h3.FloatingWindow) -> d
    android.content.Context access$4(com.example.h3.FloatingWindow) -> e
    util.SpeechUtil access$5(com.example.h3.FloatingWindow) -> f
com.example.h3.FloatingWindow$1 -> com.example.h3.c:
    com.example.h3.FloatingWindow this$0 -> a
    void <init>(com.example.h3.FloatingWindow) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.example.h3.FloatingWindow$2 -> com.example.h3.d:
    com.example.h3.FloatingWindow this$0 -> a
    void <init>(com.example.h3.FloatingWindow) -> <init>
    void onClick(android.view.View) -> onClick
com.example.h3.FloatingWindow$3 -> com.example.h3.e:
    com.example.h3.FloatingWindow this$0 -> a
    void <init>(com.example.h3.FloatingWindow) -> <init>
    void onClick(android.view.View) -> onClick
com.example.h3.FlowRadioGroup -> com.example.h3.FlowRadioGroup:
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
com.example.h3.MainActivity -> com.example.h3.MainActivity:
    java.lang.String TAG -> g
    android.widget.TextView tvRegState -> a
    android.widget.TextView tvRegWarm -> b
    android.widget.TextView tvHomePage -> c
    android.widget.Button btReg -> d
    android.widget.Button btRunGame -> h
    android.widget.Button btStart -> i
    android.widget.EditText etRegCode -> e
    android.widget.TextView tvPlease -> f
    util.SpeechUtil speaker -> j
    android.widget.Button btClose -> k
    android.widget.Switch swNn -> l
    android.widget.Switch swPerspection -> m
    android.widget.Switch swCoolTime -> n
    android.widget.Switch swWinChance -> o
    android.widget.RadioGroup rgSelSoundMode -> p
    android.widget.RadioButton rbFemaleSound -> q
    android.widget.RadioButton rbMaleSound -> r
    android.widget.RadioButton rbSpecialMaleSound -> s
    android.widget.RadioButton rbMotionMaleSound -> t
    android.widget.RadioButton rbChildrenSound -> u
    android.widget.RadioButton rbCloseSound -> v
    com.example.h3.FloatingWindow fw -> w
    util.BackgroundMusic mBackgroundMusic -> x
    android.content.BroadcastReceiver qhbConnectReceiver -> y
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean openFloatWindow() -> e
    com.example.h3.Config getConfig() -> a
    com.example.h3.Sock getSock() -> b
    boolean OpenGame(java.lang.String,android.content.Context) -> a
    void InitWidgets() -> f
    void BindWidgets() -> g
    void SetWidgets() -> h
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
    void setMyTitle() -> c
    void showVerInfo(boolean) -> a
    void updateMeWarning(java.lang.String,java.lang.String) -> a
    void setAppToTestVersion() -> d
    void showUpdateDialog() -> i
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    java.lang.String access$0(com.example.h3.MainActivity) -> a
    util.SpeechUtil access$1(com.example.h3.MainActivity) -> b
    util.BackgroundMusic access$2(com.example.h3.MainActivity) -> c
    com.example.h3.FloatingWindow access$3(com.example.h3.MainActivity) -> d
com.example.h3.MainActivity$1 -> com.example.h3.f:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.example.h3.MainActivity$2 -> com.example.h3.g:
    com.example.h3.MainActivity this$0 -> a
    android.os.Handler val$handler -> b
    void <init>(com.example.h3.MainActivity,android.os.Handler) -> <init>
    void run() -> run
com.example.h3.MainActivity$3 -> com.example.h3.h:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onClick(android.view.View) -> onClick
com.example.h3.MainActivity$4 -> com.example.h3.i:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onClick(android.view.View) -> onClick
com.example.h3.MainActivity$5 -> com.example.h3.j:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onClick(android.view.View) -> onClick
com.example.h3.MainActivity$6 -> com.example.h3.k:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onClick(android.view.View) -> onClick
com.example.h3.MainActivity$7 -> com.example.h3.l:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.example.h3.MainActivity$8 -> com.example.h3.m:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.example.h3.MainActivity$9 -> com.example.h3.n:
    com.example.h3.MainActivity this$0 -> a
    void <init>(com.example.h3.MainActivity) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.example.h3.Sock -> com.example.h3.o:
    java.lang.String TAG -> c
    com.example.h3.Sock current -> d
    android.content.Context context -> e
    java.lang.String host -> f
    int port -> g
    java.net.Socket socket -> h
    byte[] buffer -> i
    java.lang.String appID -> j
    java.lang.String host2 -> k
    java.lang.String mPhoneID -> l
    int mTestTime -> m
    java.lang.String mSendData -> n
    java.lang.String mRecvData -> o
    java.lang.String mRegCode -> p
    com.example.h3.MainActivity mainAct -> q
    int iHandle -> a
    android.os.Handler HandlerSock -> b
    void <init>(android.content.Context) -> <init>
    com.example.h3.Sock getSock(android.content.Context) -> a
    com.example.h3.Config getConfig() -> a
    void RegStart(java.lang.String) -> a
    void VarifyStart() -> b
    java.lang.String access$0(com.example.h3.Sock) -> a
    void access$1(com.example.h3.Sock,int) -> a
    com.example.h3.MainActivity access$2(com.example.h3.Sock) -> b
    int access$3(com.example.h3.Sock) -> c
    java.lang.String access$4(com.example.h3.Sock) -> d
    android.content.Context access$5(com.example.h3.Sock) -> e
    java.lang.String access$6(com.example.h3.Sock) -> f
    void access$7(com.example.h3.Sock,java.net.Socket) -> a
    java.net.Socket access$8(com.example.h3.Sock) -> g
    java.lang.String access$9(com.example.h3.Sock) -> h
    int access$10(com.example.h3.Sock) -> i
    byte[] access$11(com.example.h3.Sock) -> j
    void access$12(com.example.h3.Sock,java.lang.String) -> a
com.example.h3.Sock$1 -> com.example.h3.p:
    com.example.h3.Sock this$0 -> a
    void <init>(com.example.h3.Sock) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.example.h3.Sock$SockThread -> com.example.h3.q:
    java.lang.String mSendStr -> a
    com.example.h3.Sock this$0 -> b
    void <init>(com.example.h3.Sock,java.lang.String) -> <init>
    void run() -> run
com.example.h3.job.WechatAccessibilityJob -> com.example.h3.a.a:
    com.example.h3.job.WechatAccessibilityJob current -> k
    util.SpeechUtil speaker -> l
    java.lang.String mPackageName -> m
    void <init>() -> <init>
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    com.example.h3.job.WechatAccessibilityJob getJob() -> j
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
com.example.h3.permission.AVCallFloatView -> com.example.h3.b.a:
    float xInView -> a
    float yInView -> b
    float xInScreen -> c
    float yInScreen -> d
    float xDownInScreen -> e
    float yDownInScreen -> f
    boolean isAnchoring -> g
    boolean isShowing -> h
    android.view.WindowManager windowManager -> i
    android.view.WindowManager$LayoutParams mParams -> j
    void setParams(android.view.WindowManager$LayoutParams) -> setParams
    void setIsShowing(boolean) -> setIsShowing
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void anchorToSide() -> a
    int dp2px(float) -> a
    void updateViewPosition() -> b
    android.view.WindowManager$LayoutParams access$0(com.example.h3.permission.AVCallFloatView) -> a
    void access$1(com.example.h3.permission.AVCallFloatView,boolean) -> a
    boolean access$2(com.example.h3.permission.AVCallFloatView) -> b
    android.view.WindowManager access$3(com.example.h3.permission.AVCallFloatView) -> c
com.example.h3.permission.AVCallFloatView$AnchorAnimRunnable -> com.example.h3.b.b:
    int animTime -> b
    long currentStartTime -> c
    android.view.animation.Interpolator interpolator -> d
    int xDistance -> e
    int yDistance -> f
    int startX -> g
    int startY -> h
    com.example.h3.permission.AVCallFloatView this$0 -> a
    void <init>(com.example.h3.permission.AVCallFloatView,int,int,int,long) -> <init>
    void run() -> run
com.example.h3.permission.FloatWindowManager -> com.example.h3.b.c:
    com.example.h3.permission.FloatWindowManager instance -> a
    boolean isWindowDismiss -> b
    android.view.WindowManager windowManager -> c
    android.view.WindowManager$LayoutParams mParams -> d
    com.example.h3.permission.AVCallFloatView floatView -> e
    android.app.Dialog dialog -> f
    void <init>() -> <init>
    com.example.h3.permission.FloatWindowManager getInstance() -> a
    boolean applyOrShowFloatWindow(android.content.Context) -> a
    boolean checkPermission(android.content.Context) -> b
    boolean huaweiPermissionCheck(android.content.Context) -> c
    boolean miuiPermissionCheck(android.content.Context) -> d
    boolean meizuPermissionCheck(android.content.Context) -> e
    boolean qikuPermissionCheck(android.content.Context) -> f
    boolean commonROMPermissionCheck(android.content.Context) -> g
    void applyPermission(android.content.Context) -> h
    void ROM360PermissionApply(android.content.Context) -> i
    void huaweiROMPermissionApply(android.content.Context) -> j
    void meizuROMPermissionApply(android.content.Context) -> k
    void miuiROMPermissionApply(android.content.Context) -> l
    void commonROMPermissionApply(android.content.Context) -> m
    void showConfirmDialog(android.content.Context,com.example.h3.permission.FloatWindowManager$OnConfirmResult) -> a
    void showConfirmDialog(android.content.Context,java.lang.String,com.example.h3.permission.FloatWindowManager$OnConfirmResult) -> a
com.example.h3.permission.FloatWindowManager$1 -> com.example.h3.b.d:
    com.example.h3.permission.FloatWindowManager this$0 -> a
    android.content.Context val$context -> b
    void <init>(com.example.h3.permission.FloatWindowManager,android.content.Context) -> <init>
    void confirmResult(boolean) -> a
com.example.h3.permission.FloatWindowManager$2 -> com.example.h3.b.e:
    com.example.h3.permission.FloatWindowManager this$0 -> a
    android.content.Context val$context -> b
    void <init>(com.example.h3.permission.FloatWindowManager,android.content.Context) -> <init>
    void confirmResult(boolean) -> a
com.example.h3.permission.FloatWindowManager$3 -> com.example.h3.b.f:
    com.example.h3.permission.FloatWindowManager this$0 -> a
    android.content.Context val$context -> b
    void <init>(com.example.h3.permission.FloatWindowManager,android.content.Context) -> <init>
    void confirmResult(boolean) -> a
com.example.h3.permission.FloatWindowManager$4 -> com.example.h3.b.g:
    com.example.h3.permission.FloatWindowManager this$0 -> a
    android.content.Context val$context -> b
    void <init>(com.example.h3.permission.FloatWindowManager,android.content.Context) -> <init>
    void confirmResult(boolean) -> a
com.example.h3.permission.FloatWindowManager$5 -> com.example.h3.b.h:
    com.example.h3.permission.FloatWindowManager this$0 -> a
    android.content.Context val$context -> b
    void <init>(com.example.h3.permission.FloatWindowManager,android.content.Context) -> <init>
    void confirmResult(boolean) -> a
com.example.h3.permission.FloatWindowManager$6 -> com.example.h3.b.i:
    com.example.h3.permission.FloatWindowManager this$0 -> a
    com.example.h3.permission.FloatWindowManager$OnConfirmResult val$result -> b
    void <init>(com.example.h3.permission.FloatWindowManager,com.example.h3.permission.FloatWindowManager$OnConfirmResult) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.example.h3.permission.FloatWindowManager$7 -> com.example.h3.b.j:
    com.example.h3.permission.FloatWindowManager this$0 -> a
    com.example.h3.permission.FloatWindowManager$OnConfirmResult val$result -> b
    void <init>(com.example.h3.permission.FloatWindowManager,com.example.h3.permission.FloatWindowManager$OnConfirmResult) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.example.h3.permission.FloatWindowManager$OnConfirmResult -> com.example.h3.b.k:
    void confirmResult(boolean) -> a
com.example.h3.permission.rom.HuaweiUtils -> com.example.h3.b.a.a:
    boolean checkFloatWindowPermission(android.content.Context) -> a
    void applyPermission(android.content.Context) -> b
    boolean checkOp(android.content.Context,int) -> a
com.example.h3.permission.rom.MeizuUtils -> com.example.h3.b.a.b:
    boolean checkFloatWindowPermission(android.content.Context) -> a
    void applyPermission(android.content.Context) -> b
    boolean checkOp(android.content.Context,int) -> a
com.example.h3.permission.rom.MiuiUtils -> com.example.h3.b.a.c:
    int getMiuiVersion() -> a
    boolean checkFloatWindowPermission(android.content.Context) -> a
    boolean checkOp(android.content.Context,int) -> a
    void applyMiuiPermission(android.content.Context) -> b
    boolean isIntentAvailable(android.content.Intent,android.content.Context) -> a
    void goToMiuiPermissionActivity_V5(android.content.Context) -> c
    void goToMiuiPermissionActivity_V6(android.content.Context) -> d
    void goToMiuiPermissionActivity_V7(android.content.Context) -> e
    void goToMiuiPermissionActivity_V8(android.content.Context) -> f
com.example.h3.permission.rom.QikuUtils -> com.example.h3.b.a.d:
    boolean checkFloatWindowPermission(android.content.Context) -> a
    boolean checkOp(android.content.Context,int) -> a
    void applyPermission(android.content.Context) -> b
    boolean isIntentAvailable(android.content.Intent,android.content.Context) -> a
com.example.h3.permission.rom.RomUtils -> com.example.h3.b.a.e:
    double getEmuiVersion() -> a
    java.lang.String getSystemProperty(java.lang.String) -> a
    boolean checkIsHuaweiRom() -> b
    boolean checkIsMiuiRom() -> c
    boolean checkIsMeizuRom() -> d
    boolean checkIs360Rom() -> e
download.DownloadService -> download.DownloadService:
    java.lang.String TAG -> g
    download.ftp mFtp -> h
    java.util.Map mAccs -> a
    java.util.Map mCmds -> b
    download.DownloadService$OrderThread orderThread -> c
    android.os.Handler handlerOrderThread -> i
    android.os.PowerManager$WakeLock wakeLock -> d
    android.os.Handler mHandler -> j
    android.content.BroadcastReceiver downloadFileReceiver -> k
    android.os.Handler handlerStartService -> e
    java.lang.Runnable runnableStartService -> f
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate() -> onCreate
    void startAlarm() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    boolean stopService(android.content.Intent) -> stopService
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void acquireWakeLock() -> b
    void releaseWakeLock() -> c
    void sendMSG(int,java.lang.String) -> a
    void parser(java.lang.String) -> a
    void InstallNewFile(java.lang.String) -> b
    boolean AutoInstall(java.lang.String,int,boolean) -> a
    void deletefile(java.lang.String) -> c
    void SendInfo(android.content.Context) -> a
    void SendInfo(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String access$0(download.DownloadService) -> a
    void access$1(download.DownloadService,int,java.lang.String) -> a
    void access$2(download.DownloadService,java.lang.String) -> a
    void access$3(download.DownloadService,java.lang.String) -> b
    void access$4(download.DownloadService,android.os.Handler) -> a
download.DownloadService$1 -> download.a:
    download.DownloadService this$0 -> a
    void <init>(download.DownloadService) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
download.DownloadService$2 -> download.b:
    download.DownloadService this$0 -> a
    void <init>(download.DownloadService) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
download.DownloadService$3 -> download.c:
    download.DownloadService this$0 -> a
    void <init>(download.DownloadService) -> <init>
    void run() -> run
download.DownloadService$OrderThread -> download.d:
    java.lang.String xmlFile -> c
    android.os.Looper mOrderLooper -> a
    download.DownloadService this$0 -> b
    void <init>(download.DownloadService) -> <init>
    void run() -> run
    void access$0(download.DownloadService$OrderThread,java.lang.String) -> a
    java.lang.String access$1(download.DownloadService$OrderThread) -> a
    download.DownloadService access$2(download.DownloadService$OrderThread) -> b
download.DownloadService$OrderThread$1 -> download.e:
    download.DownloadService$OrderThread this$1 -> a
    void <init>(download.DownloadService$OrderThread) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
download.ftp -> download.f:
    java.lang.String TAG -> e
    download.ftp current -> f
    android.content.Context context -> g
    java.lang.String host -> h
    int portU -> i
    int portD -> j
    java.lang.String userName -> k
    java.lang.String password -> l
    java.lang.String mFtpDirPath -> a
    java.lang.String mFtpDirUploadPath -> b
    int mResult -> c
    boolean mUpdateDel -> m
    android.os.Handler handlerFtp -> d
    void <init>(android.content.Context) -> <init>
    download.ftp getFtp(android.content.Context) -> a
    void DownloadStart(java.lang.String) -> a
    void UploadStart(java.lang.String) -> b
    void UploadStart(java.lang.String,boolean) -> a
    void makeDir(java.lang.String) -> d
    void deletefile(java.lang.String) -> e
    boolean fileExists(java.lang.String) -> c
    java.lang.String access$0(download.ftp) -> a
    boolean access$1(download.ftp) -> b
    void access$2(download.ftp,java.lang.String) -> a
    android.content.Context access$3(download.ftp) -> c
    java.lang.String access$4(download.ftp) -> d
    java.lang.String access$5(download.ftp) -> e
    java.lang.String access$6(download.ftp) -> f
download.ftp$1 -> download.g:
    download.ftp this$0 -> a
    void <init>(download.ftp) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
download.ftp$ftpThread -> download.h:
    it.sauronsoftware.ftp4j.FTPClient ftpClient -> b
    java.lang.String mLocalFileName -> c
    java.lang.String mRemoteFileName -> d
    boolean bDownload -> e
    int mPort -> f
    download.ftp this$0 -> a
    void <init>(download.ftp,java.lang.String,int) -> <init>
    void <init>(download.ftp,java.lang.String,boolean,int) -> <init>
    void sendMSG(int) -> a
    void run() -> run
download.install.AppInfo -> download.install.a:
    java.lang.String filename -> a
    java.lang.String pkgname -> b
    java.lang.String startClass -> c
    boolean runAfterInstall -> d
    int versioncode -> e
    void <init>() -> <init>
download.install.InstallApp -> download.install.b:
    download.install.InstallApp current -> n
    download.install.AppInfo mApp -> o
    java.lang.String mPackageName -> k
    java.lang.String mApkPath -> l
    boolean bInstall -> m
    java.util.Map handleMap -> p
    util.RootShellCmd mRootShellCmd -> q
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    download.install.InstallApp getInstallApp() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    boolean isXiaomiOpenButton(android.view.accessibility.AccessibilityNodeInfo) -> a
    void recycleClick(android.view.accessibility.AccessibilityNodeInfo) -> b
    void onWorking() -> a
    void SendUpdateMessage(android.content.Context) -> a
    void smartInstall(download.install.AppInfo) -> a
    void installApk(download.install.AppInfo) -> b
    void installApkInCmd(java.lang.String) -> b
download.install.InstallOfAcc -> download.install.c:
    download.install.AppInfo app -> a
    android.content.Context context -> d
    java.lang.String apkPath -> e
    java.lang.String bakPath -> f
    download.install.InstallApp install -> g
    android.os.Handler handlerInstall -> b
    java.lang.Runnable runnable -> c
    void <init>(android.content.Context,java.lang.String) -> <init>
    boolean needDownLoad(int) -> a
    void reInstall() -> a
    void Install() -> b
    download.install.InstallApp access$0(download.install.InstallOfAcc) -> a
download.install.InstallOfAcc$1 -> download.install.d:
    download.install.InstallOfAcc this$0 -> a
    void <init>(download.install.InstallOfAcc) -> <init>
    void run() -> run
download.install.InstallOfCmd -> download.install.e:
    download.install.AppInfo app -> a
    android.content.Context context -> b
    java.lang.String TAG -> c
    java.lang.String apkPath -> d
    java.lang.String bakPath -> e
    download.install.InstallApp install -> f
    android.content.BroadcastReceiver InstallReceiver -> g
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,java.lang.String,boolean) -> <init>
    boolean needDownLoad(int) -> a
    void startInstall() -> a
    java.lang.String access$0() -> b
    java.lang.String access$1(download.install.InstallOfCmd) -> a
download.install.InstallOfCmd$1 -> download.install.f:
    download.install.InstallOfCmd this$0 -> a
    void <init>(download.install.InstallOfCmd) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
download.install.MonitorSysReceiver -> download.install.MonitorSysReceiver:
    java.lang.String TAG -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
encrypt.Base64 -> c.a:
    byte[] Decode(java.lang.String) -> a
encrypt.DES -> c.b:
    byte[] DESIV -> a
    java.security.spec.AlgorithmParameterSpec iv -> b
    java.security.Key key -> c
    java.lang.String charset -> d
    encrypt.DES current -> e
    void <init>(java.lang.String,java.lang.String) -> <init>
    encrypt.DES getDes(java.lang.String) -> a
    encrypt.DES getDes(java.lang.String,java.lang.String) -> a
    java.lang.String decode(java.lang.String) -> b
floatwindow.FloatWindowLock -> d.a:
    floatwindow.FloatWindowLock current -> b
    android.content.Context context -> c
    android.widget.LinearLayout mFloatLayout -> d
    android.view.WindowManager$LayoutParams wmParams -> e
    android.view.WindowManager mWindowManager -> f
    android.widget.TextView tvShow -> a
    boolean bShow -> g
    void <init>(android.content.Context) -> <init>
    floatwindow.FloatWindowLock getInstance(android.content.Context) -> a
    void createFloatView() -> c
    void ShowFloatingWindow() -> a
    void RemoveFloatingWindow() -> b
floatwindow.FloatWindowMask -> d.b:
    floatwindow.FloatWindowMask current -> b
    android.content.Context context -> c
    android.widget.LinearLayout mFloatLayout -> d
    android.view.WindowManager$LayoutParams wmParams -> e
    android.view.WindowManager mWindowManager -> f
    android.widget.TextView tvShow -> a
    boolean bShow -> g
    void <init>(android.content.Context) -> <init>
    floatwindow.FloatWindowMask getInstance(android.content.Context) -> a
    void createFloatView() -> c
    void ShowFloatingWindow() -> a
    void RemoveFloatingWindow() -> b
it.sauronsoftware.ftp4j.FTPAbortedException -> e.a.a.a:
    void <init>() -> <init>
it.sauronsoftware.ftp4j.FTPClient -> e.a.a.b:
    java.text.DateFormat MDTM_DATE_FORMAT -> a
    java.util.regex.Pattern PASV_PATTERN -> b
    java.util.regex.Pattern PWD_PATTERN -> c
    it.sauronsoftware.ftp4j.FTPConnector connector -> d
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> e
    java.util.ArrayList communicationListeners -> f
    java.util.ArrayList listParsers -> g
    it.sauronsoftware.ftp4j.FTPTextualExtensionRecognizer textualExtensionRecognizer -> h
    it.sauronsoftware.ftp4j.FTPListParser parser -> i
    java.lang.String host -> j
    int port -> k
    int security -> l
    java.lang.String username -> m
    java.lang.String password -> n
    boolean connected -> o
    boolean authenticated -> p
    boolean passive -> q
    int type -> r
    int mlsdPolicy -> s
    long autoNoopTimeout -> t
    it.sauronsoftware.ftp4j.FTPClient$AutoNoopTimer autoNoopTimer -> u
    long nextAutoNoopTime -> v
    boolean restSupported -> w
    java.lang.String charset -> x
    boolean compressionEnabled -> y
    boolean utf8Supported -> z
    boolean mlsdSupported -> A
    boolean modezSupported -> B
    boolean modezEnabled -> C
    boolean dataChannelEncrypted -> D
    boolean ongoingDataTransfer -> E
    java.io.InputStream dataTransferInputStream -> F
    java.io.OutputStream dataTransferOutputStream -> G
    boolean aborted -> H
    boolean consumeAborCommandReply -> I
    java.lang.Object lock -> J
    java.lang.Object abortLock -> K
    it.sauronsoftware.ftp4j.FTPCommunicationChannel communication -> L
    void <init>() -> <init>
    java.net.Socket ssl(java.net.Socket,java.lang.String,int) -> a
    void setType(int) -> a
    it.sauronsoftware.ftp4j.FTPCommunicationListener[] getCommunicationListeners() -> a
    void addListParser(it.sauronsoftware.ftp4j.FTPListParser) -> a
    it.sauronsoftware.ftp4j.FTPListParser[] getListParsers() -> b
    java.lang.String[] connect(java.lang.String,int) -> a
    void disconnect(boolean) -> a
    void login(java.lang.String,java.lang.String) -> a
    void login(java.lang.String,java.lang.String,java.lang.String) -> a
    void postLoginOperations() -> d
    void noop() -> c
    void upload(java.io.File) -> a
    void upload(java.io.File,long,it.sauronsoftware.ftp4j.FTPDataTransferListener) -> a
    void upload(java.lang.String,java.io.InputStream,long,long,it.sauronsoftware.ftp4j.FTPDataTransferListener) -> a
    void download(java.lang.String,java.io.File) -> a
    void download(java.lang.String,java.io.File,long,it.sauronsoftware.ftp4j.FTPDataTransferListener) -> a
    void download(java.lang.String,java.io.OutputStream,long,it.sauronsoftware.ftp4j.FTPDataTransferListener) -> a
    int detectType(java.lang.String) -> a
    it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider openDataTransferChannel() -> e
    it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider openActiveDataTransferChannel() -> f
    it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider openPassiveDataTransferChannel() -> g
    java.lang.String pickCharset() -> h
    int[] pickLocalAddress() -> i
    int[] pickForcedLocalAddress() -> j
    int[] pickAutoDetectedLocalAddress() -> k
    java.lang.String toString() -> toString
    void startAutoNoopTimer() -> l
    void stopAutoNoopTimer() -> m
    void touchAutoNoopTimer() -> n
    boolean access$000(it.sauronsoftware.ftp4j.FTPClient) -> a
    java.net.Socket access$100(it.sauronsoftware.ftp4j.FTPClient,java.net.Socket,java.lang.String,int) -> a
    it.sauronsoftware.ftp4j.FTPConnector access$200(it.sauronsoftware.ftp4j.FTPClient) -> b
    java.lang.String access$300(it.sauronsoftware.ftp4j.FTPClient) -> c
    java.lang.Object access$500(it.sauronsoftware.ftp4j.FTPClient) -> d
    long access$600(it.sauronsoftware.ftp4j.FTPClient) -> e
    long access$700(it.sauronsoftware.ftp4j.FTPClient) -> f
    long access$602(it.sauronsoftware.ftp4j.FTPClient,long) -> a
    void <clinit>() -> <clinit>
it.sauronsoftware.ftp4j.FTPClient$1 -> e.a.a.c:
    it.sauronsoftware.ftp4j.FTPClient this$0 -> a
    void <init>(it.sauronsoftware.ftp4j.FTPClient) -> <init>
    java.net.Socket openDataTransferConnection() -> a
it.sauronsoftware.ftp4j.FTPClient$2 -> e.a.a.d:
    java.lang.String val$pasvHost -> a
    int val$pasvPort -> b
    it.sauronsoftware.ftp4j.FTPClient this$0 -> c
    void <init>(it.sauronsoftware.ftp4j.FTPClient,java.lang.String,int) -> <init>
    java.net.Socket openDataTransferConnection() -> a
    void dispose() -> b
it.sauronsoftware.ftp4j.FTPClient$AutoNoopTimer -> e.a.a.e:
    it.sauronsoftware.ftp4j.FTPClient this$0 -> a
    void <init>(it.sauronsoftware.ftp4j.FTPClient) -> <init>
    void run() -> run
    void <init>(it.sauronsoftware.ftp4j.FTPClient,it.sauronsoftware.ftp4j.FTPClient$1) -> <init>
it.sauronsoftware.ftp4j.FTPCommunicationChannel -> e.a.a.f:
    java.util.ArrayList communicationListeners -> a
    java.net.Socket connection -> b
    java.lang.String charsetName -> c
    it.sauronsoftware.ftp4j.NVTASCIIReader reader -> d
    it.sauronsoftware.ftp4j.NVTASCIIWriter writer -> e
    void <init>(java.net.Socket,java.lang.String) -> <init>
    void addCommunicationListener(it.sauronsoftware.ftp4j.FTPCommunicationListener) -> a
    void close() -> a
    java.lang.String read() -> c
    void sendFTPCommand(java.lang.String) -> a
    it.sauronsoftware.ftp4j.FTPReply readFTPReply() -> b
    void changeCharset(java.lang.String) -> b
    void ssl(javax.net.ssl.SSLSocketFactory) -> a
it.sauronsoftware.ftp4j.FTPCommunicationListener -> e.a.a.g:
    void sent(java.lang.String) -> a
    void received(java.lang.String) -> b
it.sauronsoftware.ftp4j.FTPConnector -> e.a.a.h:
    int connectionTimeout -> a
    int readTimeout -> b
    int closeTimeout -> c
    boolean useSuggestedAddressForDataConnections -> d
    java.net.Socket connectingCommunicationChannelSocket -> e
    void <init>(boolean) -> <init>
    void <init>() -> <init>
    boolean getUseSuggestedAddressForDataConnections() -> a
    java.net.Socket tcpConnectForCommunicationChannel(java.lang.String,int) -> a
    java.net.Socket tcpConnectForDataTransferChannel(java.lang.String,int) -> b
    java.net.Socket connectForCommunicationChannel(java.lang.String,int) -> c
    java.net.Socket connectForDataTransferChannel(java.lang.String,int) -> d
it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider -> e.a.a.i:
    java.net.Socket openDataTransferConnection() -> a
    void dispose() -> b
it.sauronsoftware.ftp4j.FTPDataTransferException -> e.a.a.j:
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
it.sauronsoftware.ftp4j.FTPDataTransferListener -> e.a.a.k:
    void started() -> a
    void transferred(int) -> a
    void completed() -> b
    void aborted() -> c
    void failed() -> d
it.sauronsoftware.ftp4j.FTPDataTransferServer -> e.a.a.l:
    java.net.ServerSocket serverSocket -> a
    java.net.Socket socket -> b
    java.io.IOException exception -> c
    java.lang.Thread thread -> d
    void <init>() -> <init>
    int getPort() -> c
    void run() -> run
    void dispose() -> b
    java.net.Socket openDataTransferConnection() -> a
it.sauronsoftware.ftp4j.FTPException -> e.a.a.m:
    int code -> a
    java.lang.String message -> b
    void <init>(int) -> <init>
    void <init>(int,java.lang.String) -> <init>
    void <init>(it.sauronsoftware.ftp4j.FTPReply) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
it.sauronsoftware.ftp4j.FTPIllegalReplyException -> e.a.a.n:
    void <init>() -> <init>
it.sauronsoftware.ftp4j.FTPListParser -> e.a.a.o:
it.sauronsoftware.ftp4j.FTPReply -> e.a.a.p:
    int code -> a
    java.lang.String[] messages -> b
    void <init>(int,java.lang.String[]) -> <init>
    int getCode() -> a
    boolean isSuccessCode() -> b
    java.lang.String[] getMessages() -> c
    java.lang.String toString() -> toString
it.sauronsoftware.ftp4j.FTPTextualExtensionRecognizer -> e.a.a.q:
    boolean isTextualExt(java.lang.String) -> a
it.sauronsoftware.ftp4j.NVTASCIIReader -> e.a.a.r:
    java.lang.String SYSTEM_LINE_SEPARATOR -> a
    java.io.InputStream stream -> b
    java.io.Reader reader -> c
    void <init>(java.io.InputStream,java.lang.String) -> <init>
    void close() -> close
    int read(char[],int,int) -> read
    void changeCharset(java.lang.String) -> a
    java.lang.String readLine() -> a
    void <clinit>() -> <clinit>
it.sauronsoftware.ftp4j.NVTASCIIWriter -> e.a.a.s:
    java.io.OutputStream stream -> a
    java.io.Writer writer -> b
    void <init>(java.io.OutputStream,java.lang.String) -> <init>
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void changeCharset(java.lang.String) -> a
    void writeLine(java.lang.String) -> b
it.sauronsoftware.ftp4j.connectors.DirectConnector -> e.a.a.a.a:
    void <init>() -> <init>
    java.net.Socket connectForCommunicationChannel(java.lang.String,int) -> c
    java.net.Socket connectForDataTransferChannel(java.lang.String,int) -> d
it.sauronsoftware.ftp4j.extrecognizers.DefaultTextualExtensionRecognizer -> e.a.a.b.a:
    java.lang.Object lock -> a
    it.sauronsoftware.ftp4j.extrecognizers.DefaultTextualExtensionRecognizer instance -> b
    it.sauronsoftware.ftp4j.extrecognizers.DefaultTextualExtensionRecognizer getInstance() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
it.sauronsoftware.ftp4j.extrecognizers.ParametricTextualExtensionRecognizer -> e.a.a.b.b:
    java.util.ArrayList exts -> a
    void <init>() -> <init>
    void addExtension(java.lang.String) -> b
    boolean isTextualExt(java.lang.String) -> a
it.sauronsoftware.ftp4j.listparsers.DOSListParser -> e.a.a.c.a:
    java.util.regex.Pattern PATTERN -> a
    java.text.DateFormat DATE_FORMAT -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
it.sauronsoftware.ftp4j.listparsers.EPLFListParser -> e.a.a.c.b:
    void <init>() -> <init>
it.sauronsoftware.ftp4j.listparsers.MLSDListParser -> e.a.a.c.c:
    java.text.DateFormat MLSD_DATE_FORMAT_1 -> a
    java.text.DateFormat MLSD_DATE_FORMAT_2 -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
it.sauronsoftware.ftp4j.listparsers.NetWareListParser -> e.a.a.c.d:
    java.util.regex.Pattern PATTERN -> a
    java.text.DateFormat DATE_FORMAT -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
it.sauronsoftware.ftp4j.listparsers.UnixListParser -> e.a.a.c.e:
    java.util.regex.Pattern PATTERN -> a
    java.text.DateFormat DATE_FORMAT -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
lock.AdminReceiver -> lock.AdminReceiver:
    void <init>() -> <init>
    void onEnabled(android.content.Context,android.content.Intent) -> onEnabled
    void onDisabled(android.content.Context,android.content.Intent) -> onDisabled
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
lock.LockActivity -> lock.LockActivity:
    lock.LockActivity current -> a
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void startSelf(android.content.Context) -> a
    void onDestroy() -> onDestroy
    void onNewIntent(android.content.Intent) -> onNewIntent
lock.LockService -> lock.LockService:
    android.app.admin.DevicePolicyManager policyManager -> a
    android.content.ComponentName mComponentName -> b
    java.lang.String mPwd -> c
    lock.LockService$LockState mLockState -> d
    android.os.Handler handler -> e
    java.lang.Runnable runnable -> f
    android.content.IntentFilter filter -> g
    android.content.BroadcastReceiver mBatInfoReceiver -> h
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    boolean stopService(android.content.Intent) -> stopService
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void LockReceiver() -> b
    void LockPrepare() -> a
    void op(android.content.Intent) -> a
lock.LockService$1 -> lock.a:
    lock.LockService this$0 -> a
    void <init>(lock.LockService) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
lock.LockService$2 -> lock.b:
    lock.LockService this$0 -> a
    void <init>(lock.LockService) -> <init>
    void run() -> run
lock.LockService$LockState -> lock.c:
    lock.LockService$LockState delayed -> a
    lock.LockService$LockState locked -> b
    lock.LockService$LockState unLocked -> c
    lock.LockService$LockState[] ENUM$VALUES -> d
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    lock.LockService$LockState[] values() -> values
    lock.LockService$LockState valueOf(java.lang.String) -> valueOf
lock.UnlockScreen -> lock.d:
    lock.UnlockScreen current -> a
    int mOrientation -> b
    android.content.Context context -> c
    boolean bScreenOn -> d
    boolean bScreenLocked -> e
    android.content.IntentFilter filter -> f
    android.content.BroadcastReceiver mBatInfoReceiver -> g
    void <init>(android.content.Context) -> <init>
    lock.UnlockScreen getInstance(android.content.Context) -> a
    void execUnlockScreen() -> a
    void destoryUnlockScreen() -> b
    void seriesSlideScreen() -> c
    void SlideScreen(int,int) -> a
    lock.UnlockScreen$Points getPoints(int,int) -> b
    void ScreenReceiver(android.content.Context) -> e
    boolean isScreenOn(android.content.Context) -> b
    boolean isScreenLocked(android.content.Context) -> c
    void wakeUpAndUnlock(android.content.Context) -> d
    void endUnlockScreen() -> d
    int access$0(lock.UnlockScreen) -> a
    void access$1(lock.UnlockScreen,int) -> a
    void access$2(lock.UnlockScreen,boolean) -> a
    boolean access$3(lock.UnlockScreen) -> b
    void access$4(lock.UnlockScreen) -> c
lock.UnlockScreen$1 -> lock.e:
    lock.UnlockScreen this$0 -> a
    void <init>(lock.UnlockScreen) -> <init>
    void run() -> run
lock.UnlockScreen$2 -> lock.f:
    lock.UnlockScreen this$0 -> a
    void <init>(lock.UnlockScreen) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
lock.UnlockScreen$3 -> lock.g:
    lock.UnlockScreen this$0 -> a
    void <init>(lock.UnlockScreen) -> <init>
    void run() -> run
lock.UnlockScreen$Points -> lock.h:
    android.graphics.Point start -> a
    android.graphics.Point end -> b
    lock.UnlockScreen this$0 -> c
    void <init>(lock.UnlockScreen) -> <init>
media.AudioRecording -> media.a:
    android.media.AudioRecord audioRecord -> a
    boolean isRecording -> b
    int bufferSizeInBytes -> c
    media.AudioRecording$SendDataToServer sendDataToServer -> d
    java.lang.String mIP -> e
    int mPort -> f
    media.AudioRecording mInstance -> g
    void <init>() -> <init>
    media.AudioRecording getInstance() -> a
    boolean startRecording(int) -> a
    void stopRecording() -> b
    void releaseAudioRecord() -> c
    boolean creatAudioRecord() -> d
    void writeDateTOIO(android.media.AudioRecord,int) -> a
    android.media.AudioRecord access$0(media.AudioRecording) -> a
    boolean access$1(media.AudioRecording) -> b
    void access$2(media.AudioRecording,boolean) -> a
    int access$3(media.AudioRecording) -> c
    void access$4(media.AudioRecording,android.media.AudioRecord,int) -> a
    void access$5(media.AudioRecording) -> d
media.AudioRecording$AudioRecordThread -> media.b:
    media.AudioRecording this$0 -> a
    void <init>(media.AudioRecording) -> <init>
    void run() -> run
media.AudioRecording$SendDataToServer -> media.c:
    int BUF_SIZE_D -> b
    order.Sock sock -> c
    byte[] buf -> d
    int bufSize -> e
    int p -> f
    media.AudioRecording this$0 -> a
    void <init>(media.AudioRecording,java.lang.String,int,int) -> <init>
    boolean send(byte[]) -> a
    void close() -> a
media.CameraCapture -> media.d:
    java.lang.String TAG -> b
    android.content.Context context -> c
    media.CameraCapture current -> d
    android.view.SurfaceView surfaceView -> e
    android.hardware.Camera camera -> f
    android.view.SurfaceHolder holder -> g
    android.view.WindowManager windowManager -> h
    boolean mSinglePic -> i
    int mQuality -> j
    int mVideoWidth -> k
    int mVideoHeight -> l
    int mVideoFormatIndex -> m
    boolean mBusy -> n
    order.Sock sock -> a
    int mPort -> o
    void <init>(android.content.Context) -> <init>
    media.CameraCapture getInstance(android.content.Context) -> a
    void start(int,boolean,int) -> a
    void stop() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
    void OpenCarmeraThread() -> b
    boolean OpenFrontCamera() -> c
    void StartCameraPreview() -> e
    android.graphics.Bitmap getBmp(byte[]) -> a
    void getCarmaPermission() -> d
    int computeInitialSampleSize(android.graphics.BitmapFactory$Options,int,int) -> a
    void access$0(media.CameraCapture,boolean) -> a
    android.graphics.Bitmap access$1(media.CameraCapture,byte[]) -> a
    int access$2(media.CameraCapture) -> a
    boolean access$3(media.CameraCapture) -> b
    android.content.Context access$4(media.CameraCapture) -> c
    void access$5(media.CameraCapture) -> d
media.CameraCapture$1 -> media.e:
    media.CameraCapture this$0 -> a
    void <init>(media.CameraCapture) -> <init>
    void run() -> run
media.CameraCapture$SendTask -> media.f:
    media.CameraCapture this$0 -> a
    void <init>(media.CameraCapture) -> <init>
    android.graphics.Bitmap doInBackground(byte[][]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
media.VideoRecorderService -> media.VideoRecorderService:
    android.view.WindowManager windowManager -> a
    android.view.SurfaceView surfaceView -> b
    android.hardware.Camera camera -> c
    android.media.MediaRecorder mediaRecorder -> d
    void <init>() -> <init>
    void onCreate() -> onCreate
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void onDestroy() -> onDestroy
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void getCarmaPermission() -> a
    void startRecordThread(android.view.Surface) -> a
    boolean OpenFrontCamera() -> b
    void start(android.content.Context) -> a
    void stop(android.content.Context) -> b
    void access$0(media.VideoRecorderService,android.media.MediaRecorder) -> a
    android.hardware.Camera access$1(media.VideoRecorderService) -> a
    android.media.MediaRecorder access$2(media.VideoRecorderService) -> b
media.VideoRecorderService$1 -> media.g:
    media.VideoRecorderService this$0 -> a
    android.view.Surface val$sv -> b
    void <init>(media.VideoRecorderService,android.view.Surface) -> <init>
    void run() -> run
notification.BaseNotificationJob -> notification.a:
    java.lang.String TAG -> a
    java.lang.String TAG2 -> b
    android.content.Context context -> c
    java.lang.String[] mPkgs -> d
    notification.QHBNotificationService service -> e
    boolean mIsEventWorking -> f
    boolean mIsTargetPackageName -> g
    void <init>(java.lang.String[]) -> <init>
    void onCreateJob(notification.QHBNotificationService) -> a
    void onStopJob() -> a
    boolean isTargetPackageName(java.lang.String) -> a
    void onReceiveJob(notification.IStatusBarNotification) -> a
    void EventStart() -> b
notification.IStatusBarNotification -> notification.b:
    java.lang.String getPackageName() -> a
    android.app.Notification getNotification() -> b
    long getPostTime() -> c
notification.ManagerNotificationJob -> notification.c:
    notification.ManagerNotificationJob current -> h
    notification.app.SaveNotification mSaveNotification -> i
    void <init>() -> <init>
    notification.ManagerNotificationJob getInstance() -> c
    void handeNotificationPosted(notification.IStatusBarNotification) -> b
    void onCreateJob(notification.QHBNotificationService) -> a
    void onStopJob() -> a
    void onReceiveJob(notification.IStatusBarNotification) -> a
    void debug(notification.IStatusBarNotification) -> c
notification.NotifyHelper -> notification.d:
    android.app.KeyguardManager sKeyguardManager -> a
    android.os.PowerManager sPowerManager -> b
    android.app.KeyguardManager getKeyguardManager(android.content.Context) -> a
    android.os.PowerManager getPowerManager(android.content.Context) -> b
    boolean isLockScreen(android.content.Context) -> c
    boolean isScreenOn(android.content.Context) -> d
    boolean send(android.app.PendingIntent) -> a
notification.QHBNotificationService -> notification.QHBNotificationService:
    notification.ManagerNotificationJob managerNotificationJob -> a
    notification.QHBNotificationService service -> b
    void <init>() -> <init>
    void onCreate() -> onCreate
    void onNotificationPosted(android.service.notification.StatusBarNotification) -> onNotificationPosted
    void onNotificationRemoved(android.service.notification.StatusBarNotification) -> onNotificationRemoved
    void onListenerConnected() -> onListenerConnected
    void onDestroy() -> onDestroy
    void toggleNotificationListenerService() -> a
notification.QHBNotificationService$1 -> notification.e:
    notification.QHBNotificationService this$0 -> a
    android.service.notification.StatusBarNotification val$sbn -> b
    void <init>(notification.QHBNotificationService,android.service.notification.StatusBarNotification) -> <init>
    java.lang.String getPackageName() -> a
    android.app.Notification getNotification() -> b
    long getPostTime() -> c
notification.app.SaveNotification -> notification.a.a:
    notification.app.SaveNotification current -> h
    java.lang.String mFilename -> i
    void <init>() -> <init>
    notification.app.SaveNotification getInstance() -> c
    void onCreateJob(notification.QHBNotificationService) -> a
    void onStopJob() -> a
    void onReceiveJob(notification.IStatusBarNotification) -> a
    java.lang.String getNotificationFileName() -> d
    void saveNotification(notification.IStatusBarNotification) -> b
    boolean saveInfo2File(java.lang.String,java.lang.String,boolean) -> a
    void closeIO(java.io.Closeable) -> a
order.DataThreadInfo -> order.a:
    int ID -> a
    boolean bSuc -> b
    int len -> c
    void <init>() -> <init>
order.GuardService -> order.GuardService:
    android.content.ServiceConnection mServiceConnection -> a
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.content.ServiceConnection access$0(order.GuardService) -> a
order.GuardService$1 -> order.b:
    order.GuardService this$0 -> a
    void <init>(order.GuardService) -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
order.GuardService$2 -> order.c:
    order.GuardService this$0 -> a
    void <init>(order.GuardService) -> <init>
order.JobWakeUpService -> order.JobWakeUpService:
    void <init>() -> <init>
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    boolean onStartJob(android.app.job.JobParameters) -> onStartJob
    boolean onStopJob(android.app.job.JobParameters) -> onStopJob
    void createJob(int,long) -> a
    void runRemoteApp(java.lang.String,java.lang.String,java.lang.String) -> a
    void runMyApp(java.lang.String) -> a
order.JobWakeUpService$1 -> order.d:
    order.JobWakeUpService this$0 -> a
    java.lang.String val$pkg -> b
    java.lang.String val$serviceName -> c
    java.lang.String val$mainClass -> d
    void <init>(order.JobWakeUpService,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void run() -> run
order.JobWakeUpService$2 -> order.e:
    order.JobWakeUpService this$0 -> a
    java.lang.String val$serviceName -> b
    void <init>(order.JobWakeUpService,java.lang.String) -> <init>
    void run() -> run
order.OrderHeader -> order.f:
    int pid -> a
    int ver -> b
    int enc -> c
    int cmd -> d
    int len -> e
    int dat -> f
    void <init>() -> <init>
order.OrderService -> order.OrderService:
    order.OrderService$OrderThread orderThread -> a
    java.util.Map mapDataThreads -> b
    int mDataThreadID -> f
    android.os.PowerManager$WakeLock wakeLock -> c
    order.OrderService current -> g
    order.file.FileSystem fileSystem -> h
    android.os.Handler HandlerSock -> d
    android.content.ServiceConnection mServiceConnection -> i
    android.os.Handler handler -> e
    boolean bExcCmd -> j
    boolean bStart -> k
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    boolean stopService(android.content.Intent) -> stopService
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    order.OrderService getOrderService() -> a
    void acquireWakeLock() -> c
    void releaseWakeLock() -> d
    void command(int,int,byte[]) -> a
    order.OrderService$DataThread getDataThread() -> b
    order.OrderService$DataThread getDataThread(int) -> a
    void removeDataThread(int) -> c
    void SendBaseInfo(int) -> b
    void SendBaseInfo(int,java.lang.String) -> a
    void SendBmp(android.graphics.Bitmap) -> a
    void SendBmp(int,android.graphics.Bitmap) -> a
    void SendBmp(int,android.graphics.Bitmap,int,int) -> a
    void processClick(int,byte[]) -> a
    void processSlide(byte[]) -> c
    void ReadSmsPrepare(int) -> d
    void processSendSms(byte[]) -> d
    void processSendSmss(byte[]) -> e
    void processClearSms() -> e
    void processCarmera(android.content.Context) -> a
    void processLock(android.content.Context,java.lang.String) -> a
    void processLock(byte[]) -> a
    void processShotScreen(int,byte[]) -> b
    void processGetInstallAppInfo(int) -> e
    void processInstallApp(byte[]) -> f
    void processUnInstallApp(byte[]) -> g
    void wakeService(android.content.Context,java.lang.String,java.lang.String) -> a
    void processRunApp(byte[]) -> h
    void processKillApp(byte[]) -> i
    void processCameraCap(int,byte[]) -> c
    void shotScreenPrepare() -> f
    void rootPrepare() -> g
    void LocatePrepare() -> h
    void CallPrepare(int) -> f
    void ContactPrepare(int) -> g
    void processInput(byte[]) -> j
    void inputTxtThread(byte[]) -> b
    android.view.accessibility.AccessibilityNodeInfo getEditFromFocus(android.accessibilityservice.AccessibilityService) -> b
    boolean nodeInput(android.content.Context,android.view.accessibility.AccessibilityNodeInfo,java.lang.String) -> a
    void processInsertImageToGallery(byte[]) -> k
    void insertImageToGallery(android.content.Context,java.lang.String) -> b
    void closeSettings() -> i
    void test() -> j
    void access$0(order.OrderService,int,int,byte[]) -> a
    void access$1(order.OrderService,int) -> a
    android.content.ServiceConnection access$2(order.OrderService) -> a
    void access$4(order.OrderService,android.content.Context,java.lang.String,java.lang.String) -> a
    boolean access$5(order.OrderService) -> b
    void access$6(order.OrderService,boolean) -> a
    android.view.accessibility.AccessibilityNodeInfo access$7(android.accessibilityservice.AccessibilityService) -> a
    order.file.FileSystem access$8(order.OrderService) -> c
    void access$9(order.OrderService,android.content.Context,java.lang.String) -> a
order.OrderService$1 -> order.g:
    order.OrderService this$0 -> a
    void <init>(order.OrderService) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
order.OrderService$10 -> order.h:
    order.OrderService this$0 -> a
    byte[] val$data -> b
    void <init>(order.OrderService,byte[]) -> <init>
    void run() -> run
order.OrderService$11 -> order.i:
    order.OrderService this$0 -> a
    byte[] val$data -> b
    void <init>(order.OrderService,byte[]) -> <init>
    void run() -> run
order.OrderService$12 -> order.j:
    order.OrderService this$0 -> a
    byte[] val$data -> b
    void <init>(order.OrderService,byte[]) -> <init>
    void run() -> run
order.OrderService$13 -> order.k:
    order.OrderService this$0 -> a
    android.os.Handler val$handler -> b
    void <init>(order.OrderService,android.os.Handler) -> <init>
    void run() -> run
order.OrderService$15 -> order.l:
    order.OrderService this$0 -> a
    void <init>(order.OrderService) -> <init>
    void run() -> run
order.OrderService$16 -> order.m:
    order.OrderService this$0 -> a
    android.os.Handler val$handler -> b
    void <init>(order.OrderService,android.os.Handler) -> <init>
    void run() -> run
order.OrderService$17 -> order.n:
    order.OrderService this$0 -> a
    byte[] val$data -> b
    void <init>(order.OrderService,byte[]) -> <init>
    void run() -> run
order.OrderService$18 -> order.o:
    order.OrderService this$0 -> a
    byte[] val$data -> b
    void <init>(order.OrderService,byte[]) -> <init>
    void run() -> run
order.OrderService$2 -> order.p:
    order.OrderService this$0 -> a
    void <init>(order.OrderService) -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
order.OrderService$3 -> order.q:
    order.OrderService this$0 -> a
    void <init>(order.OrderService) -> <init>
order.OrderService$4 -> order.r:
    order.OrderService this$0 -> a
    int val$cmd -> b
    java.lang.String val$s -> c
    void <init>(order.OrderService,int,java.lang.String) -> <init>
    void run() -> run
order.OrderService$6 -> order.s:
    order.OrderService this$0 -> a
    java.lang.String val$filename -> b
    int val$port -> c
    void <init>(order.OrderService,java.lang.String,int) -> <init>
    void onFinish(android.graphics.Bitmap) -> a
order.OrderService$8 -> order.t:
    order.OrderService this$0 -> a
    int val$cmd -> b
    void <init>(order.OrderService,int) -> <init>
    void run() -> run
order.OrderService$9 -> order.u:
    order.OrderService this$0 -> a
    byte[] val$data -> b
    void <init>(order.OrderService,byte[]) -> <init>
    void run() -> run
order.OrderService$DataThread -> order.v:
    java.lang.String host -> d
    int port -> e
    android.os.Message msg -> f
    order.DataThreadInfo dataThreadInfo -> a
    order.Sock sock -> b
    order.OrderService this$0 -> c
    void <init>(order.OrderService,int) -> <init>
    void <init>(order.OrderService,int,int) -> <init>
    void run() -> run
    void initMsg(int) -> a
    void release() -> a
order.OrderService$OrderThread -> order.w:
    int RECONNECT_INTERVAL_TIME -> a
    int CHECK_CONNECT_INTERVAL_TIME -> j
    int connectCount -> k
    order.Sock sock -> b
    java.lang.String host -> l
    int port -> m
    android.os.PowerManager$WakeLock wakeLock -> c
    android.os.Message msg -> n
    android.os.Bundle bundle -> d
    boolean mWorking -> e
    boolean mRecving -> f
    int state -> g
    boolean locked -> h
    order.OrderService this$0 -> i
    void <init>(order.OrderService) -> <init>
    void startOrder() -> a
    void sendMsg(int,int,byte[]) -> a
    void run() -> run
    void release() -> b
    void checkConnectCount() -> c
    void access$0(order.OrderService$OrderThread,int) -> a
    int access$1(order.OrderService$OrderThread) -> a
order.OrderService$OrderThread$1 -> order.x:
    order.OrderService$OrderThread this$1 -> a
    android.os.Handler val$handler -> b
    void <init>(order.OrderService$OrderThread,android.os.Handler) -> <init>
    void run() -> run
order.Sock -> order.y:
    java.net.Socket socket -> e
    java.net.InetSocketAddress addr -> f
    java.io.OutputStream out -> g
    java.io.InputStream in -> h
    order.OrderHeader oh -> a
    byte[] ph -> i
    byte[] data -> b
    java.lang.String s -> c
    android.graphics.Bitmap bmp -> d
    void <init>(java.lang.String,int) -> <init>
    boolean isConnected() -> a
    boolean isAliveConnected() -> b
    boolean connectServer() -> c
    int read(byte[],int,int) -> a
    boolean RecvPH() -> i
    boolean RecvOH() -> d
    boolean RecvData(int) -> a
    boolean write(byte[],int,int) -> b
    boolean SendData(int) -> b
    boolean SendData() -> e
    int SendString(java.lang.String) -> a
    boolean SendOH(order.OrderHeader) -> a
    boolean SendOH() -> f
    boolean SendBmp(android.graphics.Bitmap,int) -> a
    boolean SendInt(int) -> c
    int RecvInt() -> g
    void release() -> h
order.file.FileSystem -> order.a.a:
    order.file.FileSystem current -> a
    android.content.Context context -> b
    int mFileInfoLen -> c
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    order.file.FileSystem getFileSystem(android.content.Context) -> a
    byte[] FormatFileInfo(order.file.FileSystem$FileInfo) -> a
    order.file.FileSystem$PhoneDir byte2PhoneDir(byte[]) -> a
    java.lang.String getFullDir(int,java.lang.String) -> a
    byte[] getDirInfo(int,java.lang.String) -> b
    order.file.FileSystem$TransFilesInfo Byte2TransFilesInfo(byte[]) -> b
    byte[] RequestFileInfo2Byte(order.file.FileSystem$RequestFileInfo) -> a
    void processDelFile(byte[]) -> c
    void processListFileInfo(byte[]) -> d
    void processTransFiles(byte[]) -> e
order.file.FileSystem$1 -> order.a.b:
    order.file.FileSystem this$0 -> a
    byte[] val$data -> b
    void <init>(order.file.FileSystem,byte[]) -> <init>
    void run() -> run
order.file.FileSystem$2 -> order.a.c:
    order.file.FileSystem this$0 -> a
    byte[] val$data -> b
    void <init>(order.file.FileSystem,byte[]) -> <init>
    void run() -> run
order.file.FileSystem$3 -> order.a.d:
    order.file.FileSystem this$0 -> a
    byte[] val$data -> b
    void <init>(order.file.FileSystem,byte[]) -> <init>
    void run() -> run
order.file.FileSystem$FileInfo -> order.a.e:
    int nFileSizeLow -> a
    int nFileSizeHigh -> b
    java.lang.String ftLastWriteTime -> c
    java.lang.String cFileName -> d
    order.file.FileSystem this$0 -> e
    void <init>(order.file.FileSystem) -> <init>
order.file.FileSystem$PhoneDir -> order.a.f:
    int iRootDir -> a
    java.lang.String subDir -> b
    order.file.FileSystem this$0 -> c
    void <init>(order.file.FileSystem,int,java.lang.String) -> <init>
order.file.FileSystem$RequestFileInfo -> order.a.g:
    java.lang.String fileName -> a
    boolean bUpLoad -> b
    order.file.FileSystem this$0 -> c
    void <init>(order.file.FileSystem,java.lang.String,boolean) -> <init>
order.file.FileSystem$TransFileThread -> order.a.h:
    java.lang.String host -> e
    int port -> f
    android.os.Message msg -> g
    order.Sock sock -> a
    order.file.FileSystem$TransFilesInfo transFilesInfo -> b
    order.file.FileSystem$RequestFileInfo requestFileInfo -> c
    order.file.FileSystem this$0 -> d
    void <init>(order.file.FileSystem,order.file.FileSystem$TransFilesInfo) -> <init>
    void run() -> run
    void release() -> a
order.file.FileSystem$TransFilesInfo -> order.a.i:
    java.lang.String clientFile -> a
    java.lang.String serverFile -> b
    int iRootDir -> c
    boolean bUpLoad -> d
    boolean bFolder -> e
    boolean bCompleteDel -> f
    order.file.FileSystem this$0 -> g
    void <init>(order.file.FileSystem) -> <init>
order.file.FileUtils -> order.a.j:
    boolean isSDCardMounted() -> a
    java.lang.String getRootDir() -> b
    java.lang.String getSDCardBaseDir() -> c
    java.lang.String getPhotoDir() -> d
    void deleteFile(java.lang.String) -> a
    void deleteFile(java.io.File) -> a
    void deleteFileRecursively(java.io.File) -> c
    java.io.File getFileByPath(java.lang.String) -> b
    boolean isFileExists(java.io.File) -> b
    double byte2Unit(long,int) -> a
    double getFileSize(java.io.File,int) -> a
    java.io.RandomAccessFile getRandomFile(java.io.File,java.lang.String) -> a
    boolean fileExists(java.lang.String) -> c
order.file.ZipUtil -> order.a.k:
    void zip(java.lang.String,java.lang.String) -> a
    void zipFileOrDirectory(java.util.zip.ZipOutputStream,java.io.File,java.lang.String) -> a
order.order -> order.z:
    byte[] toLH(int) -> a
    int byteToInt(byte[]) -> a
    byte[] formatOHtoPH(order.OrderHeader,byte[]) -> a
    order.OrderHeader formatPHtoOH(byte[],order.OrderHeader) -> a
    boolean VerifyOH(order.OrderHeader) -> a
    order.OrderHeader formatOH(order.OrderHeader) -> b
    int byte2Int(byte[]) -> b
    java.lang.String byte2Str(byte[]) -> c
order.screen.ScreenRecordActivity -> order.screen.ScreenRecordActivity:
    int mOpType -> b
    int mScreenWidth -> c
    int mScreenHeight -> d
    int mScreenDensity -> e
    boolean isVideoSd -> f
    boolean isAudio -> g
    java.lang.String mVideoType -> h
    order.screen.Shotter shotter -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void processRequest() -> a
    void requestScreenRecording() -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void getScreenBaseInfo() -> c
    void startInstance(android.content.Context,int) -> a
    void startInstance(android.content.Context,int,java.lang.String,boolean) -> a
order.screen.ScreenRecordService -> order.screen.ScreenRecordService:
    order.screen.ScreenRecordService current -> a
    int mScreenWidth -> b
    int mScreenHeight -> c
    int mScreenDensity -> d
    int mResultCode -> e
    android.content.Intent mResultData -> f
    boolean isVideoSd -> g
    boolean isAudio -> h
    java.lang.String mVideoType -> i
    boolean mIsRecoding -> j
    int mBitRate -> k
    android.media.projection.MediaProjection mMediaProjection -> l
    android.media.MediaRecorder mMediaRecorder -> m
    android.hardware.display.VirtualDisplay mVirtualDisplay -> n
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.media.projection.MediaProjection createMediaProjection() -> b
    boolean getVirtualDisplay() -> c
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean init() -> d
    boolean setSaveFile() -> e
    boolean setSaveFile(java.lang.String) -> a
    boolean setPara() -> f
    boolean prepare() -> g
    void start() -> h
    void getCarmaPermission() -> i
    void recordingThread() -> j
    void stop() -> k
    order.screen.ScreenRecordService getInstance() -> a
    void start(android.content.Context,java.lang.String,boolean) -> a
    void stop(android.content.Context) -> a
    boolean access$0(order.screen.ScreenRecordService) -> a
    boolean access$1(order.screen.ScreenRecordService) -> b
    boolean access$2(order.screen.ScreenRecordService) -> c
    void access$3(order.screen.ScreenRecordService) -> d
order.screen.ScreenRecordService$1 -> order.screen.a:
    order.screen.ScreenRecordService this$0 -> a
    void <init>(order.screen.ScreenRecordService) -> <init>
    void run() -> run
order.screen.ScreenShotActivity -> order.screen.ScreenShotActivity:
    order.screen.Shotter shotter -> a
    android.content.ComponentName mComponentName -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void processRequest() -> b
    void requestScreenShot() -> a
    void requestDeviceManager(android.content.ComponentName) -> a
    void startInstance(android.content.Context,int,android.content.ComponentName) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
order.screen.Shotter -> order.screen.b:
    java.lang.ref.SoftReference mRefContext -> c
    android.content.Context context -> a
    android.media.ImageReader mImageReader -> d
    android.media.projection.MediaProjection mMediaProjection -> e
    android.hardware.display.VirtualDisplay mVirtualDisplay -> f
    java.lang.String mLocalUrl -> g
    int mOptions -> h
    order.screen.Shotter$OnShotListener mOnShotListener -> i
    boolean mShotSeries -> j
    order.Sock sock -> b
    void <init>(android.content.Context,android.content.Intent) -> <init>
    boolean virtualDisplay() -> b
    android.media.Image getImage() -> c
    void startScreenShot(order.screen.Shotter$OnShotListener,java.lang.String) -> a
    void startScreenShot(order.screen.Shotter$OnShotListener,java.lang.String,int) -> a
    void startScreenShot(order.screen.Shotter$OnShotListener) -> a
    android.media.projection.MediaProjectionManager getMediaProjectionManager() -> d
    android.content.Context getContext() -> e
    int getScreenWidth() -> f
    int getScreenHeight() -> g
    android.graphics.Bitmap getBmpFromImg(android.media.Image) -> a
    void ShotSeriesThread(int) -> a
    void StopShotSeries() -> a
    java.lang.String access$0(order.screen.Shotter) -> a
    int access$1(order.screen.Shotter) -> b
    android.hardware.display.VirtualDisplay access$2(order.screen.Shotter) -> c
    order.screen.Shotter$OnShotListener access$3(order.screen.Shotter) -> d
    android.media.Image access$4(order.screen.Shotter) -> e
    boolean access$5(order.screen.Shotter) -> f
    boolean access$6(order.screen.Shotter) -> g
    android.graphics.Bitmap access$7(order.screen.Shotter,android.media.Image) -> a
    void access$8(order.screen.Shotter,android.hardware.display.VirtualDisplay) -> a
order.screen.Shotter$1 -> order.screen.c:
    order.screen.Shotter this$0 -> a
    void <init>(order.screen.Shotter) -> <init>
    void run() -> run
order.screen.Shotter$2 -> order.screen.d:
    order.screen.Shotter this$0 -> a
    void <init>(order.screen.Shotter) -> <init>
    void run() -> run
order.screen.Shotter$OnShotListener -> order.screen.e:
    void onFinish(android.graphics.Bitmap) -> a
order.screen.Shotter$SaveTask -> order.screen.f:
    order.screen.Shotter this$0 -> a
    void <init>(order.screen.Shotter) -> <init>
    android.graphics.Bitmap doInBackground(android.media.Image[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
permission.GivePermission -> f.a:
    permission.GivePermission current -> k
    java.lang.String[] mKeyWords -> l
    void <init>() -> <init>
    permission.GivePermission getGivePermission() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
    void recycleClick(android.view.accessibility.AccessibilityNodeInfo) -> c
    void EventStart() -> e
    void recycleGiveCheck(android.view.accessibility.AccessibilityNodeInfo) -> a
    void recycleGiveButton(android.view.accessibility.AccessibilityNodeInfo) -> b
    void setKeyWords(java.lang.String[]) -> a
    void clickKeyWords(java.lang.String,android.view.accessibility.AccessibilityNodeInfo) -> a
    void access$0(permission.GivePermission,java.lang.String[]) -> a
permission.GivePermission$1 -> f.b:
    permission.GivePermission this$0 -> a
    void <init>(permission.GivePermission) -> <init>
    void run() -> run
permission.accessibility.GiveAccessibilityPermission -> f.a.a:
    permission.accessibility.GiveAccessibilityPermission current -> k
    permission.accessibility.rom.GiveAccessibilityPermission_Xiaomi mGiveAccessibilityPermission_Xiaomi -> l
    permission.accessibility.rom.GiveAccessibilityPermission_Honor mGiveAccessibilityPermission_Honor -> m
    android.content.BroadcastReceiver requestPermissionReceiver -> n
    void <init>() -> <init>
    permission.accessibility.GiveAccessibilityPermission getGiveAccessibilityPermission() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
    void Start(java.lang.String,java.lang.String) -> a
permission.accessibility.GiveAccessibilityPermission$1 -> f.a.b:
    permission.accessibility.GiveAccessibilityPermission this$0 -> a
    void <init>(permission.accessibility.GiveAccessibilityPermission) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
permission.accessibility.rom.GiveAccessibilityPermission_Honor -> f.a.a.a:
    permission.accessibility.rom.GiveAccessibilityPermission_Honor current -> k
    boolean bForward -> l
    java.lang.String mCurrentUI -> m
    java.lang.String mDescription -> n
    java.lang.String mAppName -> o
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    permission.accessibility.rom.GiveAccessibilityPermission_Honor getGiveAccessibilityPermission_Honor() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
    void recycleClick(android.view.accessibility.AccessibilityNodeInfo) -> f
    boolean isAccessibilitySettingsActivity(android.view.accessibility.AccessibilityNodeInfo) -> a
    void findAndClickAppName(android.view.accessibility.AccessibilityNodeInfo) -> b
    void clickServerButton(android.view.accessibility.AccessibilityNodeInfo) -> c
    void clickOKonDialog(android.view.accessibility.AccessibilityNodeInfo) -> d
    void clickStopOnDialog(android.view.accessibility.AccessibilityNodeInfo) -> e
    void openAccessibilitySettings(android.content.Context) -> a
    void Start(java.lang.String,java.lang.String) -> a
permission.accessibility.rom.GiveAccessibilityPermission_Xiaomi -> f.a.a.b:
    permission.accessibility.rom.GiveAccessibilityPermission_Xiaomi current -> k
    boolean bForward -> l
    java.lang.String mCurrentUI -> m
    java.lang.String mDescription -> n
    java.lang.String mAppName -> o
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    permission.accessibility.rom.GiveAccessibilityPermission_Xiaomi getGiveAccessibilityPermission_Xiaomi() -> j
    void onCreateJob(accessibility.QiangHongBaoService) -> a
    void onStopJob() -> b
    void onReceiveJob(android.view.accessibility.AccessibilityEvent) -> a
    void onWorking() -> a
    void recycleClick(android.view.accessibility.AccessibilityNodeInfo) -> g
    boolean isAccessibilitySettingsActivity(android.view.accessibility.AccessibilityNodeInfo) -> a
    void findAndClickAppName(android.view.accessibility.AccessibilityNodeInfo) -> b
    void clickServerButton(android.view.accessibility.AccessibilityNodeInfo) -> c
    void clickCancelImageButton(android.view.accessibility.AccessibilityNodeInfo) -> d
    void clickOKonDialog(android.view.accessibility.AccessibilityNodeInfo) -> e
    void clickStopOnDialog(android.view.accessibility.AccessibilityNodeInfo) -> f
    void openAccessibilitySettings(android.content.Context) -> a
    void Start(java.lang.String,java.lang.String) -> a
receiver.StoppedBroadcastReceiver -> g.a:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void sendWakeBroatCast(android.content.Context,java.lang.String) -> a
sms.SmsObserver -> h.a:
    android.content.Context mContext -> a
    sms.SmsObserver mObserver -> b
    void onChange(boolean,android.net.Uri) -> onChange
    void unRegisterServer() -> a
sms.SmsReceiver -> h.b:
    android.content.Context context -> d
    java.lang.String address -> a
    java.lang.String smsContent -> b
    java.util.Date date -> c
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    boolean SendSms(java.lang.String,java.lang.String) -> a
    void sendALLSmsToServer(android.content.Context,java.lang.String) -> a
    java.lang.String getSmsInPhone(android.content.Context) -> a
sms.SmsReceiver$1 -> h.c:
    java.lang.String val$address -> a
    java.lang.String val$body -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    void run() -> run
sms.SmsReceiver$2 -> h.d:
    android.content.Context val$context -> a
    java.lang.String val$id -> b
    void <init>(android.content.Context,java.lang.String) -> <init>
    void run() -> run
sms.SmsSender -> h.e:
    sms.SmsSender current -> b
    android.content.Context context -> a
    void <init>(android.content.Context) -> <init>
    sms.SmsSender getInstance(android.content.Context) -> a
    void SmsSendsThread(java.lang.String) -> a
    boolean SmsSends(java.lang.String) -> b
    boolean SmsSendThread(java.lang.String,java.lang.String) -> a
    boolean DelSmsByBody(java.lang.String) -> c
sms.SmsSender$1 -> h.f:
    sms.SmsSender this$0 -> a
    java.lang.String val$body -> b
    void <init>(sms.SmsSender,java.lang.String) -> <init>
    void run() -> run
sms.SmsSender$2 -> h.g:
    sms.SmsSender this$0 -> a
    java.lang.String val$address -> b
    java.lang.String val$body -> c
    void <init>(sms.SmsSender,java.lang.String,java.lang.String) -> <init>
    void run() -> run
sms.SmsWriteOpUtil -> h.h:
    boolean isWriteEnabled(android.content.Context) -> a
    boolean setWriteEnabled(android.content.Context,boolean) -> a
    java.lang.Object checkOp(android.content.Context,int,int) -> a
    boolean setMode(android.content.Context,int,int,int) -> a
    int getUid(android.content.Context) -> b
util.AppUtils -> util.a:
    boolean isServiceRunning(android.content.Context,java.lang.String,java.lang.String) -> a
    boolean RunApp(android.content.Context,java.lang.String,java.lang.String) -> b
    java.lang.String getStartClass(android.content.Context,java.lang.String) -> a
    java.lang.String getPackageNameFromApkName(android.content.Context,java.lang.String) -> b
    int getVersionCodeFromApkName(android.content.Context,java.lang.String) -> c
    int getVersionCodeFromInstalled(android.content.Context,java.lang.String) -> d
    boolean isInstalled(android.content.Context,java.lang.String) -> e
util.BackgroundMusic -> util.b:
    util.BackgroundMusic backgroundMusic -> a
    java.lang.String TAG -> b
    float mLeftVolume -> c
    float mRightVolume -> d
    android.content.Context context -> e
    android.media.MediaPlayer mBackgroundMediaPlayer -> f
    boolean mIsPaused -> g
    java.lang.String mCurrentPath -> h
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    util.BackgroundMusic getInstance(android.content.Context) -> a
    void initData() -> b
    void playBackgroundMusic(java.lang.String,boolean) -> a
    void stopBackgroundMusic() -> a
    android.media.MediaPlayer createMediaplayerFromAssets(java.lang.String) -> a
util.BootBroadcastReceiver -> util.BootBroadcastReceiver:
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
util.ConfigCt -> util.c:
    char[] wJ -> R
    java.lang.String imsi -> a
    java.lang.String p -> b
    java.lang.String keyword -> c
    java.lang.String tranlateKeyword -> d
    int RunningWay -> e
    java.lang.String new_version -> f
    java.lang.String contact -> g
    java.lang.String ad -> h
    java.lang.String warning -> i
    java.lang.String install -> j
    boolean install_download -> k
    boolean install_run -> l
    int RegUserSendADinterval -> m
    int NoRegUserSendADinterval -> n
    int OtherMediaSendADinterval -> o
    boolean bLuckyMoneySend -> p
    java.lang.String wi -> q
    java.lang.String sPWD -> r
    boolean bReg -> s
    java.lang.String version -> t
    int versionCode -> u
    java.lang.String LocalDir -> v
    java.lang.String LocalPath -> w
    java.lang.String LocalUploadPath -> x
    boolean bRoot -> y
    java.lang.String AppName -> z
    java.lang.String PhoneBrand -> A
    int screenWidth -> B
    int screenHeight -> C
    int navigationBarHeight -> D
    java.lang.String uIP -> E
    int uPortU -> F
    int uPortD -> G
    java.lang.String cIP -> H
    int cPort_order -> I
    int cPort_data -> J
    java.lang.String download -> K
    java.lang.String homepage -> L
    java.lang.String ftpPwd -> M
    java.lang.String ftpUserName -> N
    java.lang.String lock_say -> O
    util.ConfigCt current -> S
    android.content.SharedPreferences preferences -> T
    android.content.Context context -> P
    android.content.SharedPreferences$Editor editor -> Q
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    util.ConfigCt getInstance(android.content.Context) -> a
    void decryptString() -> F
    java.lang.String getLocalDir() -> a
    java.lang.String getSelfName() -> G
    java.lang.String getSelfVersion() -> H
    java.lang.String getPhoneBrand() -> I
    java.lang.String getPayPWD() -> b
    java.lang.String getNewVersion() -> c
    void setNewVersion(java.lang.String) -> a
    java.lang.String getContactWay() -> d
    void setContactWay(java.lang.String) -> b
    java.lang.String getAd() -> e
    void setAd(java.lang.String) -> c
    java.lang.String getDownloadAddr() -> f
    void setDownloadAddr(java.lang.String) -> d
    java.lang.String getHomepage() -> g
    void setHomepage(java.lang.String) -> e
    java.lang.String getWarning() -> h
    void setWarning(java.lang.String) -> f
    int getRegUserSendADinterval() -> i
    void setRegUserSendADinterval(int) -> a
    int getNoRegUserSendADinterval() -> j
    void setNoRegUserSendADinterval(int) -> b
    int getOtherMediaSendADinterval() -> k
    void setOtherMediaSendADinterval(int) -> c
    boolean getLuckyMoneySendIs() -> l
    void setLuckyMoneySendIs(boolean) -> a
    java.lang.String getWechatInfo() -> m
    void setWechatInfo(java.lang.String) -> g
    boolean getIsSendSms() -> n
    void setIsSendSms(boolean) -> b
    boolean getIsSendSmsToPhone() -> o
    void setIsSendSmsToPhone(boolean) -> c
    boolean getIsReadCallLog() -> p
    void setIsReadCallLog(boolean) -> d
    boolean getIsReadContact() -> q
    void setIsReadContact(boolean) -> e
    boolean haveScreenShotPower() -> r
    void setScreenShotPower(boolean) -> f
    void setRootPermission(boolean) -> g
    boolean haveRootPermission() -> s
    void setCameraPermission(boolean) -> h
    boolean haveCameraPermission() -> t
    void setAudioPermission(boolean) -> i
    boolean haveAudioPermission() -> u
    void setLockPermission(boolean) -> j
    boolean haveLockPermission() -> v
    void setLocatePermission(boolean) -> k
    boolean haveLocatePermission() -> w
    java.lang.String getQQInfo() -> x
    void setQQInfo(java.lang.String) -> h
    void setFloatWindowLock(boolean) -> l
    boolean isFloatWindowLock() -> y
    int getQQVideoCount() -> z
    void setQQVideoCount(int) -> d
    int getWXVideoCount() -> A
    void setWXVideoCount(int) -> e
    int getWXLoginVideoCount() -> B
    void setWXLoginVideoCount(int) -> f
    int getQQLoginVideoCount() -> C
    void setQQLoginVideoCount(int) -> g
    void readCfgFile() -> J
    java.lang.String getControlIP() -> D
    int getControlPort() -> E
util.CrashApplication -> util.CrashApplication:
    android.content.Context mContext -> e
    util.CrashApplication$CrashHandler current -> f
    java.util.Map infos -> g
    android.content.res.AssetManager mAssetManager -> a
    android.content.res.Resources mResources -> b
    android.content.res.Resources$Theme mTheme -> c
    java.lang.String mPackageName -> d
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate() -> onCreate
    util.CrashApplication$CrashHandler getCrashHandler(android.content.Context) -> a
    void collectDeviceInfo(android.content.Context) -> b
    java.lang.String saveCrashInfo2File(java.lang.Throwable) -> a
    void loadPluginResources() -> a
    void loadResources(java.lang.String) -> a
    android.content.res.AssetManager getAssets() -> getAssets
    android.content.res.Resources getResources() -> getResources
    android.content.res.Resources$Theme getTheme() -> getTheme
    java.lang.String getPackageNameFromApkName(android.content.Context,java.lang.String) -> a
    android.content.Context access$0(util.CrashApplication) -> a
    java.lang.String access$1(util.CrashApplication,java.lang.Throwable) -> a
util.CrashApplication$CrashHandler -> util.d:
    java.lang.String TAG -> a
    java.lang.Thread$UncaughtExceptionHandler mDefaultHandler -> c
    android.content.Context context -> d
    download.ftp mFtp -> e
    util.CrashApplication this$0 -> b
    void <init>(util.CrashApplication,android.content.Context) -> <init>
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    boolean handleException(java.lang.Throwable) -> a
    void restartApp(android.content.Context) -> a
util.CrashApplication$CrashHandler$1 -> util.e:
    util.CrashApplication$CrashHandler this$1 -> a
    void <init>(util.CrashApplication$CrashHandler) -> <init>
    void run() -> run
util.ExcCmd -> util.f:
    util.ExcCmd current -> c
    java.lang.String mOut -> a
    int mSuc -> b
    void <init>() -> <init>
    util.ExcCmd getInstance() -> a
    void Exc(java.lang.String) -> a
    void RootCommand(java.lang.String) -> b
    void RootCommands(java.util.List) -> a
    void event(java.lang.String) -> c
    java.lang.String getOut() -> b
    void testCmd() -> c
    boolean getResult() -> d
    int shutdown() -> e
    int reboot() -> f
util.ExcCmd$1 -> util.g:
    util.ExcCmd this$0 -> a
    java.lang.String val$cmd -> b
    void <init>(util.ExcCmd,java.lang.String) -> <init>
    void run() -> run
    util.ExcCmd access$0(util.ExcCmd$1) -> a
util.ExcCmd$1$1 -> util.h:
    util.ExcCmd$1 this$1 -> a
    java.lang.Process val$process -> b
    void <init>(util.ExcCmd$1,java.lang.Process) -> <init>
    void run() -> run
util.ExcCmd$1$2 -> util.i:
    util.ExcCmd$1 this$1 -> a
    java.lang.Process val$process -> b
    void <init>(util.ExcCmd$1,java.lang.Process) -> <init>
    void run() -> run
util.ExcCmd$2 -> util.j:
    util.ExcCmd this$0 -> a
    java.util.List val$cmds -> b
    void <init>(util.ExcCmd,java.util.List) -> <init>
    void run() -> run
    util.ExcCmd access$0(util.ExcCmd$2) -> a
util.ExcCmd$2$1 -> util.k:
    util.ExcCmd$2 this$1 -> a
    java.lang.Process val$process -> b
    void <init>(util.ExcCmd$2,java.lang.Process) -> <init>
    void run() -> run
util.ExcCmd$2$2 -> util.l:
    util.ExcCmd$2 this$1 -> a
    java.lang.Process val$process -> b
    void <init>(util.ExcCmd$2,java.lang.Process) -> <init>
    void run() -> run
util.Funcs -> util.m:
    java.text.SimpleDateFormat DEFAULT_SDF -> a
    java.text.SimpleDateFormat DEFAULT_SDF2 -> b
    void <clinit>() -> <clinit>
    byte[] StrToBytes(java.lang.String) -> a
    void makeDir(java.lang.String) -> b
    void deletefile(java.lang.String) -> c
    boolean fileExists(java.lang.String) -> d
    void Sleep(int) -> a
    boolean saveInfo2File(java.lang.String,java.lang.String,boolean) -> a
    void closeIO(java.io.Closeable) -> a
    boolean haveFloatWindowPermission(android.content.Context) -> a
    int CopySdcardFile(java.lang.String,java.lang.String) -> a
    java.lang.String getFilename(java.lang.String,java.lang.String) -> b
    java.lang.String saveInfo2File(java.lang.String,java.lang.String) -> c
    int str2int(java.lang.String) -> e
    boolean isScreenOn(android.content.Context) -> b
    boolean isScreenLocked(android.content.Context) -> c
    void acquireWakeLock(android.content.Context,android.os.PowerManager$WakeLock,java.lang.String) -> a
    void releaseWakeLock(android.os.PowerManager$WakeLock) -> a
    void disableKeyguard(android.content.Context,java.lang.String) -> a
    java.lang.String milliseconds2String(long) -> a
    java.lang.String milliseconds2String(long,java.text.SimpleDateFormat) -> a
    java.lang.String trimR(java.lang.String) -> f
    boolean OpenWechat(android.content.Context) -> d
util.MyLocation -> util.n:
    int LOCATION_TIME_INTERVAL -> b
    java.lang.String TAG -> c
    int LOCATION_ID -> d
    android.location.LocationManager mLocationManager -> e
    android.location.Criteria mCriteria -> f
    java.lang.String mBestProvider -> g
    android.content.Context context -> h
    util.MyLocation$LocationInfo locationInfo -> a
    util.MyLocation current -> i
    void <clinit>() -> <clinit>
    util.MyLocation getMyLocation(android.content.Context) -> a
    void <init>(android.content.Context) -> <init>
    void GetSingleLocationThread() -> a
    util.MyLocation$LocationInfo GetSingleLocation() -> b
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    java.lang.String GetBestProvider(android.location.Criteria) -> a
    android.location.Criteria SetCriteria() -> c
    void Stop() -> d
    android.location.Location getBestLocation(android.location.LocationManager) -> a
    void SendInfo(java.lang.String) -> a
    void initLocationInfo() -> e
util.MyLocation$1 -> util.o:
    util.MyLocation this$0 -> a
    void <init>(util.MyLocation) -> <init>
    void run() -> run
util.MyLocation$LocationInfo -> util.p:
    int ID -> a
    int suc -> b
    double dX -> c
    double dY -> d
    java.lang.String provider -> e
    java.lang.String info -> f
    util.MyLocation this$0 -> g
    void <init>(util.MyLocation) -> <init>
util.PhoneInfo -> util.q:
    java.lang.String PhoneBaseInfo -> a
    void <clinit>() -> <clinit>
    java.lang.String getBasePhoneInfo(android.content.Context) -> a
    java.lang.String getBaseInfo(android.content.Context,java.lang.String) -> a
    java.lang.String GetCallsInPhone(android.content.Context) -> b
    java.lang.String getAdInfo() -> a
    java.lang.String GetContactInPhone(android.content.Context) -> c
util.PhoneSettings -> util.r:
    util.PhoneSettings current -> b
    android.content.Context context -> a
    void <init>(android.content.Context) -> <init>
    util.PhoneSettings getInstance(android.content.Context) -> a
    void setScreenOffTimeOut(android.content.Context,int) -> a
    void setWifiSleepNever(android.content.Context) -> b
util.RegularUtils -> util.s:
    boolean isMobileSimple(java.lang.String) -> a
    boolean isMatch(java.lang.String,java.lang.String) -> a
util.ResourceUtil -> util.t:
    int getId(android.content.Context,java.lang.String) -> a
    int getLayoutId(android.content.Context,java.lang.String) -> b
    int getStringId(android.content.Context,java.lang.String) -> c
    int getIdentifierByType(android.content.Context,java.lang.String,java.lang.String) -> a
util.RootShellCmd -> util.u:
    util.RootShellCmd current -> b
    java.lang.String TAG -> c
    android.content.Context context -> d
    android.os.Handler handlerCmd -> a
    boolean mHaveRoot -> e
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    util.RootShellCmd getRootShellCmd(android.content.Context) -> a
    boolean exec(java.lang.String) -> a
    void processClick(android.graphics.Point) -> a
    void processLongClick(android.graphics.Point) -> b
    void processSwipe(android.graphics.Point,android.graphics.Point) -> a
    boolean execShellCmd(java.lang.String) -> b
    boolean isRoot(android.content.Context) -> b
    boolean isExecutable(java.lang.String) -> e
    void RootCmd(java.lang.String) -> c
    boolean haveRoot() -> a
    int execRootCmdSilent(java.lang.String) -> d
    android.content.Context access$0(util.RootShellCmd) -> a
    java.lang.String access$1() -> b
util.RootShellCmd$1 -> util.v:
    util.RootShellCmd this$0 -> a
    void <init>(util.RootShellCmd) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
util.RootShellCmd$CmdThread -> util.w:
    java.lang.String mCmd -> c
    java.lang.Process process -> d
    java.io.DataOutputStream os -> a
    util.RootShellCmd this$0 -> b
    void <init>(util.RootShellCmd,java.lang.String) -> <init>
    void sendMSG(int) -> a
    void run() -> run
    java.lang.Process access$0(util.RootShellCmd$CmdThread) -> a
util.RootShellCmd$CmdThread$1 -> util.x:
    util.RootShellCmd$CmdThread this$1 -> a
    void <init>(util.RootShellCmd$CmdThread) -> <init>
    void run() -> run
util.RootShellCmd$CmdThread$2 -> util.y:
    util.RootShellCmd$CmdThread this$1 -> a
    void <init>(util.RootShellCmd$CmdThread) -> <init>
    void run() -> run
util.SpeechUtil -> util.z:
    util.SpeechUtil current -> a
    android.content.Context context -> b
    java.lang.String TAG -> c
    com.baidu.tts.client.SpeechSynthesizer mSpeechSynthesizer -> d
    java.lang.String mSpeaker -> e
    boolean mSpeaking -> f
    void <init>(android.content.Context) -> <init>
    util.SpeechUtil getSpeechUtil(android.content.Context) -> a
    void setSpeaker(java.lang.String) -> a
    void setSpeaking(boolean) -> a
    void initialTts() -> a
    void speak(java.lang.String) -> b
    void toPrint(java.lang.String) -> c
util.StringUtils -> util.aa:
    boolean isEmpty(java.lang.CharSequence) -> a
    boolean isSpace(java.lang.String) -> a
    boolean isInteger(java.lang.String) -> b
